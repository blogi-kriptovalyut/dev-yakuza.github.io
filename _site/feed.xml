<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/" rel="alternate" type="text/html"/><updated>2018-12-19T17:55:28+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">react-native-animatable</title><link href="https://dev-yakuza.github.io/react-native/react-native-animatable/" rel="alternate" type="text/html" title="react-native-animatable"/><published>2018-12-19T00:00:00+09:00</published><updated>2018-12-19T14:36:13+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-animatable-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-animatable/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;基本的に結構使ってるアニメーションを纏めた&lt;a href=&quot;https://github.com/oblador/react-native-animatable&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-animatable&lt;/a&gt;ライブラリを使ってアニメーションを利用する方法について説明します。&lt;/p&gt; &lt;p&gt;このブログではRN(react native)に&lt;code class=&quot;highlighter-rouge&quot;&gt;typescript&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;styled-components&lt;/code&gt;が適用されたプロジェクトで説明します。RN(react native)で&lt;code class=&quot;highlighter-rouge&quot;&gt;typescript&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;styled-components&lt;/code&gt;を適用する方法については以前のブログを確認してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/typescript/&quot; target=&quot;_blank&quot;&gt;typescript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/styled-components/&quot; target=&quot;_blank&quot;&gt;styled-components&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ライブラリインストール&quot;&gt;ライブラリインストール&lt;/h2&gt; &lt;p&gt;react-native-animatableライブラリを使うため、下記のコマンドでライブラリをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react-native-animatable &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;基本的な使い方&quot;&gt;基本的な使い方&lt;/h2&gt; &lt;p&gt;下記のようにアニメーションを追加した部分にソースを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-animatable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zoomInUp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zoom&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Scotty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Animatable.Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;イベントを通じて使い方&quot;&gt;イベントを通じて使い方&lt;/h2&gt; &lt;p&gt;RN(react native)の&lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;を使ってユーザーイベントが発生した時、アニメーションが実行されるように作れます。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-animatable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnimationRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TouchableWithoutFeedback&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_onPress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AnimationRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bounce&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Animatable.View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/TouchableWithoutFeedback&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AnimationRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;styled-components&quot;&gt;styled-components&lt;/h2&gt; &lt;p&gt;styled-componentsで作ったコンポーネント(component)にアニメーションを適用する方法です。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'styled-components/native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-animatable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyledImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createAnimatableComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StyledImage&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bounceIn&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useNativeDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;使えるアニメーション&quot;&gt;使えるアニメーション&lt;/h2&gt; &lt;p&gt;使えるアニメーションは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-animatable&lt;/code&gt;の公式レポジトリ(Repository)で例と一緒に確認できます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/oblador/react-native-animatable&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/oblador/react-native-animatable&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下記は使えるアニメーションのリストです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;bounce&lt;/li&gt; &lt;li&gt;flash&lt;/li&gt; &lt;li&gt;jello&lt;/li&gt; &lt;li&gt;pulse&lt;/li&gt; &lt;li&gt;rotate&lt;/li&gt; &lt;li&gt;rubberBand&lt;/li&gt; &lt;li&gt;shake&lt;/li&gt; &lt;li&gt;swing&lt;/li&gt; &lt;li&gt;tada&lt;/li&gt; &lt;li&gt;wobble&lt;/li&gt; &lt;li&gt;bounceIn&lt;/li&gt; &lt;li&gt;bounceInDown&lt;/li&gt; &lt;li&gt;bounceInUp&lt;/li&gt; &lt;li&gt;bounceInLeft&lt;/li&gt; &lt;li&gt;bounceInRight&lt;/li&gt; &lt;li&gt;bounceOut&lt;/li&gt; &lt;li&gt;bounceOutDown&lt;/li&gt; &lt;li&gt;bounceOutUp&lt;/li&gt; &lt;li&gt;bounceOutLeft&lt;/li&gt; &lt;li&gt;bounceOutRight&lt;/li&gt; &lt;li&gt;fadeIn&lt;/li&gt; &lt;li&gt;fadeInDown&lt;/li&gt; &lt;li&gt;fadeInDownBig&lt;/li&gt; &lt;li&gt;fadeInUp&lt;/li&gt; &lt;li&gt;fadeInUpBig&lt;/li&gt; &lt;li&gt;fadeInLeft&lt;/li&gt; &lt;li&gt;fadeInLeftBig&lt;/li&gt; &lt;li&gt;fadeInRight&lt;/li&gt; &lt;li&gt;fadeInRightBig&lt;/li&gt; &lt;li&gt;fadeOut&lt;/li&gt; &lt;li&gt;fadeOutDown&lt;/li&gt; &lt;li&gt;fadeOutDownBig&lt;/li&gt; &lt;li&gt;fadeOutUp&lt;/li&gt; &lt;li&gt;fadeOutUpBig&lt;/li&gt; &lt;li&gt;fadeOutLeft&lt;/li&gt; &lt;li&gt;fadeOutLeftBig&lt;/li&gt; &lt;li&gt;fadeOutRight&lt;/li&gt; &lt;li&gt;fadeOutRightBig&lt;/li&gt; &lt;li&gt;flipInX&lt;/li&gt; &lt;li&gt;flipInY&lt;/li&gt; &lt;li&gt;flipOutX&lt;/li&gt; &lt;li&gt;flipOutY&lt;/li&gt; &lt;li&gt;lightSpeedIn&lt;/li&gt; &lt;li&gt;lightSpeedOut&lt;/li&gt; &lt;li&gt;slideInDown&lt;/li&gt; &lt;li&gt;slideInUp&lt;/li&gt; &lt;li&gt;slideInLeft&lt;/li&gt; &lt;li&gt;slideInRight&lt;/li&gt; &lt;li&gt;slideOutDown&lt;/li&gt; &lt;li&gt;slideOutUp&lt;/li&gt; &lt;li&gt;slideOutLeft&lt;/li&gt; &lt;li&gt;slideOutRight&lt;/li&gt; &lt;li&gt;zoomIn&lt;/li&gt; &lt;li&gt;zoomInDown&lt;/li&gt; &lt;li&gt;zoomInUp&lt;/li&gt; &lt;li&gt;zoomInLeft&lt;/li&gt; &lt;li&gt;zoomInRight&lt;/li&gt; &lt;li&gt;zoomOut&lt;/li&gt; &lt;li&gt;zoomOutDown&lt;/li&gt; &lt;li&gt;zoomOutUp&lt;/li&gt; &lt;li&gt;zoomOutLeft&lt;/li&gt; &lt;li&gt;zoomOutRight&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;簡単なアニメーションを早く導入したい時、&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-animatable&lt;/code&gt;ライブラリを使うことをおすすめします。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/oblador/react-native-animatable&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/oblador/react-native-animatable&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 基本的に結構使ってるアニメーションを纏めたreact-native-animatableライブラリを使ってアニメーションを利用する方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-animatable.jpg"/></entry><entry xml:lang="ja"><title type="html">Firebase Crashlytics</title><link href="https://dev-yakuza.github.io/react-native/firebase-crashlytics/" rel="alternate" type="text/html" title="Firebase Crashlytics"/><published>2018-12-12T00:00:00+09:00</published><updated>2018-12-14T13:19:15+09:00</updated><id>https://dev-yakuza.github.io/react-native/firebase-crashlytics-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/firebase-crashlytics/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログ(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-app-crash-debugging/&quot; target=&quot;_blank&quot;&gt;iOS App crash 分析&lt;/a&gt;)でアプリ審査の拒絶(reject)にあるApp crash logを分析してみました。しかし、審査中ではなくユーザーが使ってる環境でCrashが発生したら私たちは分からないです。それでファイアベース(Firebase)のCrashlyticsを使ってアプリのCrashを収集して分析してみます。このブログではreact-native-firebaseライブラリを使う予定です。react-native-firebaseライブラリのインストールや設定は以前のブログを確認してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ios設定&quot;&gt;iOS設定&lt;/h2&gt; &lt;p&gt;ファイアベース(Firebase)のCrashlyticsを使うためreact-native-firebaseを設定します。&lt;/p&gt; &lt;h3 id=&quot;必要なライブラリ設定やインストール&quot;&gt;必要なライブラリ設定やインストール&lt;/h3&gt; &lt;p&gt;iOSへ必要なライブラリを下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;に追加します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Core'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/AdMob'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fabric'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Crashlytics'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加したライブラリを下の&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt;コマンドでインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cd ios&lt;/span&gt; pod update &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;crashlytics実行スクリプト追加&quot;&gt;Crashlytics実行スクリプト追加&lt;/h3&gt; &lt;p&gt;ファイアベース(Firebase)のCrashlyticsを使うためCrashlytics実効スクリプトを追加する必要があります。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルダにある&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/[AppName].xcworkspace&lt;/code&gt;を選択してXcodeを実効します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/execute_xcode.png&quot; alt=&quot;xcode 実効&quot; /&gt;&lt;/p&gt; &lt;p&gt;左にあるファイルエクスプローラと&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS&lt;/code&gt;で自分のプロジェクトを選択します。そして上のメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/build_phases.png&quot; alt=&quot;xcode build phases&quot; /&gt;&lt;/p&gt; &lt;p&gt;Build Phasesタブで左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;New Run Script Phase&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/new_run_script.png&quot; alt=&quot;new run script menu on build phases&quot; /&gt;&lt;/p&gt; &lt;p&gt;下記のコマンドを&lt;code class=&quot;highlighter-rouge&quot;&gt;Run Scrit&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Shelll&lt;/code&gt;下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;# Type a script..&lt;/code&gt;に入力します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PODS_ROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Fabric/run&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/add_run_script.png&quot; alt=&quot;add Run Script&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;テスト&quot;&gt;テスト&lt;/h3&gt; &lt;p&gt;今まで設定したファイアベース(Firebase)のCrashlyticsをテストするため下記のコードをテストしたい位置に入れます。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crashlytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;この部分は強制的にアプリをCrashさせるコードです。アプリのCrashが発生して終了されたら、ファイアベース(Firebase)のCrashlyticsに報告できるようにアプリをもう一度起動します。&lt;/p&gt; &lt;p&gt;下記のコマンドまたはxcodeを使ってシミュレータを起動します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;xcodeを使ってシミュレータを起動した方はxcodeを終了してシミュレータでアプリを選択して再起動してください。xcodeが起動中にCrashが発生したらCrashlyticsまで報告が行かなく、xcodeがCrashを処理します。&lt;/p&gt; &lt;p&gt;Crashが発生してアプリをまた起動します。少し時間がたったらファイアベースコンソル(Firebase Console)のCrashlyticsに下のような内容が確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/firebase_crashlytics.png&quot; alt=&quot;Firebase Console Crashlytics&quot; /&gt;&lt;/p&gt; &lt;p&gt;注意：テストコード(&lt;code class=&quot;highlighter-rouge&quot;&gt;firebase.crashlytics().crash();&lt;/code&gt;)は確認が終わったら必ず削除してください。&lt;/p&gt; &lt;h2 id=&quot;アンドロイド設定&quot;&gt;アンドロイド設定&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)でファイアベース(Firebase)のCrashlyticsを使うためreact-native-firebaseを設定します。&lt;/p&gt; &lt;h3 id=&quot;必要なライブラリ設定やインストール-1&quot;&gt;必要なライブラリ設定やインストール&lt;/h3&gt; &lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルを修正します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: &quot;com.android.application&quot; apply plugin: 'io.fabric' ... dependencies { ... implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') { transitive = true } } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;android/build.gradle&lt;/code&gt;ファイルを修正します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... buildscript { ... dependencies { ... classpath 'com.google.gms:google-services:4.0.1' classpath 'io.fabric.tools:gradle:1.25.4' } ... repositories { ... jcenter() maven { url 'https://maven.fabric.io/public' } } ... } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/[app name]/MainApplication.java&lt;/code&gt;ファイルを修正します。&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.invertase.firebase.RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.invertase.firebase.fabric.crashlytics.RNFirebaseCrashlyticsPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebaseCrashlyticsPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;テスト-1&quot;&gt;テスト&lt;/h3&gt; &lt;p&gt;今まで設定したファイアベース(Firebase)のCrashlyticsをテストするため下記のコードをテストしたい位置へ追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crashlytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;crash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンドロイド(Android)ではエミュレータを起動して&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native run-android&lt;/code&gt;を実効してCrashを 発生させたら赤いエラー画面がでって実際Crashが報告されませんでした。それで私たちはエミュレータへビルドしたファイルをインストールしてテストしました。アンドロイド(Android)ビルドやテストに関しては&lt;a href=&quot;https://dev-yakuza.github.io/react-native/android-running-on-device/&quot; target=&quot;_blank&quot;&gt;アンドロイドビルドやテスト&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native bundle &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; android &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--entry-file&lt;/span&gt; index.js &lt;span class=&quot;nt&quot;&gt;--bundle-output&lt;/span&gt; android/app/src/main/assets/index.android.bundle &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のコマンドを使ってjavascriptをビルドした後、下記のコマンドでエミュレータにビルドされたファイルをインストールしました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;それでテストしたら下記のようにアンドロイド(Android)でもCrash報告を見ることができました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/firebase-crashlytics/firebase_crashlytics_android.png&quot; alt=&quot;Firebase Console Crashlytics android&quot; /&gt;&lt;/p&gt; &lt;p&gt;注意: テストコード(&lt;code class=&quot;highlighter-rouge&quot;&gt;firebase.crashlytics().crash();&lt;/code&gt;)は確認が完了したら必ず削除してください。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/docs/crashlytics/get-started&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com/docs/crashlytics/get-started&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://rnfirebase.io/docs/v5.x.x/crashlytics/ios&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://rnfirebase.io/docs/v5.x.x/crashlytics/ios&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログ(iOS App crash 分析)でアプリ審査の拒絶(reject)にあるApp crash logを分析してみました。しかし、審査中ではなくユーザーが使ってる環境でCrashが発生したら私たちは分からないです。それでファイアベース(Firebase)のCrashlyticsを使ってアプリのCrashを収集して分析してみます。このブログではreact-native-firebaseライブラリを使う予定です。react-native-firebaseライブラリのインストールや設定は以前のブログを確認してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/firebase-crashlytics.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS App crash分析</title><link href="https://dev-yakuza.github.io/react-native/ios-app-crash-debugging/" rel="alternate" type="text/html" title="iOS App crash分析"/><published>2018-12-11T00:00:00+09:00</published><updated>2018-12-13T17:51:02+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-app-crash-debugging-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-app-crash-debugging/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;アプリ審査のためアプリを提出したがApp crash理由で拒絶(reject)されました。親切にも拒絶(reject)の理由とcrashログ(log)ファイルを一緒に送ってくらました。こんな感じで貰ったcrashログ(log)ファイルを分析してどこの部分でエラーが発生したかを探す方法に関して説明します。&lt;/p&gt; &lt;h2 id=&quot;アプリ審査拒絶&quot;&gt;アプリ審査拒絶&lt;/h2&gt; &lt;p&gt;アップルのアプリ審査が拒絶(reject)されたらメールを送ってくれます。メールを貰ったらアプリストアコネクト(Appstore connect)に移動してアプリ審査拒絶(reject)の理由を確認します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-app-crash-debugging/app_reject.png&quot; alt=&quot;アプリ審査拒絶&quot; /&gt;&lt;/p&gt; &lt;p&gt;特にアプリ審査拒絶(reject)理由がApp crashだったら下記のようにApp crash logも一緒に送ってくれます。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Guideline 2.1 - Performance - App Completeness We were unable to review your app as it crashed on launch. We have attached detailed crash logs to help troubleshoot this issue. Next Steps To resolve this issue, please revise your app and test it on a device to ensure it will launch without crashing. Resources For information on how to symbolicate and read a crash log, please review Tech Note TN2151 Understanding and Analyzing Application Crash Reports. crashlog-CDDAD5F8-F56A-470D-94BA-55149F76E390.txt crashlog-D75B7641-0AF7-4DF4-8702-2E6665172390.txt crashlog-3A0F07E3-874D-462F-9FFF-BCE88C98D224.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アプリ審査拒絶(reject)内容にある&lt;a href=&quot;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;Tech Note TN2151 Understanding and Analyzing Application Crash Reports&lt;/a&gt;リンクを確認したら、App crash logを確認する方法について詳しく説明が出ております。&lt;/p&gt; &lt;p&gt;まず、送ってくれたログ(log)ファイルをダウンロードします。&lt;/p&gt; &lt;h2 id=&quot;シンボルファイルダウンロード&quot;&gt;シンボルファイルダウンロード&lt;/h2&gt; &lt;p&gt;App crash logを分析するためにはアプリのシンボルファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;dSYM&lt;/code&gt;)が必要です。アプリストアコネクト(Appstore connect)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;タブに移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-app-crash-debugging/appstoreconnect_activity.png&quot; alt=&quot;アプリストアコネクトActivityタブ&quot; /&gt;&lt;/p&gt; &lt;p&gt;左にある &lt;code class=&quot;highlighter-rouge&quot;&gt;`All Builds&lt;/code&gt;`を選択してアプリ審査に提出したビルドのバージョンを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-app-crash-debugging/appstoreconnect_download_symbol.png&quot; alt=&quot;シンボルファイルダウンロード&quot; /&gt;&lt;/p&gt; &lt;p&gt;右下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Download dSYM&lt;/code&gt;リンクを押してシンボルファイルをダウンロードして圧縮を解除します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7ED9CAAD-F7F7-31E6-8480-2D358FBEF9C7.dSYM E3430BAD-2EB8-3B8D-8E04-4BB66E2A4E58.dSYM &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ログファイル分析&quot;&gt;ログファイル分析&lt;/h2&gt; &lt;p&gt;今からアップルが送ったApp crash logファイルを分析してみます。全てのログ(log)ファイルは下記のようなヘッダー(header)を持ってます。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Incident Identifier: 3A0F07E3-874D-462F-9FFF-BCE88C98D224 CrashReporter Key: 28b54437587b1ef1e81059e98250b166b0d343c8 Hardware Model: xxx Process: blaboo [2012] Path: /private/var/containers/Bundle/Application/488E158A-64B5-439E-82BC-F702CF26E5DA/blaboo.app/blaboo Identifier: io.github.dev-yakuza.blaboo Version: 1 (1.0.6) AppStoreTools: 10B63 Code Type: ARM-64 (Native) Role: Non UI Parent Process: launchd [1] Coalition: io.github.dev-yakuza.blaboo [661] Date/Time: 2018-12-10 17:20:22.0217 -0800 Launch Time: 2018-12-10 17:20:01.9857 -0800 OS Version: iPhone OS 12.1 (16B92) Baseband Version: 7.21.00 Report Version: 104 Exception Type: EXC_CRASH (SIGKILL) Exception Codes: 0x0000000000000000, 0x0000000000000000 Exception Note: EXC_CORPSE_NOTIFY Termination Reason: Namespace SPRINGBOARD, Code 0x8badf00d Termination Description: SPRINGBOARD, scene-create watchdog transgression: io.github.dev-yakuza.blaboo exhausted real (wall clock) time allowance of 19.94 seconds | ProcessVisibility: Foreground | ProcessState: Running | WatchdogEvent: scene-create | WatchdogVisibility: Foreground | WatchdogCPUStatistics: ( | &quot;Elapsed total CPU time (seconds): 24.600 (user 24.600, system 0.000), 41% CPU&quot;, | &quot;Elapsed application CPU time (seconds): 0.237, 0% CPU&quot; | ) Triggered by Thread: 0 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ヘッダー(header)にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception Type&lt;/code&gt;を&lt;a href=&quot;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&lt;/a&gt;サイトで確認することで大まかな情報を取得できます。&lt;/p&gt; &lt;p&gt;例えば、&lt;code class=&quot;highlighter-rouge&quot;&gt;Bad Memory Access [EXC_BAD_ACCESS // SIGSEGV // SIGBUS]&lt;/code&gt;の場合プロセスが有効してないメモリへアクセスしたとかread-onlyメモリに書く動作をした時発生します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception Type: EXC_CRASH (SIGKILL) Exception Codes: 0x0000000000000000, 0x0000000000000000 Exception Note: EXC_CORPSE_NOTIFY Termination Reason: Namespace SPRINGBOARD, Code 0x8badf00d Termination Description: SPRINGBOARD, scene-create watchdog transgression: io.github.dev-yakuza.blaboo exhausted real (wall clock) time allowance of 19.94 seconds | ProcessVisibility: Foreground | ProcessState: Running | WatchdogEvent: scene-create | WatchdogVisibility: Foreground | WatchdogCPUStatistics: ( | &quot;Elapsed total CPU time (seconds): 24.600 (user 24.600, system 0.000), 41% CPU&quot;, | &quot;Elapsed application CPU time (seconds): 0.237, 0% CPU&quot; | ) Triggered by Thread: 0 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちのアプリは&lt;code class=&quot;highlighter-rouge&quot;&gt;EXC_CRASH (SIGKILL)&lt;/code&gt;でした。このタイプは&lt;code class=&quot;highlighter-rouge&quot;&gt;Termination Reason&lt;/code&gt;まで確認しないと分からないです。&lt;code class=&quot;highlighter-rouge&quot;&gt;Termination Reason&lt;/code&gt;コードが&lt;code class=&quot;highlighter-rouge&quot;&gt;0x8badf00d&lt;/code&gt;です。上にあるリンクで確認すると&lt;code class=&quot;highlighter-rouge&quot;&gt;The exception code 0x8badf00d indicates that an application has been terminated by iOS because a watchdog timeout occurred.&lt;/code&gt;でタイムアウトされてエラーが発生したと思うられます。&lt;/p&gt; &lt;p&gt;それじゃ、どこでCrashエラーが発生したか探すためターミナル(terminal)を使ってシンボルファイル(dSYM)が存在しているフォルダに移動します。 그럼 어디에서 crash가 발생했는지 찾아보기 위해 터미널(terminal)을 이용해서 심볼 파일(dSYM)이 존재하는 폴더로 이동합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ダウンロードしたファイルファ存在するフォルダに移動します。&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Desktop/crash/ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そして、アップルが送ったApp crash logファイルを開いて一番上にある内容を確認します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ ... &quot;slice_uuid&quot;:&quot;7ed9caad-f7f7-31e6-8480-2d358fbef9c7&quot;, ... } ... Thread 0 name: Dispatch queue: com.apple.main-thread Thread 0 Crashed: ... 10 Security 0x00000001e938b6d8 0x1e9314000 + 489176 11 Security 0x00000001e938944c 0x1e9314000 + 480332 12 Security 0x00000001e938bcd0 0x1e9314000 + 490704 13 blaboo 0x0000000100969608 0x10093c000 + 185864 14 blaboo 0x000000010096ddf0 0x10093c000 + 204272 15 blaboo 0x000000010097190c 0x10093c000 + 219404 ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ここにある&lt;code class=&quot;highlighter-rouge&quot;&gt;slice_uuid&lt;/code&gt;とマッチングされるシンボルファイル(dSYM)を使ってApp crash logを分析します。あと、&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread 0 Crashed&lt;/code&gt;で自分のアプリ名前が見える部分を探します。&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;Tech Note TN2151 Understanding and Analyzing Application Crash Reports&lt;/a&gt;のサイトに書いてるコマンドを使って分析する予定です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atos &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; arm64 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; TheElements.app.dSYM/Contents/Resources/DWARF/TheElements &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 0x1000e4000 0x00000001000effdc &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このコマンドを上で調査した内容で変更したら下記のようです。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# &quot;slice_uuid&quot;:&quot;7ed9caad-f7f7-31e6-8480-2d358fbef9c7&quot;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 13 blaboo 0x0000000100969608 0x10093c000 + 185864&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# atos -arch arm64 -o [slice_uuid].dSYM/Contents/Resources/DWARF/[AppName] -l [4番目のテキスト: 0x10093c000] [3番目のテキスト: 0x0000000100969608]&lt;/span&gt; atos &lt;span class=&quot;nt&quot;&gt;-arch&lt;/span&gt; arm64 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; 7ED9CAAD-F7F7-31E6-8480-2D358FBEF9C7.dSYM/Contents/Resources/DWARF/blaboo &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 0x10093c000 0x0000000100969608 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上記のコマンドを実行したら下記のような結果が見れます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-[FIRInstanceIDAuthKeychain removeItemsMatchingService:account:error:] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;blaboo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + 136 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のようにアプリのcrashが発生した部分を大まかに確認することができます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アップルが送ったApp crash logを分析する方法に関して見てみました。私たちのアプリのApp crash logを分析した結果Admobに問題があるみたいで、確認したらファイアベース(Firebase)からダウンロードしたファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;)に&lt;code class=&quot;highlighter-rouge&quot;&gt;ADMOB_APP_ID&lt;/code&gt;が含まれていなくて問題が発生しました。それでファイアベース(Firebase)から新し&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;ファイルをダウンロードして提供して解決しました。&lt;/p&gt; &lt;h2 id=&quot;ご参考&quot;&gt;ご参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Tech Note TN2151 Understanding and Analyzing Application Crash Reports: &lt;a href=&quot;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1441741187/platform/ios/resolutioncenter&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 アプリ審査のためアプリを提出したがApp crash理由で拒絶(reject)されました。親切にも拒絶(reject)の理由とcrashログ(log)ファイルを一緒に送ってくらました。こんな感じで貰ったcrashログ(log)ファイルを分析してどこの部分でエラーが発生したかを探す方法に関して説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-app-crash-debugging.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブル&amp;amp;ララベル</title><link href="https://dev-yakuza.github.io/environment/ansible-laravel/" rel="alternate" type="text/html" title="アンシブル&amp;ララベル"/><published>2018-12-06T00:00:00+09:00</published><updated>2018-12-11T13:51:14+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible-laravel-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-laravel/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログでアンシブル(Ansible)を使ってLaradockをインストールしました。今回はララベル(Laravel)を開発するためララベル(Laravel)をインストールしてララベル(Laravel)プロジェクトを生成してみます。&lt;/p&gt; &lt;p&gt;このブログは下記のブログのシリーズです。理解のため下記のブログを先見ることをお勧めします。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-playbook/&quot; target=&quot;_blank&quot;&gt;アンシブルプレイブック&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-docker/&quot; target=&quot;_blank&quot;&gt;アンシブル&amp;amp;ドッカー&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-laradock/&quot; target=&quot;_blank&quot;&gt;アンシブル&amp;amp;Laradock&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;phpとcomposer設定&quot;&gt;phpとcomposer設定&lt;/h2&gt; &lt;p&gt;自分のローカルマシン(host system)にphpとcomposerがインストールされたらこの段階はスキップしてもいいです。ララベル(Laravel)プロジェクトを生成するためphpとcomposerを仮想マシン(guest system)にインストールする予定です。&lt;/p&gt; &lt;p&gt;今まで作ったフォルダにphpとcomposerをインストールするアンシブルプレイブック(Ansible Playbook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- docker | | |-- tasks | | | |-- main.yml | |-- laradock | | |-- tasks | | | |-- main.yml | |-- php | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)ファイルにも新しく追加したphpの&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;laradock&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加したアンシブルプレイブック(Ansible Playbook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;ファイルである&lt;code class=&quot;highlighter-rouge&quot;&gt;php/tasks/main.yml&lt;/code&gt;ファイルを下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add php7.2 repo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt_repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ppa:ondrej/php'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install php&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2-mbstring&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2-xml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/usr/local/bin/composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;composer_bin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;download composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://getcomposer.org/installer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/installer&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cat /tmp/installer | php -- --install-dir=/usr/local/bin&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rename composer.phar to composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mv /usr/local/bin/composer.phar /usr/local/bin/composer&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make composer executable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/local/bin/composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a+x&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;not composer_bin.stat.exists&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stop apache2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update-rc.d apache2 disable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加した&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;を一つずつみてみます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add php7.2 repo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt_repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ppa:ondrej/php'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;php 7.2をインストールするため&lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;へphp7.2のリポジトリ(repository)を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install php&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2-mbstring&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php7.2-xml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;php7.2とララベル(Laravel)インストールや実行に必要なphpモジュールをインストールします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/usr/local/bin/composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;composer_bin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;composerのインストールする前composerの実行ファイルが存在するかチェックしてその結果を&lt;code class=&quot;highlighter-rouge&quot;&gt;composer_bin&lt;/code&gt;に保存します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;not composer_bin.stat.exists&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;色んな&lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;をブロック(block)で囲みます。また、このブロックは私たちが上記で保存した&lt;code class=&quot;highlighter-rouge&quot;&gt;composer_bin&lt;/code&gt;が存在しない場合のみで実行します。&lt;/p&gt; &lt;p&gt;ブロック(block)中を一つずつみてみます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;download composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://getcomposer.org/installer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/installer&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;composerインストールスクリプトを&lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/instller&lt;/code&gt;ファイルにダウンロードします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install composer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cat /tmp/installer | php -- --install-dir=/usr/local/bin&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;composerインストールスクリプトを使って&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;にcomposerをインストールします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rename composer.phar to composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mv /usr/local/bin/composer.phar /usr/local/bin/composer&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;インストールされたcomposerファイルを(&lt;code class=&quot;highlighter-rouge&quot;&gt;composer.phar&lt;/code&gt;)の名前を&lt;code class=&quot;highlighter-rouge&quot;&gt;composer&lt;/code&gt;に変更します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make composer executable&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/local/bin/composer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a+x&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;composerが実行ができるように権限を変更します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stop apache2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update-rc.d apache2 disable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;phpをインストールした後、仮想マシン(guest system)を再起動すると&lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt;サーバが起動されて同じポート(port)を使ってるドッカー(Docker)が起動されない問題があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt;サーバが仮想マシン(guest syste)が再起動する時再起動されないように設定します。&lt;/p&gt; &lt;h2 id=&quot;phpとcomposerインストール&quot;&gt;phpとcomposerインストール&lt;/h2&gt; &lt;p&gt;上記で作ったアンシブルプレイブック(Ansible Playbook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を実行してphpとcomposerをインストールします。私たちはこの&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;だけ実行できるようにタグ(tag)を指定したのでタグ(tag)オプションを追加したアンシブルプレイブック(Ansible Playbook)コマンドを下記のように実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#vagrant ssh&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'php'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下にあるコマンドでインストールがうまくできたか確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#vagrant ssh&lt;/span&gt; php &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; composer &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ララベルプロジェクト生成&quot;&gt;ララベルプロジェクト生成&lt;/h2&gt; &lt;p&gt;下記のコマンドでララベル(Laravel)プロジェクトを生成します。既存のララベル(Laravel)プロジェクトを持ってる方はこの部分はスキップしてもいいです。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#vagrant ssh&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /vagrant composer create-project laravel/laravel app &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ララベルプロジェクト設定&quot;&gt;ララベルプロジェクト設定&lt;/h2&gt; &lt;p&gt;私たちは以前のブログ(&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-laradock/&quot; target=&quot;_blank&quot;&gt;アンシブル&amp;amp;Laradock&lt;/a&gt;)でLaradockのインストール&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を下記のように作成しました。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change project folder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/lib/laradock/.env&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=*.*'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=/vagrant/app'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;この部分でLaradockのworkspaceドッカー(Docker)が実行される時&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant/appp&lt;/code&gt;フォルダと同期化するように設定しました。したがって、私たちは新しプロジェクトを&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;フォルダに&lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt;のフォルダ名で生成しました。皆さんが既存のララベル(Laravel)プロジェクトを持ってるだったら&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant/appp&lt;/code&gt;フォルダにコピーするか以前のブログで作ったLaradockの&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;中で上記の部分を皆さんのララベル(Laravel)プロジェクトフォルダで指定して使ってください。&lt;/p&gt; &lt;h2 id=&quot;ララベルプロジェクト確認&quot;&gt;ララベルプロジェクト確認&lt;/h2&gt; &lt;p&gt;また、localhostに接続したら下記のようにララベル(Laravel)の基本画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/laravel.png&quot; alt=&quot;laravel first page&quot; /&gt;&lt;/p&gt; &lt;p&gt;ララベル(Laravel)設定がよく出来てない時は下記のように500エラー画面が出ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/laravel_error.png&quot; alt=&quot;laravel 500 error page&quot; /&gt;&lt;/p&gt; &lt;p&gt;ララベル(Laravel)設定中で下記の部分を全て実行したか確認します。&lt;code class=&quot;highlighter-rouge&quot;&gt;composer create-project laravel/laravel app&lt;/code&gt;コマンドでララベル(Laravel)プロジェクトを新しく生成し場合、下記の設定は自動で実行されます。&lt;/p&gt; &lt;p&gt;ララベル(Laravel)プロジェクトに必要なライブラリはインストルしたか？&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer install &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ララベル(Laravel)の環境ファイルは生成したか？&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp .env.example .env &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ララベル(Laravel)のキーは生成したか？&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan key:generate &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;phpmyadmin&quot;&gt;phpmyadmin&lt;/h2&gt; &lt;p&gt;データベースを触るためインストールした&lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt;に接続してみます。&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;で接続したら&lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt;の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/phpmyadmin_login.png&quot; alt=&quot;phpmyadmin login&quot; /&gt;&lt;/p&gt; &lt;p&gt;何も設定してなかったら下の情報を入力して接続します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server: mysql username: root password: root &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このように接続した後下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/phpmyadmin_change_password.png&quot; alt=&quot;phpmyadmin change password&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面の真ん中にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Change password&lt;/code&gt;を押してパスワードを変更します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/phpmyadmin_new_password.png&quot; alt=&quot;phpmyadmin new password&quot; /&gt;&lt;/p&gt; &lt;p&gt;上部にあるメニュー中で&lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt;を押してララベル(Laravel)と連結するデータベースを生成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/ansible-laravel/phpmyadmin_new_database.png&quot; alt=&quot;phpmyadmin new database&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;ララベルdb設定&quot;&gt;ララベルDB設定&lt;/h2&gt; &lt;p&gt;上記で&lt;code class=&quot;highlighter-rouge&quot;&gt;phpmyadmin&lt;/code&gt;を使って作ったデータベース(Database)をララベル(Laravel)プロジェクトに連結する必要があります。ララベル(Laravel)プロジェクトの環境ファイルである&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;を開いたら下のように内容を確認することができます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nv&quot;&gt;DB_CONNECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql &lt;span class=&quot;nv&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;127.0.0.1 &lt;span class=&quot;nv&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3306 &lt;span class=&quot;nv&quot;&gt;DB_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;homestead &lt;span class=&quot;nv&quot;&gt;DB_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;homestead &lt;span class=&quot;nv&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;secret ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;この部分を下記のように修正します。&lt;code class=&quot;highlighter-rouge&quot;&gt;DB_DATABASE&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;DB_PASSWORD&lt;/code&gt;の部分は皆さんが設定した内容を入力します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &lt;span class=&quot;nv&quot;&gt;DB_CONNECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql &lt;span class=&quot;nv&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql &lt;span class=&quot;nv&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3306 &lt;span class=&quot;nv&quot;&gt;DB_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;app &lt;span class=&quot;nv&quot;&gt;DB_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*******&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このように修正したら下記のララベル(Laravel)コマンドでララベル(Laravel)が基本的提供してるユーザーテーブル(User Table)を生成してみます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vagrant ssh&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# sudo docker exec -it laradock_workspace_1 bash&lt;/span&gt; php artisan migrate &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ララベル(Laravel)が基本的提供してるユーザーテーブル(User Table)を使わない予定ならララベル(Laravel)コマンドを使って生成したテーブルを削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan migrate:rollback &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;vagrant、アンシブル(Ansible)、Laradockを使ってララベル(Laravel)開発環境を構築してみました。また、この開発環境構築を通じてアンシブル(Ansible)とドッカー(Docker)を少しみてみました。アンシブル(Ansible)とドッカー(Docker)を上手く使えばよく聞こえる&lt;code class=&quot;highlighter-rouge&quot;&gt;Devops&lt;/code&gt;ができる開発者になれるんじゃないかなと思います。&lt;/p&gt; &lt;p&gt;今後はこの&lt;a href=&quot;https://dev-yakuza.github.io/environment/&quot; target=&quot;_blank&quot;&gt;開発環境&lt;/a&gt;カテゴリには開発構築、ドッカー(Docker)、アンシブル(Ansible)と関係ある内容を追加する予定です。また、ララベル(Laravel)開発と関係あるブログは&lt;a href=&quot;https://dev-yakuza.github.io/laravel/&quot; target=&quot;_blank&quot;&gt;ララベル&lt;/a&gt;カテゴリに作成する予定なのでご参考してください。&lt;/p&gt; &lt;p&gt;今まで作ったララベル(Laravel)開発環境を下記のレポジトリ(Repository)で確認できます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/dev-yakuza/laravel-devtool&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/dev-yakuza/laravel-devtool&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://laradock.io/documentation/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://laradock.io/documentation/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログでアンシブル(Ansible)を使ってLaradockをインストールしました。今回はララベル(Laravel)を開発するためララベル(Laravel)をインストールしてララベル(Laravel)プロジェクトを生成してみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-laravel.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブル&amp;amp;Laradock</title><link href="https://dev-yakuza.github.io/environment/ansible-laradock/" rel="alternate" type="text/html" title="アンシブル&amp;Laradock"/><published>2018-12-05T00:00:00+09:00</published><updated>2018-12-10T17:38:20+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible-laradock-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-laradock/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;最近世の中は本当にないものがないです。私たちが考えてることはすでに世の中どこか存在して共有されています。Laradockはララベル(Laravel)の開発環境へ必要な物をドッカー(Docker)で作って管理するプロジェクトです。もっと詳しく内容は公式サイトを参考してください。(&lt;a href=&quot;https://github.com/laradock/laradock/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/laradock/laradock/&lt;/a&gt;). このブログではLaradockを使ってララベル(Laravel)開発環境を作る方法について説明します。&lt;/p&gt; &lt;p&gt;このブログは下記のブログのシリーズです。理解のため下記のブログを先見ることをお勧めします。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-playbook/&quot; target=&quot;_blank&quot;&gt;アンシブルプレイブック&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-docker/&quot; target=&quot;_blank&quot;&gt;アンシブル&amp;amp;ドッカー&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;開発環境構成&quot;&gt;開発環境構成&lt;/h2&gt; &lt;p&gt;Laradockは開発環境を構成のため色んなドッカー(Docker)を提供してます。したがって、自分が開発したい環境に合わせてドッカー(Docker)を選択してインストールする必要があります。私たちは下記の項目で開発環境を構成する要諦です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;nginx&lt;/li&gt; &lt;li&gt;mysql&lt;/li&gt; &lt;li&gt;phpmyadmin&lt;/li&gt; &lt;li&gt;workspace&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;仮想マシン設定修正&quot;&gt;仮想マシン設定修正&lt;/h2&gt; &lt;p&gt;仮想マシンの(guest system)の設定を修正するため下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;を修正します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:virtualbox&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;laravel-dev&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;guest: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;guest: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;trigger Docker after Vagrant Up&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run_remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo ansible-playbook /vagrant/ansible/playbook.yml --tags 'docker'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;仮想マシン(guest system)がvirtualboxで表示される名前を&lt;code class=&quot;highlighter-rouge&quot;&gt;vb.name&lt;/code&gt;を使って特定な名前(&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel-dev&lt;/code&gt;)を設定しました。この部分は実際開発環境構成とは関係ありません。ただ、virtualboxに表示される名前を分かりやすくするためです。&lt;/p&gt; &lt;p&gt;vagrantの&lt;code class=&quot;highlighter-rouge&quot;&gt;config.vm.network &quot;forwarded_port&quot;&lt;/code&gt;を使ってローカルマシン(host system)のポートを仮想マシン(guest system)のポートに連結(port-forward)させました。今からローカルマシン(host system)のポートを使って仮想マシン(guest system)のポートに接続ができます。80ポートはララベル(Laravel)プロジェクトのため、8080はphpmyadminへ接続するため連結しました。&lt;/p&gt; &lt;p&gt;仮想マシン(guest system)をvagrantコマンド(&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant halt&lt;/code&gt;)で中止させてまたvagrantコマンド(&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;)で仮想マシン(guest system)を再起動したら、以前アンシブルプレイブック(Ansible Playbook)実行スクリプトはプロビジョンシェル(provision shell)中にあるので実行れないです。さらに、Laradockのドッカー(Docker)はいつも再起動(restart always)が設定されてないので仮想マシンが(guest system)が再起動する時ドッカー(Docker)が起動されないです。だから、私たちはVagrantfileに下のように追加しました。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;trigger Docker after Vagrant Up&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run_remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo ansible-playbook /vagrant/ansible/playbook.yml --tags 'docker'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;この設定は私たちが&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;コマンドで仮想マシン(guest system)を実行した後、実行される内容を定義します。この仮想マシン(guest system)にアンシブルプレイブック(Ansible Playbook)を実行するように設定します。アンシブルプレイブック(Ansible Playbook)コマンドがプロビジョンシェル(provision shell)にあるコマンドと違って&lt;code class=&quot;highlighter-rouge&quot;&gt;--tags 'docker'&lt;/code&gt;が入っています。このオプションを使ったら&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;とタグ(tag)されたコマンドだけ実行することができます。もっと詳しく内容は下のアンシブルプレイブック(Ansible Playbook)設定でもう一度説明します。&lt;/p&gt; &lt;h2 id=&quot;アンシブルプレイブックへlaradock設定&quot;&gt;アンシブルプレイブックへLaradock設定&lt;/h2&gt; &lt;p&gt;以前のブログに続いてアンシブルプレイブック(Ansible Playbook)を使って開発環境構成を進めます。今まで構成したフォルダ構造は下記のようです。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- docker | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ここにLaradockのための&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を定義するため下のように&lt;code class=&quot;highlighter-rouge&quot;&gt;laradock/tasks/main.yml&lt;/code&gt;ファイルを追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- docker | | |-- tasks | | | |-- main.yml | |-- laradock | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)のスタートポイントである&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルにLaradockの&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;laradock&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加した&lt;code class=&quot;highlighter-rouge&quot;&gt;laradock/tasks/main.yml&lt;/code&gt;ファイルを下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git clone Laradock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo=https://github.com/Laradock/laradock.git dest=/vagrant/app/laradock/ version=master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;copy Laradock environment file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant/app/laradock/env-example dest=/vagrant/app/laradock/.env&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change mysql version&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/app/laradock/.env&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MYSQL_VERSION=*.*'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MYSQL_VERSION=5.7'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change project folder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/lib/laradock/.env&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=*.*'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=/vagrant/app'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dokcer compose Laradock(nginx, mysql, phpmyadmin, workspace)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;docker_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/app/laradock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;phpmyadmin&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加したアンシブルプレイブック(Ansible Playook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;をみてみましょう。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git clone Laradock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo=https://github.com/Laradock/laradock.git dest=/vagrant/app/laradock/ version=master&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)のgitモジュールを使ってLaradockのリポジトリ(repository)をコピー(clone)します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;copy Laradock environment file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant/app/laradock/env-example dest=/vagrant/app/laradock/.env&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Laradockの設定ファイルの例(&lt;code class=&quot;highlighter-rouge&quot;&gt;env-example&lt;/code&gt;)を使える設定ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;)にコピーします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change mysql version&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/app/laradock/.env&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MYSQL_VERSION=*.*'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MYSQL_VERSION=5.7'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Laradockの環境ファイルである&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;バージョンを&lt;code class=&quot;highlighter-rouge&quot;&gt;5.7&lt;/code&gt;で変更します。最新のバージョン(&lt;code class=&quot;highlighter-rouge&quot;&gt;8.0&lt;/code&gt;)は使った場合ララベル(Laravel)からmysqlへ接続すると下記のようなエラーが発生します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PDOException] SQLSTATE[HY000] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2054] The server requested authentication method unknown to the client &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;最新のmysqlの暗号認証方式がララベル(Laravel)から提供しなくて問題が発生してるみたいです。色んな解決方法がありますがmysql 8.0の機能をあまり使ってない場合、5.7でダウングレード(Downgrade)して使うことをお勧めします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;change project folder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/lib/laradock/.env&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=*.*'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;APP_CODE_PATH_HOST=/vagrant/app'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replace&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Laradockのworkspaceドッカー(Docker)は私たちが作るララベル(Laravel)プロジェクトが入る環境です。このドッカー(Docker)は&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_CODE_PATH_HOST&lt;/code&gt;を参考してドッカー(Docker)をビルドや起動する時、ここに設定されたフォルダを同期化(synce)してララベル(Laravel)プロジェクトを起動します。基本設定は&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_CODE_PATH_HOST=../&lt;/code&gt;なのでLaradockの上位フォルダを指定しています。この部分を私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant/app&lt;/code&gt;で変更して使ってます。皆さんは皆さんのララベル(Laravel)プロジェクトのフォルダの位置で変更するか皆さんのララベル(Laravel)プロジェクトのフォルダ名をappで変更して使ったらいいと思います&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dokcer compose Laradock(nginx, mysql, phpmyadmin, workspace)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;docker_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;restarted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;project_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/vagrant/app/laradock&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;phpmyadmin&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)のドッカーサービス(Docker Service)モジュールを使って私たちが必要なドッカー(Docker)をビルドして実行します。また、別のコマンドと違って&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;機能を使っています。アンシブルプレイブック(Ansible Playbook)を実行する時&lt;code class=&quot;highlighter-rouge&quot;&gt;--tags&lt;/code&gt;オプションを使ってタグ(tag)されたコマンド中で実行したいコマンドだけ実行することが可能です。&lt;code class=&quot;highlighter-rouge&quot;&gt;--tags&lt;/code&gt;オプションが設定されてないアンシブルプレイブック(Ansible Playboo)を実行すると全てのコマンドが実行されます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 全てのコマンド実行&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;span class=&quot;c&quot;&gt;# dockerでタグ(tag)されたコマンドだけ実行&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;アンシブルプレイブック実行&quot;&gt;アンシブルプレイブック実行&lt;/h2&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)でLaradockの&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;設定は終わりました。アンシブルプレイブック(Ansible Playbook)を実行してLaradockをインストールしてみましょう。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vagrant ssh&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;laradockインストール確認&quot;&gt;Laradockインストール確認&lt;/h2&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)でLaradockが上手くインストールされたか下記のドッカー(Docker)コマンドで確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# vagrant ssh&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker ps &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また、ローカルマシン(host system)で&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost&lt;/code&gt;を実行して&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Foud&lt;/code&gt;エラー画面が表示されます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アンシブル(Ansible)を使ってLaradockをインストールしてララベル(Laravel)開発環境を準備しました。今はララベル(Laravel)プロジェクトが設定されてないので&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt;エラーが見えますが、開発環境は上手くインストールされました。次はLaradock開発環境にララベル(Laravel)プロジェクトを設定してみます。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://laradock.io/documentation/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://laradock.io/documentation/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 最近世の中は本当にないものがないです。私たちが考えてることはすでに世の中どこか存在して共有されています。Laradockはララベル(Laravel)の開発環境へ必要な物をドッカー(Docker)で作って管理するプロジェクトです。もっと詳しく内容は公式サイトを参考してください。(https://github.com/laradock/laradock/). このブログではLaradockを使ってララベル(Laravel)開発環境を作る方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-laradock.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブル&amp;amp;ドッカー</title><link href="https://dev-yakuza.github.io/environment/ansible-docker/" rel="alternate" type="text/html" title="アンシブル&amp;ドッカー"/><published>2018-12-04T00:00:00+09:00</published><updated>2018-12-05T16:39:12+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible_docker-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-docker/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;サーバー開発にドッカー(Docker)は必須になりました。ここでドッカー(Docker)について全ての説明は難しいと思います。ブログを作成しながらちょっとちょっと説明することでドッカー(Docker)を説明します。このブログではアンシブルプレイブック(Ansible Playbook)を使ってvagrantにドッカー(Docker)とドッカーコンポーズ(Docker Compose)をインストールする方法を紹介します。&lt;/p&gt; &lt;p&gt;このブログは下の3つのブログを全て進めたと思って説明します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-playbook/&quot; target=&quot;_blank&quot;&gt;アンシブルプレイブック&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンシブルプレイブックにドッカー設定&quot;&gt;アンシブルプレイブックにドッカー設定&lt;/h2&gt; &lt;p&gt;今まで作ったvagrant仮想マシン(guest system)のためのディレクトリ(directory)構造は下記の通りです。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ここに私たちはドッカー(Docker)インストールに関する&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を定義してアンシブルプレイブック(Ansible Playbook)に追加する予定です。下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダ下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;docker/tasks/main.yml&lt;/code&gt;ファイルを追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- docker | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)のスタートポイントである&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルを下のように追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加した&lt;code class=&quot;highlighter-rouge&quot;&gt;docker/tasks/main.yml&lt;/code&gt;ファイルを下のように修正します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://get.docker.com | sh&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Modify privilege&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;usermod -aG docker $USER&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dest=/usr/bin/docker mode=+x&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python docker / docker-compse module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-compose&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今からアンシブル(Ansible)コマンドを1つずつ見ます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://get.docker.com | sh&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカー(Docker)インストールスクリプトを使ってドッカー(Docker)をインストールします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Modify privilege&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;usermod -aG docker $USER&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x /usr/bin/docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカー(Docker)のユーザーや権限を変更します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python docker / docker-compse module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-compose&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;パイソン(python)のpipを使ってパイソンドッカーモジュール(python docker module)とドッカーコンポーズ(Docker Compose)をインストールします。&lt;/p&gt; &lt;h2 id=&quot;アンシブル実行&quot;&gt;アンシブル実行&lt;/h2&gt; &lt;p&gt;上でアンシブルプレイブック(Ansible Playbook)へ追加したドッカー(Docker)インストール&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を実行するため下のアンシブル(Ansible)コマンドを仮想マシン(guest system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;すでに環境がある状態で進めるのでアンシブルプレイブック(Ansible Playbook)を実行しました。新しく開発環境を作るときはvagrantのプロビジョンシェル(provision shell)へアンシブルプレイブック(Ansible Playbook)実行スクリプトを追加したので自動に実行されます。&lt;/p&gt; &lt;p&gt;確認するため下記のvagrantコマンドをローカルマシン(host system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ドッカーインストール確認&quot;&gt;ドッカーインストール確認&lt;/h2&gt; &lt;p&gt;ドッカー(Docker)がアンシブルプレイブック(Ansible Playbook)で仮想マシン(guest system)に上手くインストールされたかを確認するため下記のドッカー(Docker)コマンドで確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh docker &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)でドッカー(Docker)とドッカーコンポーズ(Docker Compose)を追加して仮想マシン(guest system)へインストールする方法を見ました。今からはドッカー(Docker)を使って好きな開発環境を作ることができます。次のブログではドッカー(Docker)とドッカーコンポーズ(Docker Compose)を使ってララベル(Laravel)開発環境を作る方法について説明します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 サーバー開発にドッカー(Docker)は必須になりました。ここでドッカー(Docker)について全ての説明は難しいと思います。ブログを作成しながらちょっとちょっと説明することでドッカー(Docker)を説明します。このブログではアンシブルプレイブック(Ansible Playbook)を使ってvagrantにドッカー(Docker)とドッカーコンポーズ(Docker Compose)をインストールする方法を紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-docker.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブルプレイブック</title><link href="https://dev-yakuza.github.io/environment/ansible-playbook/" rel="alternate" type="text/html" title="アンシブルプレイブック"/><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-05T16:39:12+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible_playbook-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-playbook/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログでインストールしたアンシブル(Ansible)のプレイブック(Playbook)を使ってサーバーを構築します。基本的にサーバー構築へ必要なプログラムインストールや設定をするためアンシブルプレイブック(Ansible Playbook)を使う予定です。このブログでは基本的vagrantを使って仮想マシン(guest system)を作ってその中にアンシブル(Ansible)をインストールして進めます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrantをインストールする方法については以前のブログの&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;を確認してください。&lt;/li&gt; &lt;li&gt;vagrantにアンシブル(Ansible)をインストールする方法については&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;を見てください。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;このブログは上の2つのブログの内容を実行したと仮定して説明します。&lt;/p&gt; &lt;h2 id=&quot;アンシブルプレイブック生成&quot;&gt;アンシブルプレイブック生成&lt;/h2&gt; &lt;p&gt;現在&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが存在するフォルダへ```ansible``の名前でフォルダを作ります。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダに&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルを生成します。アンシブル(Ansible)の全ての内容は&lt;code class=&quot;highlighter-rouge&quot;&gt;ヤムル(yml)&lt;/code&gt;ファイル形式と文法で作ります。だから、&lt;code class=&quot;highlighter-rouge&quot;&gt;ヤムル(yml)&lt;/code&gt;で使える全てのことが使えます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- playbook.yml |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルはアンシブル(Ansible)のスタート点です。&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;を下のように作成します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;以前のブログでも紹介したがアンシブル(Ansible)はインフラに関する全般的な自動化ツールです。したがって、ローカルサーバー(local server)以外でもリモートサーバー(remote server)のインフラも管理することが出来ます。&lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt;はアンシブル(Ansible)を使ってインフラを構築する対象、つまりローカル(local server)やリモートサーバー(remote server)を指定することができます。私たちは現在開発サーバーを構築してるので&lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;を設定します。&lt;/p&gt; &lt;p&gt;アンシブル(Ansible)は１つのプレイブック(playbook)ファイルで全てのインフラ構築内容を定義することもできますが&lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt;を使って複数のファイルで管理することも可能です。&lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt;下に分離して管理したいフォルダリストを設定します。このブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;フォルダを1つ生成する予定ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;- init&lt;/code&gt;を追加しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダ下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;init/tasks/main.yml&lt;/code&gt;ファイルを生成した下記の内容を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Make app directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/var/www state=directory mode=0755&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Symbolic link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant dest=/var/www/vhosts state=link&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set timezone to Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update and upgrade apt packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache_valid_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add python3.6 repo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt_repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ppa:jonathonf/python-3.6'&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install basic packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unzip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python3.6&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python-pip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python3-pip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fabric&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)のコマンドを一つ一つ見てみます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Make app directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/var/www state=directory mode=0755&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これがアンシブル(Ansible)の1つのコマンドです。&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;は現在のコマンドを区分するためものでこのコマンドはアンシブル(Ansible)の&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;コマンドを使ってフォルダを生成する部分です。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Symbolic link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant dest=/var/www/vhosts state=link&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;フォルダを管理をするため&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;フォルダと&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/vhosts&lt;/code&gt;フォルダを連携します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set timezone to Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Tokyo&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ローカルサーバーのタイムゾーン(timezone)を設定します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update and upgrade apt packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache_valid_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packages&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Linuxのパッケージ管理ツールの&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;をアップデートします。&lt;code class=&quot;highlighter-rouge&quot;&gt;become: true&lt;/code&gt;で管理者権限(root)でこのアンシブル(Ansible)コマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add python3.6 repo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt_repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ppa:jonathonf/python-3.6'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)のモジュール中でパイソン(python)に依存するモジュールがあってパイソン(python)をインストールする必要があります。パイソン(python)をインストールするためパイソンのレポジトリ(repository)を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install basic packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unzip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python3.6&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python-pip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python3-pip&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fabric&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;あとで必要な基本プログラム(git, unzip)とパイソン(python)と関係あるプログラムをインストールします。&lt;/p&gt; &lt;h2 id=&quot;vagrantfile修正&quot;&gt;Vagrantfile修正&lt;/h2&gt; &lt;p&gt;既存の&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;に下記の内容を追加します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; ... sudo ansible-playbook /vagrant/ansible/playbook.yml &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SHELL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;以前のブログで使ったプロビジョンシェル(provision shell)に&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook /vagrant/ansible/playbook.yml&lt;/code&gt;を追加しました。今から&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant provision&lt;/code&gt;コマンドを実行すると私たちが作ったアンシブルプレイブック(Ansible Playbook)が自動に実行されます。&lt;/p&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;config.vm.synced_folder &quot;.&quot;, &quot;/vagrant&quot;&lt;/code&gt;コマンドを使ってローカルマシン(host system)のフォルダを仮想マシン(guest system)の&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;へアップロードして同期化(sync)します。今からはローカルマシン(host system)でファイルを修正したら仮想マシン(guest system)へ自動に反映されます。&lt;/p&gt; &lt;h2 id=&quot;テスト&quot;&gt;テスト&lt;/h2&gt; &lt;p&gt;今まで作ったアンシブルプレイブック(Ansible Playbook)とVagrantfileを使って自動でサーバーを設定してみましょう。既存の仮想マシン(guest system)が起動中だったら下記のvagrantコマンドで仮想マシン(guest system)を削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のvagrantコマンドで仮想マシン(guest system)を生成します。このように生成したら以前と違って私たちが作成したアンシブルプレイブック(Ansible Playbook)が起動してることをコンソール(console)で確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成されたら下記のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドでVagrantfileとアンシブルプレイブック(Ansible Playbook)が上手く動作したかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /vagrant &lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; unzip &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;今回のブログではアンシブルプレイブック(Ansible Playbook)を使って仮想マシン(guest system)へ基本的必要なプログラムをインストールしてみました。これを通じてアンシブルプレイブック(Ansible Playbook)をどうやって使うかもみました。また&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを修正して仮想マシン(guest system)を生成する時アンシブルプレイブック(Ansible Playbook)を自動に実行されるように作ったりVagrantfileが実行されたフォルダと仮想マシン(Ansible Playbook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;フォルダと同期化する方法もみてみました。&lt;/p&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)をもっと上手く使う必要がありますが、私たちは単純に使ってるのでちょっと恥ずかしいですね。下にアンシブルのドキュメント(Ansible Document)サイトのリンクを紹介します。そのドキュメントをみってもっと美しくアンシブル(Ansible)を使ってみてください。&lt;/p&gt; &lt;p&gt;次のブログではdockerの開発環境を追加してみます。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;アンシブルドキュメント(Ansible Document): &lt;a href=&quot;https://docs.ansible.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://docs.ansible.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログでインストールしたアンシブル(Ansible)のプレイブック(Playbook)を使ってサーバーを構築します。基本的にサーバー構築へ必要なプログラムインストールや設定をするためアンシブルプレイブック(Ansible Playbook)を使う予定です。このブログでは基本的vagrantを使って仮想マシン(guest system)を作ってその中にアンシブル(Ansible)をインストールして進めます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-playbook.jpg"/></entry><entry xml:lang="ja"><title type="html">Firebase Analytics</title><link href="https://dev-yakuza.github.io/react-native/react-native-firebase-analytics/" rel="alternate" type="text/html" title="Firebase Analytics"/><published>2018-11-26T00:00:00+09:00</published><updated>2018-11-29T17:47:41+09:00</updated><id>https://dev-yakuza.github.io/react-native/firebase-analytics-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-firebase-analytics/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する方法を説明しました。以前のブログでも話ししましたが、ファイアベースアナリティクス(Firebase Analytics)は&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定するだけで自動に分析をしてくれます。しかし、私たちが実際ファイアベースアナリティクス(Firebase Analytics)で分析結果を見た結果、自動で分析されたものでは足りないところが多くて今回のブログを作成することにしました。&lt;/p&gt; &lt;p&gt;今回のブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を使ってファイアベースアナリティクス(Firebase Analytics)でもっと詳しく分析するための方法について説明します。&lt;/p&gt; &lt;h2 id=&quot;ライブラリ設定&quot;&gt;ライブラリ設定&lt;/h2&gt; &lt;p&gt;ここで説明する内容は&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリを使ってファイアベースアナリティクス(Firebase Analytics)です。したがって、基本的に&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;を参考してください。このブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリ設定については省略します。&lt;/p&gt; &lt;h2 id=&quot;デバッグビューdebugview&quot;&gt;デバッグビュー(DebugView)&lt;/h2&gt; &lt;p&gt;ファイアベースアナリティクス（Firebase Analytics）はアプリが記録するイベントを約1時間の間に収集した後、一括アップロードします。したがって、分析されたデータを見るためには約1時間の時間を待てる必要があります。しかし、開発する時、テストする時こんな時間を待てる時間がないです。だから、ファイアベースアナリティクス(Firebase Analytics)はデバッグが可能なデバッグビュー(DebugView)を提供してます。デバッグビュー(DebugView)を利用したら収集したデータのアップロード時間を最小化してほぼリアルタイムで分析をすることができます。&lt;/p&gt; &lt;p&gt;今後&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリの機能を使ってファイアベースアナリティクス(Firebase Analytics)で追加する分析機能たちをすぐに確認できるようにデバッグビュー（DebugView)を設定して進めます。&lt;/p&gt; &lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)でデバッグビュー(DebugView)機能を使うためにiOSで下記のような設定をします。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/[project].xcworkspace&lt;/code&gt;ファイルを開いてxcodeを実行します。&lt;/li&gt; &lt;li&gt;上部のメニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme...&lt;/code&gt;を選択します。 &lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme.png&quot; alt=&quot;xcode edit scheme&quot; /&gt;&lt;/li&gt; &lt;li&gt;アクティブされた&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit schema...&lt;/code&gt;ウィンドウの左メニュー中で&lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt;を選択して右の&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;タブを選択します。 &lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme-arguments.png&quot; alt=&quot;edit scheme arguments&quot; /&gt;&lt;/li&gt; &lt;li&gt;選択した&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;タブ中にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments Passed On Launch&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して下の内容を追加します。(マイナス(&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;)符号も一緒にコピペします。) &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;-FIRDebugEnabled&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme-FIRDebugEnabled.png&quot; alt=&quot;edit scheme arguments FIRDebugEnabled&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt; &lt;p&gt;アンドロイドはiOSよりもっとシンプルです。アンドロイドエミュレータ(Android Emulator)やデバイス(Device)を起動して下記のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell setprop debug.firebase.analytics.app &amp;lt;package_name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;を中止したいときは下のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell setprop debug.firebase.analytics.app .none. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;テスト&quot;&gt;テスト&lt;/h3&gt; &lt;p&gt;まずファイアベースコンソル(Firebase Console)のファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;メニューへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/firebase-analytics-debugview.png&quot; alt=&quot;firebase analytics debugview&quot; /&gt;&lt;/p&gt; &lt;p&gt;現在はiOS, Android両方起動してない状態ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;が待機状態であります。iOSやアンドロイドを起動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/debugview-analytics.png&quot; alt=&quot;firebase analytics debugview analytics&quot; /&gt;&lt;/p&gt; &lt;p&gt;しばらくして上のようなほぼリアルタイムで分析される画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;画面分析&quot;&gt;画面分析&lt;/h2&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)でユーザがどんな画面を見たかを記録してくれる&lt;code class=&quot;highlighter-rouge&quot;&gt;screen_view&lt;/code&gt;と呼ぶイベント(Event)があります。&lt;/p&gt; &lt;p&gt;ファイアベースコンソル(Firebase Console)で&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;メニューを選択したら下のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/analytics-events.png&quot; alt=&quot;google firebase console Analytics Events menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面に見える&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt;リストで&lt;code class=&quot;highlighter-rouge&quot;&gt;screen_view&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/analytics-events-screen_view.png&quot; alt=&quot;Firebase Analytics Events screen_view&quot; /&gt;&lt;/p&gt; &lt;p&gt;少しスクロールして下に行ったら&lt;code class=&quot;highlighter-rouge&quot;&gt;User engagement&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen classs&lt;/code&gt;の項目が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_view-class-to-name.png&quot; alt=&quot;Firebase Analytics Events screen_view screen class to screen name&quot; /&gt;&lt;/p&gt; &lt;p&gt;User engagementを&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen class&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen name&lt;/code&gt;で変更します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-no-data.png&quot; alt=&quot;Firebase Analytics Events screen name no data&quot; /&gt;&lt;/p&gt; &lt;p&gt;ここまで来たらなんか足りないことを感じると思います。&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen class&lt;/code&gt;では本当に基本になるclassだけ確認されて&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen name&lt;/code&gt;には何もデータがなくユーザがどんな画面を見たかが分析出来ないです。&lt;/p&gt; &lt;p&gt;それで私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;が提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;を使ってユーザが見た画面を分析することにしました。&lt;/p&gt; &lt;p&gt;私たちは分析したいアプリの画面へ下記のようなコードを追加しました。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCurrentScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-firebaseが提供する&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;でアプリの画面の名前を入力します。&lt;/p&gt; &lt;p&gt;そしてテストして分析されたら下記のように私たちが&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;で入力したアプリの画面の名前を確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-with-data.png&quot; alt=&quot;Firebase Analytics Events screen name with data&quot; /&gt;&lt;/p&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;でもリアルタイムで分析されることを確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-on-debugview.png&quot; alt=&quot;Firebase Analytics Events screen name on debug view&quot; /&gt;&lt;/p&gt; &lt;p&gt;DebugViewでそのイベント(screen_view)を選択したら上のような詳細画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;カスタムイベント分析&quot;&gt;カスタムイベント分析&lt;/h2&gt; &lt;p&gt;上に紹介しした&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;ではユーザが見た画面の分析はできますが、その画面でユーザが何のアクションをしたかはわかりません。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;logEvent&lt;/code&gt;を使ってファイアベースアナリティクス(Firebase Analytics)でカスタムイベント(Custom Event)を分析する方法を説明します。&lt;/p&gt; &lt;p&gt;私たちはファイアベースアナリティクス(Firebase Analytics)で分析したいカスタムイベント(Custom Event)を下のコードを使って追加しました。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onSpeech&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'onPressSoundButton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;logEventは最初パラメータは英語100文字と特殊文字アンダーバー(_)のみで使えます。(&lt;code class=&quot;highlighter-rouge&quot;&gt;up to 100 characters is the maximum character length supported for event parameters.&lt;/code&gt;)しかし、私たちのアプリは多言語を提供してますのでどの言語でどんなアクションをしたかを分析したくなりました。そして２つ目のパラメータを使ってカスタムイベント(Custom Event)でカスタムパラメータ(Custom Parameter)を追加しました。２つ目のパラメータはオブジェクト(Object)タイプですので自由にカスタムパラメータ(Custom Parameter)を作って分析に活用することができます&lt;/p&gt; &lt;p&gt;上のようにカスタムイベント(Custom Event)へカスタムパラメータ(Custom Parameter)を追加したらファイアベースコンソル(Firebase Console)でも追加する必要があります。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-event-custom-parameter.png&quot; alt=&quot;Firebase Analytics Events custom event&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt;メニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;へ移動してイベント(Event)リスト中で追加したカスタムイベント(Custom Event)へマウスを移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-menu.png&quot; alt=&quot;Firebase Analytics custom parameter menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;マウスを移動したらその項目の右へ&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;ボタンが表示されます。そのボタンを押して見えるメニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit parameter reporting&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-edit-parameter-reporting.png&quot; alt=&quot;Firebase Analytics custom parameter edit parameter reporting&quot; /&gt;&lt;/p&gt; &lt;p&gt;左にある検索バーへ分析したいカスタムイベント(Custom Event)のカスタムパラメータ(Custom Parameter)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;を押してカスタムパラメータ(Custom Parameter)を追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/add-custom-parameter.png&quot; alt=&quot;Firebase Analytics add custom parameter&quot; /&gt;&lt;/p&gt; &lt;p&gt;追加が完了されたらテストを進めます。データが溜まった後（約1日）、&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;メニューで追加したカスタムイベント(Custom Event)を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter.png&quot; alt=&quot;Firebase Analytics custom parameter&quot; /&gt;&lt;/p&gt; &lt;p&gt;少しスクロールして下に行くと私たちが追加したカスタムパラメータ(Custom Parameter)の分析結果を確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-result.png&quot; alt=&quot;Firebase Analytics custom parameter result&quot; /&gt;&lt;/p&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;でもリアルタイムで分析されることが確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom_event-on-debugview.png&quot; alt=&quot;Firebase Analytics Events custom event on debug view&quot; /&gt;&lt;/p&gt; &lt;p&gt;DebugViewでそのカスタムイベント(Custom Event)を選択したら上のように追加したカスタムパラメータ(Custom Parameter)が一緒に見える詳細画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;ファイアベースデバッグイベント: &lt;a href=&quot;https://firebase.google.com/docs/analytics/debugview&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com/docs/analytics/debugview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;react-native-firebase: &lt;a href=&quot;https://rnfirebase.io/docs/v5.x.x/analytics/reference/analytics&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://rnfirebase.io/docs/v5.x.x/analytics/reference/analytics&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログFirebase Admobでreact-native-firebaseを設定する方法を説明しました。以前のブログでも話ししましたが、ファイアベースアナリティクス(Firebase Analytics)はreact-native-firebaseを設定するだけで自動に分析をしてくれます。しかし、私たちが実際ファイアベースアナリティクス(Firebase Analytics)で分析結果を見た結果、自動で分析されたものでは足りないところが多くて今回のブログを作成することにしました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-firebase-analytics.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブルインストール</title><link href="https://dev-yakuza.github.io/environment/install-ansible/" rel="alternate" type="text/html" title="アンシブルインストール"/><published>2018-11-26T00:00:00+09:00</published><updated>2018-12-04T09:37:44+09:00</updated><id>https://dev-yakuza.github.io/environment/install_ansible-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/install-ansible/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;アンシブル(Ansible)を説明すると本一冊が必要です。私たちもそんな詳しく知らなく別の人に説明するレベルでもないので詳しくは説明できないですが私たちが使ってる方法を紹介することでアンシブル(Ansible)を紹介してみようかと思います。アンシブル(Ansible)を簡単に説明したらインフラに関する全般的な自動化ツールです。インストール(installation)やデプロイ(deploy)など様々なことを自動化することができます。このブログではvagrantへアンシブル(Ansible)をインストールする方法に関して説明します。&lt;/p&gt; &lt;p&gt;このブログポストはPCへvirtualbox, vagrantがインストールされた環境を対象にしてます。virtualbox, vagrantをインストールする方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;を確認してください。&lt;/p&gt; &lt;h2 id=&quot;仮想マシン設定生成&quot;&gt;仮想マシン設定生成&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドで仮想マシン(guest system)を設定します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrantコマンドを実行したフォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが生成されたことが確認できます。下は&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;でコメントアウト(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)を削除した内容です。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン生成や確認&quot;&gt;仮想マシン生成や確認&lt;/h2&gt; &lt;p&gt;下のvagrantコマンドで仮想マシン(guest system)を生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;仮想マシン(guest system)が生成されたら下のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;アンシブルインストール設定&quot;&gt;アンシブルインストール設定&lt;/h2&gt; &lt;p&gt;仮想マシン(guest system)中で下のコマンドで実行したらまだアンシブル(Ansible)がインストールされてないことが確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを開いて下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; sudo apt-get update sudo apt-get install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt-get install ansible --yes &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SHELL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;プロビジョンシェル(provision shell)は仮想マシン(guest system)へスクリプトをアップロードして実行できるようにします。vagrantのプロビジョンシェル(provision shell)へアンシブル(Ansible)のインストールスクリプトを追加します。&lt;/p&gt; &lt;h2 id=&quot;アンシブルインストール&quot;&gt;アンシブルインストール&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドをローカルマシン(host system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant provision &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そしてまた仮想マシン(guest system)に接続した後アンシブル(Ansible)がインストールされたことを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;問題なくアンシブル(Ansible)がインストールされたら下記のようにアンシブル(Ansible)のバージョンば確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible 2.7.2 config file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/ansible/ansible.cfg configured module search path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'/home/vagrant/.ansible/plugins/modules'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'/usr/share/ansible/plugins/modules'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ansible python module location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/lib/python2.7/dist-packages/ansible executable location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/bin/ansible python version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.7.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Dec 4 2017, 14:50:18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GCC 5.4.0 20160609] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今回はプロビジョンシェル(provision shell)でアンシブル(Ansible)を設定しなくて仮想マシン(guest system)を作った後プロビジョンシェル(provision shell)を入力してvagrantコマンド(&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant provision&lt;/code&gt;)でアンシブル(Ansible)をインストールしました。&lt;/p&gt; &lt;p&gt;しかし、別のPCや新しく環境を再構築しする時はさらにプロビジョンシェル(provision shell)が設定された&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを利用するので&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;コマンドを実行するだけでアンシブル(Ansible)がインストールされます。&lt;/p&gt; &lt;p&gt;確認するため下記のvagrantコマンドで仮想マシン(guest system)を削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また下のvagrantコマンドで仮想マシン(guest system)を生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成されたら下記のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)がインストールされたか確認するため下のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)が問題なくインストールされたら下記のような画面をまた見ることができます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible 2.7.2 config file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/ansible/ansible.cfg configured module search path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'/home/vagrant/.ansible/plugins/modules'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'/usr/share/ansible/plugins/modules'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ansible python module location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/lib/python2.7/dist-packages/ansible executable location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/bin/ansible python version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.7.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Dec 4 2017, 14:50:18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GCC 5.4.0 20160609] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;今回のブログではVagrantfileファイルを使ってvagrantへアンシブル(Ansible)をインストールする方法について見ました。アンシブル(Ansible)を上手く使ってる方はなぜこのようにしてるか疑問があると思います。普通はアンシブル(Ansible)をローカルマシン(host system)へインストールして仮想マシン(guest system)へインフラを構築するため使う方が多いと思います。しかし、まだウィンドウズ(Windows)はアンシブル(Ansible)を提供しないので私たちはこのような方法を選べました。次のブログではアンシブル(Ansible)を使って開発環境を構築する方法を紹介します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 アンシブル(Ansible)を説明すると本一冊が必要です。私たちもそんな詳しく知らなく別の人に説明するレベルでもないので詳しくは説明できないですが私たちが使ってる方法を紹介することでアンシブル(Ansible)を紹介してみようかと思います。アンシブル(Ansible)を簡単に説明したらインフラに関する全般的な自動化ツールです。インストール(installation)やデプロイ(deploy)など様々なことを自動化することができます。このブログではvagrantへアンシブル(Ansible)をインストールする方法に関して説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/install-ansible.jpg"/></entry><entry xml:lang="ja"><title type="html">vagrantインストールや使い方</title><link href="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/" rel="alternate" type="text/html" title="vagrantインストールや使い方"/><published>2018-11-25T00:00:00+09:00</published><updated>2018-11-26T18:26:00+09:00</updated><id>https://dev-yakuza.github.io/environment/vagrant_install_and_usage-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;virtualboxインストール&quot;&gt;virtualboxインストール&lt;/h2&gt; &lt;p&gt;vagrantは仮想マシンを簡単に作って管理してくれるツールです。つまり、仮想環境の上に仮想マシンをインストールして管理してくれるツールです。したがって、仮想マシンを実行する仮想環境はvagrantの管理外です。仮想環境を作ってくれる色んなツールがありますがここではvirtualboxを使って紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvirtualboxのダウンロードページへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;virtualbox: &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下記のような画面で自分のPCにダウンロードファイルをダウンロードしてインストールします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_download.png&quot; alt=&quot;virtualbox donwload page&quot; /&gt;&lt;/p&gt; &lt;p&gt;virtaulboxダウンロードやインストールするプロセスは一般的なソフトをインストールする方法と同じなのでここでは説明を省略します。&lt;/p&gt; &lt;p&gt;インストールを完了してvirtualboxを実行したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_installed.png&quot; alt=&quot;virtualbox installed&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;vagrantインストール&quot;&gt;vagrantインストール&lt;/h2&gt; &lt;p&gt;virtualboxインストールで今からは仮想環境を作ることが可能になりました。今度は仮想環境で実行される仮想マシンを簡単に作ってくれるvagrantのインストール方法を紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvagrantダウンロードサイトへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrant: &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上のリンクを押してvagrantダウンロードサイトへ移動したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/vagrant_site.png&quot; alt=&quot;vagrant download site&quot; /&gt;&lt;/p&gt; &lt;p&gt;自分のPCのOSに合うインストールファイルを選択してダウンロードします。今回もvagrantのダウンロードやインストール方法は一般的ソフトをダウンロドしてインストールする方法と同じなので説明を省略します。&lt;/p&gt; &lt;p&gt;インストールが終わったら下記のコマンドを実行してvagrantがインストールされたかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrantがインストールされたら下のようにvagratのバージョンの確認が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vagrant 2.2.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;box追加&quot;&gt;box追加&lt;/h2&gt; &lt;p&gt;vagrantが仮想マシンを作るために使うboxを追加します。boxは仮想マシンになるOSやOSへ含めてるソフトを集めたパッケージです。下記は基本になる公式boxとvagrantユーザーたちが作ったboxのサイトです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式boxサイト: &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;&lt;/li&gt; &lt;li&gt;ユーザーboxサイト: &lt;a href=&quot;http://www.vagrantbox.es/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドでboxを自分のPCへ追加します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式box追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos/7 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;ユーザーbox追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos66 https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.0.0/centos-6.6-x86_64.box &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは公式boxの&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;を使う予定です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;:&lt;a href=&quot;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;boxを自分のPCへ追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のvagrantコマンドで追加されたboxのリストを確認することが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;もしboxを間違って追加したら下記のvagrantコマンドで追加されたboxを消すことが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box remove bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン設定生成&quot;&gt;仮想マシン設定生成&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドでvagrantと追加したboxを使って仮想マシンを設定生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# mkdir create your project folder&lt;/span&gt; mkdir temp &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;コマンドを実行したフォルダ(temp)へ&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが生成されたことを確認出来ます。下記はコメントアウト(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)を消した&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;の内容です。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン生成&quot;&gt;仮想マシン生成&lt;/h2&gt; &lt;p&gt;上で作った&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;を下のvagrantコマンドでvagrantを使って仮想マシンを生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちがインストール下&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualbox&lt;/code&gt;を実行して見たら仮想マシンが生成されたことが確認出来ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox-with-machine.png&quot; alt=&quot;virtualbox with virtual machine&quot; /&gt;&lt;/p&gt; &lt;p&gt;下記のvagrantコマンドで仮想マシンへ接続が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドで仮想マシンからローカルPC環境に戻ることも可能です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン中止&quot;&gt;仮想マシン中止&lt;/h2&gt; &lt;p&gt;仮想マシンを中止したい時は、下記のvagrantコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant halt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン削除&quot;&gt;仮想マシン削除&lt;/h2&gt; &lt;p&gt;仮想マシンがもういらない時、下記のvagrantコマンドで仮想マシンを削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;これでvagrantを使って仮想マシンを生成する方法を見てみました。今後は&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを修正したら仮想マシン中へ開発環境を構築する方法を紹介する要諦です。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/vagrant-install-and-usage.jpg"/></entry></feed>