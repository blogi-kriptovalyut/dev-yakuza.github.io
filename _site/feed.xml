<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/" rel="alternate" type="text/html"/><updated>2018-11-26T17:43:18+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">vagrantインストールや使い方</title><link href="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/" rel="alternate" type="text/html" title="vagrantインストールや使い方"/><published>2018-11-25T00:00:00+09:00</published><updated>2018-11-26T17:35:46+09:00</updated><id>https://dev-yakuza.github.io/environment/vagrant_install_and_usage-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;virtualboxインストール&quot;&gt;virtualboxインストール&lt;/h2&gt; &lt;p&gt;vagrantは仮想マシンを簡単に作って管理してくれるツールです。つまり、仮想環境の上に仮想マシンをインストールして管理してくれるツールです。したがって、仮想マシンを実行する仮想環境はvagrantの管理外です。仮想環境を作ってくれる色んなツールがありますがここではvirtualboxを使って紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvirtualboxのダウンロードページへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;virtualbox: &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下記のような画面で自分のPCにダウンロードファイルをダウンロードしてインストールします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_download.png&quot; alt=&quot;virtualbox donwload page&quot; /&gt;&lt;/p&gt; &lt;p&gt;virtaulboxダウンロードやインストールするプロセスは一般的なソフトをインストールする方法と同じなのでここでは説明を省略します。&lt;/p&gt; &lt;p&gt;インストールを完了してvirtualboxを実行したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_installed.png&quot; alt=&quot;virtualbox installed&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;vagrantインストール&quot;&gt;vagrantインストール&lt;/h2&gt; &lt;p&gt;virtualboxインストールで今からは仮想環境を作ることが可能になりました。今度は仮想環境で実行される仮想マシンを簡単に作ってくれるvagrantのインストール方法を紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvagrantダウンロードサイトへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrant: &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上のリンクを押してvagrantダウンロードサイトへ移動したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/vagrant_site.png&quot; alt=&quot;vagrant download site&quot; /&gt;&lt;/p&gt; &lt;p&gt;自分のPCのOSに合うインストールファイルを選択してダウンロードします。今回もvagrantのダウンロードやインストール方法は一般的ソフトをダウンロドしてインストールする方法と同じなので説明を省略します。&lt;/p&gt; &lt;p&gt;インストールが終わったら下記のコマンドを実行してvagrantがインストールされたかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrantがインストールされたら下のようにvagratのバージョンの確認が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vagrant 2.2.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;box追加&quot;&gt;box追加&lt;/h2&gt; &lt;p&gt;vagrantが仮想マシンを作るために使うboxを追加します。boxは仮想マシンになるOSやOSへ含めてるソフトを集めたパッケージです。下記は基本になる公式boxとvagrantユーザーたちが作ったboxのサイトです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式boxサイト: &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;&lt;/li&gt; &lt;li&gt;ユーザーboxサイト: &lt;a href=&quot;http://www.vagrantbox.es/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドでboxを自分のPCへ追加します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式box追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos/7 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;ユーザーbox追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos66 https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.0.0/centos-6.6-x86_64.box &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは公式boxの&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;を使う予定です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;:&lt;a href=&quot;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;boxを自分のPCへ追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のvagrantコマンドで追加されたboxのリストを確認することが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;もしboxを間違って追加したら下記のvagrantコマンドで追加されたboxを消すことが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box remove bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン生成&quot;&gt;仮想マシン生成&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドでvagrantと追加したboxを使って仮想マシンを生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# mkdir create your project folder&lt;/span&gt; mkdir temp &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;コマンドを実行したフォルダ(temp)へ&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが生成されたことを確認出来ます。下記はコメントアウト(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)を消した&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;の内容です。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン実行&quot;&gt;仮想マシン実行&lt;/h2&gt; &lt;p&gt;上で作った&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;を下のvagrantコマンドでvagrantを使って仮想マシンを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちがインストール下&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualbox&lt;/code&gt;を実行して見たら仮想マシンが生成されたことが確認出来ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox-with-machine.png&quot; alt=&quot;virtualbox with virtual machine&quot; /&gt;&lt;/p&gt; &lt;p&gt;下記のvagrantコマンドで仮想マシンへ接続が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドで仮想マシンからローカルPC環境に戻ることも可能です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン中止&quot;&gt;仮想マシン中止&lt;/h2&gt; &lt;p&gt;仮想マシンを中止したい時は、下記のvagrantコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant halt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン削除&quot;&gt;仮想マシン削除&lt;/h2&gt; &lt;p&gt;仮想マシンがもういらない時、下記のvagrantコマンドで仮想マシンを削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;これでvagrantを使って仮想マシンを生成する方法を見てみました。今後は&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを修正したら仮想マシン中へ開発環境を構築する方法を紹介する要諦です。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/vagrant-install-and-usage.jpg"/></entry><entry xml:lang="ja"><title type="html">iOSシミュレータ変更</title><link href="https://dev-yakuza.github.io/react-native/ios-change-simulator/" rel="alternate" type="text/html" title="iOSシミュレータ変更"/><published>2018-11-23T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-change-simulator-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-change-simulator/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;RN(react native)でアプリを開発する時いつも下記のコマンドでiOSを開発します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;開発する時は特に問題ないですが開発が終わって様々なデバイス(device)でテストしたい時はいつも不便でした。だから、コマンドを使ってシミュレータ(simulator)を変更する方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;iosシミュレータ確認&quot;&gt;iOSシミュレータ確認&lt;/h2&gt; &lt;p&gt;現在使用可能なiOSシミュレータ(simulator)を確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl list devices &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;シミュレータ変更&quot;&gt;シミュレータ変更&lt;/h2&gt; &lt;p&gt;下のコマンドを使って使用したいシミュレータ(simulator)をRN(react native)を実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のコマンドリストはシミュレータ(simulator)を変更する例です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone SE&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone X&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XR&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS Max&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air 2&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Pro&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 RN(react native)でアプリを開発する時いつも下記のコマンドでiOSを開発します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-change-simulator.jpg"/></entry><entry xml:lang="ja"><title type="html">アンドロイドビルドやテスト</title><link href="https://dev-yakuza.github.io/react-native/android-running-on-device/" rel="alternate" type="text/html" title="アンドロイドビルドやテスト"/><published>2018-11-21T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-running-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-running-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今まで開発したRN(react native)をアンドロイド(Android)用でビルドしてデバイスへ上げてテストする方法を紹介します。ここにはMac(マック)でアンドロイド(Android)署名キー(Signing Key)を生成してビルドする要諦です。このブログはRN(react native)公式サイトを参考しましたので詳しく内容は公式サイトを参考してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/signed-apk-android&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/signed-apk-android&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンドロイド署名キー生成&quot;&gt;アンドロイド署名キー生成&lt;/h2&gt; &lt;p&gt;Macで&lt;code class=&quot;highlighter-rouge&quot;&gt;ターミナル&lt;/code&gt;プログラムを開いてRN(react native)プロジェクトフォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへ移動します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;your path]/android/app &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のコマンドでアンドロイド(Android)用署名キー(Signing Key)を発行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/span&gt; keytool &lt;span class=&quot;nt&quot;&gt;-genkey&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key-name].keystore &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyalg&lt;/span&gt; RSA &lt;span class=&quot;nt&quot;&gt;-keysize&lt;/span&gt; 2048 &lt;span class=&quot;nt&quot;&gt;-validity&lt;/span&gt; 10000 Enter keystore password: Re-enter new password: What is your first and last name? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organizational unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organization? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your City or Locality? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your State or Province? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the two-letter country code &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: Is &lt;span class=&quot;nv&quot;&gt;CN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;OU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt; correct? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;no]: Enter key password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &amp;lt;my-key-alias&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RETURN &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;same as keystore password&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;全てを入力したらRN(react native)プロジェクトフォルダ下ある&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;my-release-key.keystore&lt;/code&gt;ファイルが生成されたことが確認できます。&lt;/p&gt; &lt;h2 id=&quot;署名キー設定&quot;&gt;署名キー設定&lt;/h2&gt; &lt;p&gt;署名キー(Signing Key)が生成されたら&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;へキーを設定する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;android/gradle.properties&lt;/code&gt;ファイルを開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MYAPP_RELEASE_STORE_FILE=my-release-key.keystore MYAPP_RELEASE_KEY_ALIAS=my-key-alias MYAPP_RELEASE_STORE_PASSWORD=***** MYAPP_RELEASE_KEY_PASSWORD=***** &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコードを&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルへ追加します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... defaultConfig { ... } signingConfigs { release { if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) { storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD } } } buildTypes { release { ... signingConfig signingConfigs.release } } } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ビルド&quot;&gt;ビルド&lt;/h2&gt; &lt;p&gt;RN(react native)があるプロジェクトフォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt;フォルダへ移動した後、下のコマンドでビルドします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ビルドされたファイルは下記のパスが生成されます&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android/app/build/outputs/apk/release/app-release.apk &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちはこの部分で下記のようなエラーが発生しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... Execution failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;task &lt;span class=&quot;s1&quot;&gt;':app:lintVitalRelease'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Lint found fatal errors &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;assembling a release target. ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;いい方法ではないですが、私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルへ下の内容を追加したこの部分を解決しました。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... lintOptions { checkReleaseBuilds false // Or, if you prefer, you can continue to check for errors in release builds, // but continue the build even when errors are found: abortOnError false } ... } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ビルドされたファイルテスト&quot;&gt;ビルドされたファイルテスト&lt;/h2&gt; &lt;p&gt;アンドロイドデバイス(Android Device)でインストールされた既存のアプリを削除して下記のコマンドでビルドファイルのテストを進んでください。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;エラー対応&quot;&gt;エラー対応&lt;/h2&gt; &lt;p&gt;公式サイトの内容を見て上記のように進めましたが私たちは実際下のコマンドでビルドする時と&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドで直接デバイスでテストする時、&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のようなエラーが発生しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.RuntimeException: Unable to load script from assets &lt;span class=&quot;s1&quot;&gt;'index.android.bundle'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Make sure your bundle is packaged correctly or you&lt;span class=&quot;s1&quot;&gt;'re running a packager server. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;解決する方法で下のコマンドを先実行して&lt;code class=&quot;highlighter-rouge&quot;&gt;index.android.bundle&lt;/code&gt;を生成した後&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... react-native bundle &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; android &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--entry-file&lt;/span&gt; index.js &lt;span class=&quot;nt&quot;&gt;--bundle-output&lt;/span&gt; android/app/src/main/assets/index.android.bundle ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ビルドをしたり&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;直接デバイスでテストしたりしました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今まで開発したRN(react native)をアンドロイド(Android)用でビルドしてデバイスへ上げてテストする方法を紹介します。ここにはMac(マック)でアンドロイド(Android)署名キー(Signing Key)を生成してビルドする要諦です。このブログはRN(react native)公式サイトを参考しましたので詳しく内容は公式サイトを参考してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-running-on-device.jpg"/></entry><entry xml:lang="ja"><title type="html">アンドロイドデバイステスト</title><link href="https://dev-yakuza.github.io/react-native/android-test-on-device/" rel="alternate" type="text/html" title="アンドロイドデバイステスト"/><published>2018-11-20T00:00:00+09:00</published><updated>2018-11-22T22:41:56+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-test-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-test-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)開発する時やっぱりエミュレータで開発はきついですね。RN(react native)をアンドロイド用に開発する時エミュレータではなくアンドロイド(Android)デバイスでテストできるように設定してみます。RN(react native)をiOSデバイスでテストする方法が知りたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;を確認してください。&lt;/p&gt; &lt;h2 id=&quot;準備物&quot;&gt;準備物&lt;/h2&gt; &lt;p&gt;当然な話ですがRN(react native)プロジェクトをアンドロイド(Android)デバイスでテストするためには下記の準備物が必要です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アンドロイドスタジオ(Android Studio)&lt;/li&gt; &lt;li&gt;アンドロイド(Android)デバイス&lt;/li&gt; &lt;li&gt;RN(react native)プロジェクト&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;PCへRN(react native)開発環境を設定する方法が知りたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/installation/&quot; target=&quot;_blank&quot;&gt;RNインストル&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイステスト&quot;&gt;アンドロイドデバイステスト&lt;/h2&gt; &lt;p&gt;RN(react native)の公式サイトへRN(react native)をアンドロイド(Android)でテストする方法が詳しく載せています。それをみながらやってみましょう。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/running-on-device&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンドロイドデバイス設定&quot;&gt;アンドロイドデバイス設定&lt;/h2&gt; &lt;p&gt;使ってるアンドロイド(Android)デバイスの開発者オプションを有効化する必要があります。アンドロイド(Android)デバイスの&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;デバイス情報&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド番号&lt;/code&gt;を何回か押すと開発者オプションが有効化されます。&lt;/p&gt; &lt;p&gt;開発者オプションが有効化されたら、&lt;code class=&quot;highlighter-rouge&quot;&gt;USBデバッグ&lt;/code&gt;機能を有効化する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;開発オプション&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;USBデバッグ&lt;/code&gt;メニューを選択してUSBデバッグ機能を有効化させます。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイス接続&quot;&gt;アンドロイドデバイス接続&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスをUSBを使ってPCと接続します。アンドロイド(Android)デバイスでUSBでデバッグを許可するか聞かれたら許可してテストできる状態を作ります。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイスで実行&quot;&gt;アンドロイドデバイスで実行&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスが接続された状態でアンドロイドスタジオ(Android Studio)を実行して左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug app&lt;/code&gt;ボタン(虫の上に矢印があるボタン)を押したらエミュレータ以外にも自分のデバイスが見えます。自分のデバイスを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;ボタンを押したら開発したRN(react native)アプリが起動されることが確認できます。&lt;/p&gt; &lt;p&gt;注意：これはデバイスでテストするための実行です。したがって、エミュレータと同じようにPCへRN(react native)の開発サーバーが立ち上がってそのサーバーとデバイスが連動してテストが出来る仕組みです。したがって同じWifi/ネットワークの環境じゃないとデバイスがサーバーを見つかれないのでテストが出来ないです。&lt;/p&gt; &lt;h2 id=&quot;アンドロイド50バージョン以下&quot;&gt;アンドロイド5.0バージョン以下&lt;/h2&gt; &lt;p&gt;テストするデバイスがアンドロイド(Android)バージョン5.0以下の場合、別の設定をする必要があります。下記にある設定で私たちはアンドロイド4.4.2でRN(react native)プロジェクトを起動してテストしました。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルを下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaultConfig { ... ndk { // abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; } } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンドロイドスタジオ(Android Studio)を開いて&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;ボタンを押して同期化します。同期化が完了されたらRN(react native)プロジェクトを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;RN(react native)のサーバーがPCで実行されてデバイスにもアプリが上手くインストールされますが、赤画面のエラーが出ます。&lt;/p&gt; &lt;p&gt;デバイスを振って開発者メニュー(Developer Menu)を開きます。開発者メニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Dev Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug server host &amp;amp; port for device&lt;/code&gt;を選択します。IPアドレスとポート(Port)を入力する画面が出ます。そこに自分のIPと8081ポートを入力します。(ex&amp;gt; 10.0.1.1:8081)また開発者メニューへ戻って&lt;code class=&quot;highlighter-rouge&quot;&gt;Reload JS&lt;/code&gt;を押してプロジェクトを再起動します。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスでRN(react native)を起動する方法を紹介しました。今からは実際のデバイスでテストしてみてください。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 アンドロイド(Android)開発する時やっぱりエミュレータで開発はきついですね。RN(react native)をアンドロイド用に開発する時エミュレータではなくアンドロイド(Android)デバイスでテストできるように設定してみます。RN(react native)をiOSデバイスでテストする方法が知りたい方は以前のブログiOSデバイステストを確認してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-test-on-device.jpg"/></entry><entry xml:lang="ja"><title type="html">Firebase Admob</title><link href="https://dev-yakuza.github.io/react-native/react-native-firebase-admob/" rel="alternate" type="text/html" title="Firebase Admob"/><published>2018-11-17T00:00:00+09:00</published><updated>2018-11-22T22:41:56+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-firebase-admob-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-firebase-admob/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;私たちはグーグルアドモブ(Google Admob)を使ってアプリへ広告を表示しています。以前にはreact-native-admobというライブラリを使いましたが、グーグルアドモブ(Google Admob)以外にもアナリティクス(Analytics)など、色んな機能を使うことのになって、統合的に使えるライブラリを探した結果react-native-firebaseというライブラリを見つけました。&lt;/p&gt; &lt;p&gt;ここにはグーグルファイアベース(Google Firebase)を使って無料でグーグルアドモブ(Google Admob), アナリティクス(Analytics)を使う方法を紹介します。&lt;/p&gt; &lt;p&gt;簡単にグーグルアドモブ(Google Admob)だけ使いたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;下記のリンクはreact-native-firebaseの公式ページです。詳しく内容は公式サイトを確認してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://github.com/invertase/react-native-firebase&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-firebase&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ライブラリインストール&quot;&gt;ライブラリインストール&lt;/h2&gt; &lt;p&gt;下のコマンドを使ってreact-native-firebaseライブラリをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ライブラリリンク&quot;&gt;ライブラリリンク&lt;/h2&gt; &lt;p&gt;下記のコマンドを使ってreact-native-firebaseライブラリをRN(react native)プロジェクトへ連携します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;firebaseプロジェクト生成&quot;&gt;firebaseプロジェクト生成&lt;/h2&gt; &lt;p&gt;次はグーグルのファイアベース(Google Firebase)へプロジェクトを生成する必要があります。下のリンクを押してグーグルファイアベース(Google Firebase)へ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;グーグルファイアベース(Google Firebase): &lt;a href=&quot;https://firebase.google.com&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase.png&quot; alt=&quot;google firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGN IN&lt;/code&gt;ボタンを押してログインします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-after-login.png&quot; alt=&quot;google firebase after login&quot; /&gt;&lt;/p&gt; &lt;p&gt;ログインしたら右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;GO TO CONSOLE&lt;/code&gt;を押してグーグルファイアベースコンソル(Google Firebase Console)へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console.png&quot; alt=&quot;google firebase console&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)で&lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add project&lt;/code&gt;を押してプロジェクトを追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-add-project.png&quot; alt=&quot;google firebase console add project&quot; /&gt;&lt;/p&gt; &lt;p&gt;プロジェクト情報を追加した後&lt;code class=&quot;highlighter-rouge&quot;&gt;Create project&lt;/code&gt;ボタンを押してプロジェクトを生成します。&lt;/p&gt; &lt;h2 id=&quot;グーグルアドモブ設定&quot;&gt;グーグルアドモブ設定&lt;/h2&gt; &lt;p&gt;グーグルアドモブ(Google Admob)へ広告を設定する必要があります。グーグルファイアベースコンソル(Google Firebase Console)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Grow&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Admob&lt;/code&gt;を選択したら下記の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-admob.png&quot; alt=&quot;google firebase console admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面の下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;linking your apps in AdMob.&lt;/code&gt;リンクを押してグーグルアドモブ(Google Admob)ページへ移動します。&lt;/p&gt; &lt;p&gt;グーグルアドモブ(Google Admob)へ広告を設定する方法は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;ブログを参考してください。&lt;/p&gt; &lt;h2 id=&quot;firebase-ios-設定&quot;&gt;firebase iOS 設定&lt;/h2&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)でプロジェクトを選択したら下の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project.png&quot; alt=&quot;google firebase console project&quot; /&gt;&lt;/p&gt; &lt;p&gt;中央にある&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;ボタンを押してiOS設定画面へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project-ios.png&quot; alt=&quot;google firebase console project ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;開発したアプリのバンドルID(Bundle ID)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/googleservice-info-plist-download.png&quot; alt=&quot;GoogleService-Info.plist download&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベース(Google Firebase)が生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;ファイルをダウンロードして&lt;code class=&quot;highlighter-rouge&quot;&gt;info.plist&lt;/code&gt;と同じ位置へコピーします。&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;ファイルの追加が終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/add-firebase-sdk.png&quot; alt=&quot;add Firebase SDK&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面へ表示したようにグーグルファイアベースSDK(Google Firebase SDK)をRN(react native)プロジェクトへ追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod init &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)を追加します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blaboo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Uncomment the next line if you're using Swift or would like to use dynamic frameworks&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use_frameworks!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for blaboo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Core'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/AdMob'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blabooTests'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inherit!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:search_paths&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)をインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install &lt;span class=&quot;c&quot;&gt;# pod update&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/edit-appdelegate.png&quot; alt=&quot;edit appdelegate.m for firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトの&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelete.m&lt;/code&gt;ファイルを上のようにコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)をインポートします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIRApp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GADMobileAds&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configureWithApplicationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031~8295071692&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)を初期化します。その後グーグルアドモブ(Google Admob)のアプリID(App ID)を入力してグーグルアドモブ(Google Admob)を初期化します。グーグルアドモブのアプリID(App ID)を取得する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/connect-firebase-to-app.png&quot; alt=&quot;connect firebase to app&quot; /&gt;&lt;/p&gt; &lt;p&gt;私たちはこの部分では&lt;code class=&quot;highlighter-rouge&quot;&gt;Skip this step&lt;/code&gt;を押してスキップしました。&lt;/p&gt; &lt;h2 id=&quot;firebaseアンドロイドandroid設定&quot;&gt;firebaseアンドロイド(Android)設定&lt;/h2&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)へ左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Project Overview&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/firebase-project-overview.png&quot; alt=&quot;Google Firebase Console Project Overview&quot; /&gt;&lt;/p&gt; &lt;p&gt;上部へ&lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add app&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;アンドロイド(Android)アイコン&lt;/code&gt;を押してアンドロイドプロジェクト設定へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/register-android.png&quot; alt=&quot;Google Firebase Android app register&quot; /&gt;&lt;/p&gt; &lt;p&gt;アンドロイドパッケージ名(Android Package Name)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt;を押します。&lt;/p&gt; &lt;p&gt;RN(react native)でアンドロイドパッケージ名を修正したい方は下の項目を進んでください。&lt;/p&gt; &lt;h3 id=&quot;アンドロイドパッケージ名修正&quot;&gt;アンドロイドパッケージ名修正&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/BUCK&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android_build_config( ... package = &quot;package_name&quot;, ) ... android_resource( ... package = &quot;package_name&quot;, ... ) ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/AndroindManifest.xml&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainActivity.java&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainApplication.java&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/set-google-services-json.png&quot; alt=&quot;Google Firebase google-services.json setting&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベース(Google Firebase)が作った&lt;code class=&quot;highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt;ファイルをRN(react native)プロジェクトの&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへコピーします。その後、&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;ボタンを押して次へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/setting-android.png&quot; alt=&quot;Google Firebase setting on android&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトがあるフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/build.gradle&lt;/code&gt;を開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Add this line&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms:google-services:4.0.1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;へ&lt;code class=&quot;highlighter-rouge&quot;&gt;google()&lt;/code&gt;が入ってるか&lt;code class=&quot;highlighter-rouge&quot;&gt;jcenter()&lt;/code&gt;のより上にあるか確認します。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトがあるフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルを開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.gms:play-services-base:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.firebase:firebase-core:16.0.4'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.firebase:firebase-ads:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そして同じファイルの一番下へ下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms.google-services'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;googleservices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GoogleServicesPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableVersionCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/[app name]/MainApplication.java&lt;/code&gt;ファイルへ下のソースを追加します。&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.ads.MobileAds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebaseAdMobPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileAds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ca-app-pub-7987914246691031~9800293270&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のソースで&lt;code class=&quot;highlighter-rouge&quot;&gt;MobileAds.initialize(this, &quot;ad app id&quot;);&lt;/code&gt;部分へグーグルアドモブ(Google Admob)で生成下アプリアイディ(App ID)を追加します。グーグルアドモブ(Google Admob)のアプリアイディ(App ID)を生成する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;アンドロイドスタジオ(Android Studio)を開いて&lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;を同期化するか聞いてくれたら&lt;code class=&quot;highlighter-rouge&quot;&gt;Sync now&lt;/code&gt;を押して同期化します。&lt;/p&gt; &lt;h2 id=&quot;ソース追加&quot;&gt;ソース追加&lt;/h2&gt; &lt;p&gt;react-native-firebaseの設定は完了しました。今からRN(react native)のソースコードを修正してグーグルアドモブ(Google Admob)が上手く表示されるようにします。&lt;/p&gt; &lt;p&gt;下のソースはreact-native-firebaseを使ってbannerを表示する例です。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-firebaseをローディングします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unitId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031/7659403606&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SMART_BANNER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAdLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Advert loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のようにソースコードを追加してRN(react native)プロジェクトを実行したらバナーが上手く表示されることを確認することができます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;RN(react native)プロジェクトへreact-native-firebaseライブラリを使ってグーグルアドモブ(Google Admob)を適用する方法をみてみました。これでreact-native-firebaseを設定したらアナリティクス(Analytics)は自動に設定されて分析することができます。&lt;/p&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)のメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt;を押してみたら、分析してることが確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/react-native-firebase-analytics.png&quot; alt=&quot;react native firebase analytics&quot; /&gt;&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 私たちはグーグルアドモブ(Google Admob)を使ってアプリへ広告を表示しています。以前にはreact-native-admobというライブラリを使いましたが、グーグルアドモブ(Google Admob)以外にもアナリティクス(Analytics)など、色んな機能を使うことのになって、統合的に使えるライブラリを探した結果react-native-firebaseというライブラリを見つけました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-firebase-admob.jpg"/></entry><entry xml:lang="ja"><title type="html">jekyll-last-modified-at</title><link href="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/" rel="alternate" type="text/html" title="jekyll-last-modified-at"/><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今まで管理してるこのブログの&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;は&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;これを使ってビルドする時点の日付を全てのページへ反映していました。しかし実際更新してないファイルもビルドした時点の時間が入るから全てのファイルを再クローリングして実際更新したファイルのクローリングが遅くなるんじゃないかなと思いました。それで今回&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;プラグインを使って実際ファイルが修正された場合&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;へ反映するように修正しました。&lt;/p&gt; &lt;h2 id=&quot;プラグイン&quot;&gt;プラグイン&lt;/h2&gt; &lt;p&gt;下にあるリンクを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;のサイトへ行ったら全ての説明が詳しくあります。それを見ながらやってみます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;jekyll-last-modified-at: &lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/gjtorikian/jekyll-last-modified-at&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;プラグインインストル&quot;&gt;プラグインインストル&lt;/h2&gt; &lt;p&gt;下のコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;ぷログインをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-last-modified-at &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt; &lt;p&gt;ファイルの修正日を表示したい部分で下記のコード中の一つを選べって入れます。&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {% last_modified_at %} {% last_modified_at %Y:%B:%A:%d:%S:%R %} {{ page.last_modified_at }} {{ page.last_modified_at | date: '%Y:%B:%A:%d:%S:%R' }} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは使ってる&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;を下のように修正しました。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt; --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ post.last_modified_at | date: '%Y-%m-%d' }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;確認&quot;&gt;確認&lt;/h2&gt; &lt;p&gt;実際プロジェクトをビルドして入れたコードを確認した結果、実際ファイルを修正した日付が上手く表示してることを確認しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルのクローリングに影響があるかは分からないけど実際の時間を表示するように修正したのでプログラマー的に上手く仕事したんじゃないかなと思って嬉しいです。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今まで管理してるこのブログのsitemap.xmlは</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/jekyll/jekyll-last-modified-at.jpg"/></entry><entry xml:lang="ja"><title type="html">Google Analytics</title><link href="https://dev-yakuza.github.io/react-native/react-native-analytics-bridge/" rel="alternate" type="text/html" title="Google Analytics"/><published>2018-11-14T00:00:00+09:00</published><updated>2018-11-19T23:06:15+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-analytics-bridge-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-analytics-bridge/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;グーグルアナリティクス(&lt;a href=&quot;https://marketingplatform.google.com/about/analytics/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;Google Analytics&lt;/a&gt;)を使ってRN(react native)で開発したアプリを分析することができます。グーグルアナリティクス(Google Analytics)を使ってRN(react native)アプリを分析してみましょう。&lt;/p&gt; &lt;h2 id=&quot;ライブラリインストール&quot;&gt;ライブラリインストール&lt;/h2&gt; &lt;p&gt;RN(react native)アプリとグーグルアナリティクス(Google Analytics)を連携するためには&lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#installation-and-linking-libraries&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;GoogleAnalyticsBridge&lt;/a&gt;ライブラリをインストルする必要があります。下記のコマンドを実行して&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleAnalyticsBridge&lt;/code&gt;ライブラリをインストールしてください。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-google-analytics-bridge &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドでRN(react native)と&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleAnalyticsBridge&lt;/code&gt;を連携してください。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-google-analytics-bridge &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-google-analytics-bridgeライブラリを使う準備が終わりました。今まからグーグルアナリティクス(Google Analytics)を連動する準備をする必要があります。&lt;/p&gt; &lt;h2 id=&quot;google-analytics&quot;&gt;Google Analytics&lt;/h2&gt; &lt;p&gt;下のリンクを押してグーグルアナリティクス(Google Analytics)サイトへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;グーグルアナリティクス(Google Analytics): &lt;a href=&quot;https://analytics.google.com/analytics/web/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://analytics.google.com/analytics/web/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;ログイン後左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt;メニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/create-account-for-mobile.png&quot; alt=&quot;create account for mobile&quot; /&gt;&lt;/p&gt; &lt;p&gt;左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+ Create Account&lt;/code&gt;を押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/click-create-account.png&quot; alt=&quot;click create account&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)で作ったアプリの情報を入力して一番下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Get Tracking ID&lt;/code&gt;を押してトラッキングアイディ(Tracking ID)を生成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/insert-app-info.png&quot; alt=&quot;insert-app-info&quot; /&gt;&lt;/p&gt; &lt;p&gt;react-native-google-analytics-bridgeライブラリとグーグルアナリティクス(Google Analytics)の連動する準備が終わりました。実際トラッキングアイディ(Tracking ID)を使ってRN(react native)で作ったアプリを分析してみます。&lt;/p&gt; &lt;h2 id=&quot;分析コード&quot;&gt;分析コード&lt;/h2&gt; &lt;p&gt;RN(react native)で開発したアプリへグーグルアナリティクス(Google Analytics)で分析したいページへ下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-google-analytics-bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UA-12345-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackScreenView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;はい、これで終わりました。簡単ですね？下記のコードへ自分のグーグルアナリティクス(Google Analytics)のトラッキングアイディ(Tracking ID)を入力します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;自分のトラッキングアイディ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;トラッキングしたいページの識別するためのタイトルを入力します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackScreenView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちはこのコードを&lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;へ入れて使ってます。どこがいい場所かは皆さんが判断して入れたらいいと思います。&lt;/p&gt; &lt;p&gt;もっと深い分析がしたい方は公式サイトを参考してreact-native-google-analytics-bridgeの色んな機能を使ってみてください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#usage&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-google-analytics-bridge&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt; &lt;p&gt;私たちはアプリの分析だけではなくグーグルのファイアベース(Google firebase)の色んな機能を使うためreact-native-firebaseを使ってアプリを分析することにしました。別の機能のためreact-native-firebaseライブラリを設定するだけで児童にアプリを分析してくれます。react-native-firebaseライブラリの設定に関しては&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;のブログをみてください。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#installation-and-linking-libraries&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;GoogleAnalyticsBridge&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 グーグルアナリティクス(Google Analytics)を使ってRN(react native)で開発したアプリを分析することができます。グーグルアナリティクス(Google Analytics)を使ってRN(react native)アプリを分析してみましょう。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-analytics-bridge.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS App store 登録</title><link href="https://dev-yakuza.github.io/react-native/ios-app-store/" rel="alternate" type="text/html" title="iOS App store 登録"/><published>2018-11-13T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-app-store-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-app-store/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今から開発したアプリをiOSアプリスタア(App Store)へ登録する方法について説明します。ここには無料アプリを登録する時必要な情報が載せております。&lt;/p&gt; &lt;h2 id=&quot;準備項目&quot;&gt;準備項目&lt;/h2&gt; &lt;p&gt;iOSアプリストア(App Store)へ登録するためには下記の項目が必要になります。&lt;/p&gt; &lt;h3 id=&quot;アプリストア情報&quot;&gt;アプリストア情報&lt;/h3&gt; &lt;p&gt;下記にある情報はアプリストア(App store)へ表示される情報です。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;名前(最大 30文字)&lt;/li&gt; &lt;li&gt;サブタイトル(最大 30文字)&lt;/li&gt; &lt;li&gt;プライバシーポリシーURL&lt;/li&gt; &lt;li&gt;プライマ言語(アプリの多言語で対応してない国からアプリを起動した時表示する言語)&lt;/li&gt; &lt;li&gt;カテゴリー x 2&lt;/li&gt; &lt;li&gt;アイホン5.5のアプリスクリンショット&lt;/li&gt; &lt;li&gt;プロモーションテキスト(最大 170文字)&lt;/li&gt; &lt;li&gt;キーワード(最大 100文字)&lt;/li&gt; &lt;li&gt;説明(最大 4000文字)&lt;/li&gt; &lt;li&gt;サポートURL&lt;/li&gt; &lt;li&gt;マーケティングURL&lt;/li&gt; &lt;li&gt;著作権&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;ここで一番難しい項目はプライバシーポリシーURLです。下のリンクはプライバシーポリシーを作る時参考したサイトです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;プライバシーポリシー: &lt;a href=&quot;https://kiyaku.jp/hinagata/privacy.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://kiyaku.jp/hinagata/privacy.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上のリンクを押してプライバシーポリシーを作ってみてください。&lt;/p&gt; &lt;h3 id=&quot;アプリ審査情報&quot;&gt;アプリ審査情報&lt;/h3&gt; &lt;p&gt;下記の情報はアプリ審査のため必要な情報です。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;ログイン情報&lt;/li&gt; &lt;li&gt;連絡先&lt;/li&gt; &lt;li&gt;メーも&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;審査指針&quot;&gt;審査指針&lt;/h2&gt; &lt;p&gt;皆さんもよくしてると思いますがアップルの審査は厳しいです。私たちも簡単なアプリですが今三回落ちって、まだ待てる状態です。下記のリンクはアップルの審査指針です。よく読んでアップルの審査にお落ちないように準備しましょう。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;審査指針: &lt;a href=&quot;https://developer.apple.com/jp/app-store/review/guidelines/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/jp/app-store/review/guidelines/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;スクリンショットサイズ: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/devd274dd925&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;li&gt;アプリプレビューサイズ: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/dev4e413fcb8&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今から開発したアプリをiOSアプリスタア(App Store)へ登録する方法について説明します。ここには無料アプリを登録する時必要な情報が載せております。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-app-store.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS TestFlight</title><link href="https://dev-yakuza.github.io/react-native/ios-testflight/" rel="alternate" type="text/html" title="iOS TestFlight"/><published>2018-11-12T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-testflight-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-testflight/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;iOSは開発したアプリをリリースする前自分のテスターまたはテストバージョンの公開URLを使ってテストができる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;システムを持ってます。ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使って開発したアプリをテストする方法について話します。&lt;/p&gt; &lt;p&gt;このブログは下記のブログを見て全部終わった方のためです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-running-on-device/&quot; target=&quot;_blank&quot;&gt;iOSビルドやテスト&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS証明書(Certification)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;アップル開発者プログラムApple Developer Program)の登録や証明書(Certification)の設定が出来てない方は上のブログを参考してください。&lt;/p&gt; &lt;h2 id=&quot;リリース用アプリ生成&quot;&gt;リリース用アプリ生成&lt;/h2&gt; &lt;p&gt;アップルが提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってアプリをテストする場合アプリストアコネクト(Apple Store Connect)にリリース用アプリを生成する必要があります。下記のリンクを押してアプリストアコネクト(App Store Connect)へ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アプリストアコネクト(App Store Connect): &lt;a href=&quot;https://appstoreconnect.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://appstoreconnect.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/app-store-connect.png&quot; alt=&quot;App Store Connect&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプル開発者プログラム(Apple Developer Program)へ登録した開発者アイディでログインします。アプル開発者プログラム(Apple Developer Program)へ登録してない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;のブログを参考して登録してください。&lt;/p&gt; &lt;p&gt;ログインをしたら下記のような画面が見えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;マイAppApp&lt;/code&gt;を押してアプリ管理ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-store-connect-main.png&quot; alt=&quot;アプリストアコネクトメイン&quot; /&gt;&lt;/p&gt; &lt;p&gt;左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;新規App&lt;/code&gt;メニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-list.png&quot; alt=&quot;アプリリスト&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプリ登録画面が出たら、自分のアプリの情報を入力します。よくわからない部分があったら項目の左にある&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;マークを押して内容を確認します。名前とプライマ言語(アプリの多言語で対応してない国からアプリを起動した時表示する言語)は後でも帰れます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-new-app.png&quot; alt=&quot;앱 생성&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;バンドルID: アプリを開発する時使った&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle ID&lt;/code&gt;です。これが何か分からない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;を見てください。&lt;/li&gt; &lt;li&gt;SKU: App Storeには表示しないアプリユニークIDです。仏はURL形式で作成します。(ex&amp;gt; io.github.dev-yakuza.blaboo)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-menu.png&quot; alt=&quot;アプリメニュー&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプリを生成したら上の画面ようにメニューが見えます。メニュー中&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;メニューを選択します。&lt;/p&gt; &lt;p&gt;開発したアプリを&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってテストするためにはリリース用ビルドが必要になりそのビルドがアプリストアコネクト(App Store Connect)へアップロードする必要があります。&lt;/p&gt; &lt;h2 id=&quot;アプリビルド&quot;&gt;アプリビルド&lt;/h2&gt; &lt;p&gt;開発したアプリをビルドしてアプリストアコネクト(App Store Connect)へアップロードする方法について説明します。すでにビルドしたアプリがある方はこの部分はスキップしても大丈夫です。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名.xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/build-for-production.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;xcodeが実行されたら上部にあるメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt;を選択します。アプリ開発者プログラム(Apple Developer Program)へ登録されてない方や証明書を連携してない方は以前のブログを確認してください。(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;, &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 証明書(Certification)&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;ビルドが無事に終わったら下のような画面が出ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;アプリアップロード&quot;&gt;アプリアップロード&lt;/h2&gt; &lt;p&gt;ビルド完了後、見える画面を閉じた方やすでにビルドしたファイルを持ってる方はxcodeの上部にあるメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Window&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Organizer&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/organizer-menu.png&quot; alt=&quot;organizer menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;メニューまたはビルドを完了したら下の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;右にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Distribute App&lt;/code&gt;を選択します。アプリをリリースするではなくアプリをアプリストアコネクト(App Store Connect)へアップロードする機能です。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/select-platform.png&quot; alt=&quot;select platfom&quot; /&gt;&lt;/p&gt; &lt;p&gt;開発したアプリをリリースするプラットフォームを選択します。私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Store&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload-export.png&quot; alt=&quot;upload or export&quot; /&gt;&lt;/p&gt; &lt;p&gt;最後の目的地がアプリストアコネクト(App Store Connect)へアップロードするかipaファイルを出す(export)かを決める画面です。私たちはアプリストアコネクト(App Store Connect)へアップロードする予定ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/options.png&quot; alt=&quot;options&quot; /&gt;&lt;/p&gt; &lt;p&gt;オプション選択画面です。全てのオプションがチェックされてる状態で&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;を押します。次の画面で生成した証明書とプロビジョニングプロファイル(Provisioning Profile)を選択します。証明書、プロビジョニングプロファイル(Provisioning Profile)生成は以前のブログ(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS証明書(Certification)&lt;/a&gt;)を確認してください。&lt;/p&gt; &lt;p&gt;アップロードの準備がおわたら下の画面が見えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;ボタンを押して準備出来たファイルをアプリストアコネクト(App Store Connect)へアップロードしてください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt; &lt;p&gt;無事にアプリをアプリストアコネクト(App Store Connect)へアップロードしました。アップロードしたファイルを使える準備が出来たらアップルからメールが来ます。アップロードからメール来る時まだちょっと時間がかかります。&lt;/p&gt; &lt;h2 id=&quot;テストグループ生成&quot;&gt;テストグループ生成。&lt;/h2&gt; &lt;p&gt;アップルからメールを貰った方はアプリストアコネクト 애플에서 메일을 받으신 분들은 앱 스토어 커넥트(App Store Connect)の &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;ページに移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-testflight-build-file-list.png&quot; alt=&quot;ビルドファイルリスト&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;画面でアップロードしたファイルが見えます。左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;新規グループ ＋&lt;/code&gt;を押してテストのためのグループを生成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-create-test-group.png&quot; alt=&quot;テストグループ生成&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストグループを生成したら左メニューへ生成する時使ったグループ名が追加されます。そのグループを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-test-group.png&quot; alt=&quot;テストグループ&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストグループの生成を完了しました。今後はビルドファイル、テスターを追加してテストする方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;ビルド追加&quot;&gt;ビルド追加&lt;/h2&gt; &lt;p&gt;テストグループを選択した画面で上部にある&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド&lt;/code&gt;タブを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-build-tab.png&quot; alt=&quot;ビルドタブ選択&quot; /&gt;&lt;/p&gt; &lt;p&gt;ビルドタブで&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド(0)&lt;/code&gt;の横にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押してビルドファイルを選択する画面に移動します。テストしたいビルドを選択した下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;次へ&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-select-build.png&quot; alt=&quot;ビルド選択&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストする時ログイン情報が必要かどうか選択する画面が出ます。アプリをテストするためにログイン情報が必要な場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;サインインが必要です&lt;/code&gt;を選択してID/PWを入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;次へ&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-need-login.png&quot; alt=&quot;ログイン必要&quot; /&gt;&lt;/p&gt; &lt;p&gt;下の画面でテスターに送りたいメッセージやテストする方ほを作成して&lt;code class=&quot;highlighter-rouge&quot;&gt;審査へ提出&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-test-message.png&quot; alt=&quot;テスターメッセージ&quot; /&gt;&lt;/p&gt; &lt;p&gt;テスターへテストをお願いするための&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;ですが、基本的簡単な審査をするみたいです。したがった、テスターにすぐにファイルを送ることが出来ないです。審査がおわたらテストができる状態になります。&lt;/p&gt; &lt;h2 id=&quot;テスター追加&quot;&gt;テスター追加&lt;/h2&gt; &lt;p&gt;アップルが提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;は大きく二つ機能があります。自分がしてるテスターを追加する方法と公開URLを生成してこのリンクを配布する方法です。まずテスターを追加する方法について説明します。&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;メニューでテストグループを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;テスター(0)&lt;/code&gt;の横にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;新規テスターを追加&lt;/code&gt;のメニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-add-new-tester.png&quot; alt=&quot;新規テスター追加&quot; /&gt;&lt;/p&gt; &lt;p&gt;新しい追加するテスターのメール、名前を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;追加&lt;/code&gt;ボタンを押します。追加するテスターのメールはアプリストア(App Store)でアプリをダウンロードする時使うメールです。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-added-new-tester.png&quot; alt=&quot;新規テスター追加完了&quot; /&gt;&lt;/p&gt; &lt;p&gt;新しテスターが追加されました。新しく追加されたテスターには&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;からメールが送信されます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/testflight-email.png&quot; alt=&quot;testflight email&quot; /&gt;&lt;/p&gt; &lt;p&gt;テスターはアプリストア(App store)から&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を検索してダウンロードしたらアプリテストができます。&lt;/p&gt; &lt;h2 id=&quot;公開リンク&quot;&gt;公開リンク&lt;/h2&gt; &lt;p&gt;公開リンクを選択して登録を完了したら公開リンクが生成されます。そのリンクをコピーして共有したらテストへ参加することができます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってテストする方法を見ました。次のブログでは実際アップリをリリースする方法について紹介します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 iOSは開発したアプリをリリースする前自分のテスターまたはテストバージョンの公開URLを使ってテストができるTestFlightシステムを持ってます。ここではTestFlightを使って開発したアプリをテストする方法について話します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-testflight.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS 証明書(Certification)</title><link href="https://dev-yakuza.github.io/react-native/ios-certification/" rel="alternate" type="text/html" title="iOS 証明書(Certification)"/><published>2018-11-11T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-certification-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-certification/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;このブログはアップル開発者プログラム(Apple Developer Program)へすでに登録した開発者のため説明です。アップル開発者プログラム(Apple Developer Program)へまだ登録してない方は前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;をみてアップル開発者プログラム(Apple Developer Program)へ登録してください。&lt;/p&gt; &lt;p&gt;今から開発者の証明書(Certification)を生成して設定する方法について説明します。&lt;/p&gt; &lt;h2 id=&quot;証明書ダウンロード&quot;&gt;証明書ダウンロード&lt;/h2&gt; &lt;p&gt;アップル開発者プログラム(Apple Developer Program)を購入して購入完了メールをもらったらアップル開発者サイト(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/&lt;/a&gt;)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/apple-developer-site-after-enrolling.png&quot; alt=&quot;apple developer site after enrolling&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者プログラム(Apple Developer Program)へ登録する前と画面が少し違います。左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;を選択して証明書(Certification)を発行するページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書(Certification)がすでに一個存在します。この証明書(Certification)を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;ボタンを押して証明書を好きなところに保存します。証明書が見えない方は下記の証明書生成を見って証明書を新しく生成します。&lt;/p&gt; &lt;p&gt;この証明書は開発用です。この証明書がある方も下記の証明書生成でリリース用の証明書を生成してください。&lt;/p&gt; &lt;h2 id=&quot;証明書生成&quot;&gt;証明書生成&lt;/h2&gt; &lt;p&gt;Macで&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;プログラムを実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain.png&quot; alt=&quot;キーチェーンアクセス&quot; /&gt;&lt;/p&gt; &lt;p&gt;キージェーンが実行されたら左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;証明書アシスタント&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;証明局に証明書を要求...&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-request-certification.png&quot; alt=&quot;キーチェーンアクセス証明書要求&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;証明局に証明書を要求...&lt;/code&gt;を押すと下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;証明書アシスタント&lt;/code&gt;ダイアローグが表示します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-info.png&quot; alt=&quot;キーチェーンアクセス証明書情報入力&quot; /&gt;&lt;/p&gt; &lt;p&gt;上の画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;ユーザのメールアドレス&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;通称&lt;/code&gt;へ情報を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;要求の処理&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;ディスクに保存&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;鍵ペア情報を指定&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;続ける&lt;/code&gt;を押します。ファイル保存する画面が出たら好きな場所を選択してファイルを保存します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-key.png&quot; alt=&quot;キーチェーンアクセス証明書保存&quot; /&gt;&lt;/p&gt; &lt;p&gt;キーペア情報を上のように設定して&lt;code class=&quot;highlighter-rouge&quot;&gt;続ける&lt;/code&gt;を押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-completed.png&quot; alt=&quot;キーチェーンアクセス証明書完了&quot; /&gt;&lt;/p&gt; &lt;p&gt;ディスクへ証明書が上手く保存しました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者サイト(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/&lt;/a&gt;)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページで&lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;メニューを押して証明書登録サイトへ移動します。そこで右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/select-certification.png&quot; alt=&quot;certification selection&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書選択画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;を選択して下にスクロールして&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;リリース用証明書を生成する方は&lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt;の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;App Store and Ad Hoc&lt;/code&gt;を選択してく進んでください。&lt;/p&gt; &lt;p&gt;証明書ファイル(CSR)を作る方法を説明するページが出ます。私たちは上部で&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;ですでに証明書ファイル(CSR)を作りましたのでスクロールして&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/create-csr-file.png&quot; alt=&quot;create csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;生成した証明書ファイルを選択する画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Choose File&lt;/code&gt;ボタンを押して上部で作った証明書ファイルを選択して下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/choose-csr-file.png&quot; alt=&quot;choose csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書の生成を完了しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;ボタンを押して証明書を好きなところへ保存してください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/complete-create-certification.png&quot; alt=&quot;complete create certification file&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;証明書登録&quot;&gt;証明書登録&lt;/h2&gt; &lt;p&gt;生成した証明書を&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;へ入れる必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;を実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain.png&quot; alt=&quot;キーチェーンアクセス&quot; /&gt;&lt;/p&gt; &lt;p&gt;下のように&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;が開けたら左下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;自分の証明書&lt;/code&gt;を押して上部でダウンロードした証明書のファイルをドラッグして追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain-certification.png&quot; alt=&quot;キーチェーンアクセス証明書&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;アップル開発者アカウント連携&quot;&gt;アップル開発者アカウント連携&lt;/h2&gt; &lt;p&gt;アップル開発者アカウント(Apple Developer)と現在のプロジェクトを連携する必要があります。RN(react native)のプロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名.xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/p&gt; &lt;p&gt;xcodeで左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;タブに移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の横にあるドロップダウンメニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;すでにxcodeとアップル開発者アカウント(Apple Developer)が連動されてる方はそのアカウントを選択します。アカウント連動をしてない方は&lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-login.png&quot; alt=&quot;xcode certification login&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者アカウント(Appld Developer)でログインします。アップル開発者アカウント(Appld Developer)がない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS デバイステスト&lt;/a&gt;でアップル開発者アカウント生成方法を見って作ってください。ログインを完了したら左上の閉じるボタンを押して画面を閉じます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の横のドロップダウンメニューを選択したら先ほど追加したアップル開発者アカウントが見えます。そのアカウントを選択します。&lt;/p&gt; &lt;p&gt;同じ方法でTestの部分もアップル開発者アカウント(Apple Developer)と連携します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-test.png&quot; alt=&quot;xcode certification add test&quot; /&gt;&lt;/p&gt; &lt;p&gt;これでアップル開発者アカウントとの連携が終わりました。今からリリース用のビルドへ必要なプロビジョニングプロファイル(Provisioning Profiles)を生成して連携します。&lt;/p&gt; &lt;h2 id=&quot;プロビジョニングプロファイル生成&quot;&gt;プロビジョニングプロファイル生成&lt;/h2&gt; &lt;p&gt;アップル開発者サイト(Apple Developer)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページで下にスクロールしたら&lt;code class=&quot;highlighter-rouge&quot;&gt;Provisioning Profiles&lt;/code&gt;の項目が見ます&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profiles)도 개발자용과 배포용이 필요하므로 아래에 과정을 개발자용과 배포용, 두 번 진행하셔야합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles.png&quot; alt=&quot;provisioning profiles&quot; /&gt;&lt;/p&gt; &lt;p&gt;メニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;All&lt;/code&gt;を押してプロビジョニングプロファイル(Provisioning Profiles)を登録するページへ遷移します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-detail.png&quot; alt=&quot;provisioning profiles detail&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面が見えたら右上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して新しプロビジョニングプロファイル(Provisioning Profile)を追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-ios.png&quot; alt=&quot;provisioning profiles ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押して進めます。&lt;/p&gt; &lt;p&gt;リリース用プロビジョニングプロファイル(Provisioning Profiles)は&lt;code class=&quot;highlighter-rouge&quot;&gt;Distribution&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;App Store&lt;/code&gt;を選択して進めてください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-app-id.png&quot; alt=&quot;provisioning profiles app id&quot; /&gt;&lt;/p&gt; &lt;p&gt;私たちがアプリを開発する時使った&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;を選択します。&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;はxcodeで左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;タブに移動したら一番上の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt;項目を確認することが出来ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;選択を完了したら&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;を押して進めてください。開発者アカウントとテストするデバイスを選択して次のページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-name.png&quot; alt=&quot;provisioning profiles name&quot; /&gt;&lt;/p&gt; &lt;p&gt;最後にプロビジョニングプロファイル(Provisioning Profile)の名前を設定して&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;を押して次のページへ移動します。&lt;/p&gt; &lt;p&gt;プロビジョニングプロファイル(Provisioning Profile)の生成が完了しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;を押してファイルを好きなところに保存してください。&lt;/p&gt; &lt;h2 id=&quot;プロビジョニングプロファイル連携&quot;&gt;プロビジョニングプロファイル連携&lt;/h2&gt; &lt;p&gt;xcodeでは基本的に自動に&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;を管理する設定がされております。(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;項目の&lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;この状態でプロビジョニングプロファイル(Provisioning Profile)の連携、リリースのビルドする時特に問題ない方はそのまま使っても大丈夫です。（&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の項目へ赤文字エラーがない方）私たちはプロビジョニングプロファイル(Provisioning Profile)との連携が上手く出来なかったので手動で連携してみます。&lt;/p&gt; &lt;p&gt;下記は手動でプロビジョニングプロファイル(Provisioning Profile)を連携する方法です。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;を選択してチェックを外します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto.png&quot; alt=&quot;disable automatically manage signing&quot; /&gt;&lt;/p&gt; &lt;p&gt;チェックを外したら上の画面ような&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Debug)&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Release)&lt;/code&gt;が見えます。二つの&lt;code class=&quot;highlighter-rouge&quot;&gt;Provision Profile&lt;/code&gt;の横にあるドロップダウンメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Import Profile&lt;/code&gt;を選択して上部で生成してダウンロードしたプロビジョニングプロファイル(Provisioning Profile)を選択します。同じ方法でTestの部分も修正します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto_test.png&quot; alt=&quot;disable automatically manage signing test&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;全ての設定が終わりました。証明書を連携したので開発やリリースの準備まで終わりました。次のブログからはリリース準備や&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使う方法、実際のリリースについて説明します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 このブログはアップル開発者プログラム(Apple Developer Program)へすでに登録した開発者のため説明です。アップル開発者プログラム(Apple Developer Program)へまだ登録してない方は前のブログiOS開発者登録をみてアップル開発者プログラム(Apple Developer Program)へ登録してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-certification.jpg"/></entry></feed>