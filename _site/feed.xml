<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/" rel="alternate" type="text/html"/><updated>2018-12-04T17:53:17+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">アンシブル&amp;amp;ドッカー</title><link href="https://dev-yakuza.github.io/environment/ansible-docker/" rel="alternate" type="text/html" title="アンシブル&amp;ドッカー"/><published>2018-12-04T00:00:00+09:00</published><updated>2018-12-04T17:47:28+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible_docker-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-docker/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;サーバー開発にドッカー(Docker)は必須になりました。ここでドッカー(Docker)について全ての説明は難しいと思います。ブログを作成しながらちょっとちょっと説明することでドッカー(Docker)を説明します。このブログではアンシブルプレイブック(Ansible Playbook)を使ってvagrantにドッカー(Docker)とドッカーコンポーズ(Docker Compose)をインストールする方法を紹介します。&lt;/p&gt; &lt;p&gt;このブログは下の3つのブログを全て進めたと思って説明します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/environment/ansible-playbook/&quot; target=&quot;_blank&quot;&gt;アンシブルプレイブック&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンシブルプレイブックにドッカー設定&quot;&gt;アンシブルプレイブックにドッカー設定&lt;/h2&gt; &lt;p&gt;今まで作ったvagrant仮想マシン(guest system)のためのディレクトリ(directory)構造は下記の通りです。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ここに私たちはドッカー(Docker)インストールに関する&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を定義してアンシブルプレイブック(Ansible Playbook)に追加する予定です。下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダ下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;docker/tasks/main.yml&lt;/code&gt;ファイルを追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- docker | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)のスタートポイントである&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルを下のように追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;追加した&lt;code class=&quot;highlighter-rouge&quot;&gt;docker/tasks/main.yml&lt;/code&gt;ファイルを下のように修正します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://get.docker.com | sh&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Modify privilege&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;usermod -aG docker $USER&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x /usr/bin/docker&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker-compose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker-compose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x /usr/local/bin/docker-compose&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今からアンシブル(Ansible)コマンドを1つずつ見ます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl https://get.docker.com | sh&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカー(Docker)インストールスクリプトを使ってドッカー(Docker)をインストールします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Modify privilege&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;usermod -aG docker $USER&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x /usr/bin/docker&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカー(Docker)のユーザーや権限を変更します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install docker-compose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカーコンポーズ(Docker Compose)をインストールします。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change privilege of docker-compose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x /usr/local/bin/docker-compose&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ドッカーコンポーズ(Docker Compose)の権限を変更します。&lt;/p&gt; &lt;h2 id=&quot;アンシブル実行&quot;&gt;アンシブル実行&lt;/h2&gt; &lt;p&gt;上でアンシブルプレイブック(Ansible Playbook)へ追加したドッカー(Docker)インストール&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;を実行するため下のアンシブル(Ansible)コマンドを仮想マシン(guest system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ansible-playbook /vagrant/ansible/playbook.yml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;すでに環境がある状態で進めるのでアンシブルプレイブック(Ansible Playbook)を実行しました。新しく開発環境を作るときはvagrantのプロビジョンシェル(provision shell)へアンシブルプレイブック(Ansible Playbook)実行スクリプトを追加したので自動に実行されます。&lt;/p&gt; &lt;p&gt;確認するため下記のvagrantコマンドをローカルマシン(host system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ドッカーインストール確認&quot;&gt;ドッカーインストール確認&lt;/h2&gt; &lt;p&gt;ドッカー(Docker)がアンシブルプレイブック(Ansible Playbook)で仮想マシン(guest system)に上手くインストールされたかを確認するため下記のドッカー(Docker)コマンドで確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh docker &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)でドッカー(Docker)とドッカーコンポーズ(Docker Compose)を追加して仮想マシン(guest system)へインストールする方法を見ました。今からはドッカー(Docker)を使って好きな開発環境を作ることができます。次のブログではドッカー(Docker)とドッカーコンポーズ(Docker Compose)を使ってララベル(Laravel)開発環境を作る方法について説明します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 サーバー開発にドッカー(Docker)は必須になりました。ここでドッカー(Docker)について全ての説明は難しいと思います。ブログを作成しながらちょっとちょっと説明することでドッカー(Docker)を説明します。このブログではアンシブルプレイブック(Ansible Playbook)を使ってvagrantにドッカー(Docker)とドッカーコンポーズ(Docker Compose)をインストールする方法を紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-docker.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブルプレイブック</title><link href="https://dev-yakuza.github.io/environment/ansible-playbook/" rel="alternate" type="text/html" title="アンシブルプレイブック"/><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-04T09:37:44+09:00</updated><id>https://dev-yakuza.github.io/environment/ansible_playbook-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/ansible-playbook/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログでインストールしたアンシブル(Ansible)のプレイブック(Playbook)を使ってサーバーを構築します。基本的にサーバー構築へ必要なプログラムインストールや設定をするためアンシブルプレイブック(Ansible Playbook)を使う予定です。このブログでは基本的vagrantを使って仮想マシン(guest system)を作ってその中にアンシブル(Ansible)をインストールして進めます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrantをインストールする方法については以前のブログの&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;を確認してください。&lt;/li&gt; &lt;li&gt;vagrantにアンシブル(Ansible)をインストールする方法については&lt;a href=&quot;https://dev-yakuza.github.io/environment/install-ansible/&quot; target=&quot;_blank&quot;&gt;アンシブルインストール&lt;/a&gt;を見てください。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;このブログは上の2つのブログの内容を実行したと仮定して説明します。&lt;/p&gt; &lt;h2 id=&quot;アンシブルプレイブック生成&quot;&gt;アンシブルプレイブック生成&lt;/h2&gt; &lt;p&gt;現在&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが存在するフォルダへ```ansible``の名前でフォルダを作ります。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダに&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルを生成します。アンシブル(Ansible)の全ての内容は&lt;code class=&quot;highlighter-rouge&quot;&gt;ヤムル(yml)&lt;/code&gt;ファイル形式と文法で作ります。だから、&lt;code class=&quot;highlighter-rouge&quot;&gt;ヤムル(yml)&lt;/code&gt;で使える全てのことが使えます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- playbook.yml |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;ファイルはアンシブル(Ansible)のスタート点です。&lt;code class=&quot;highlighter-rouge&quot;&gt;playbook.yml&lt;/code&gt;を下のように作成します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;init&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;以前のブログでも紹介したがアンシブル(Ansible)はインフラに関する全般的な自動化ツールです。したがって、ローカルサーバー(local server)以外でもリモートサーバー(remote server)のインフラも管理することが出来ます。&lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt;はアンシブル(Ansible)を使ってインフラを構築する対象、つまりローカル(local server)やリモートサーバー(remote server)を指定することができます。私たちは現在開発サーバーを構築してるので&lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;を設定します。&lt;/p&gt; &lt;p&gt;アンシブル(Ansible)は１つのプレイブック(playbook)ファイルで全てのインフラ構築内容を定義することもできますが&lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt;を使って複数のファイルで管理することも可能です。&lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt;下に分離して管理したいフォルダリストを設定します。このブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;フォルダを1つ生成する予定ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;- init&lt;/code&gt;を追加しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- ansible | |-- init | | |-- tasks | | | |-- main.yml | |-- playbook.yml |-- Vagrantfil &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible&lt;/code&gt;フォルダ下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;init/tasks/main.yml&lt;/code&gt;ファイルを生成した下記の内容を追加します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Make app directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/var/www state=directory mode=0755&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Symbolic link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant dest=/var/www/vhosts state=link&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set timezone to Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update and upgrade apt packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache_valid_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install basic packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unzip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)のコマンドを一つ一つ見てみます。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Make app directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path=/var/www state=directory mode=0755&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;これがアンシブル(Ansible)の1つのコマンドです。&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;は現在のコマンドを区分するためものでこのコマンドはアンシブル(Ansible)の&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;コマンドを使ってフォルダを生成する部分です。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Symbolic link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=/vagrant dest=/var/www/vhosts state=link&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;フォルダを管理をするため&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;フォルダと&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/vhosts&lt;/code&gt;フォルダを連携します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set timezone to Asia/Tokyo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Asia/Tokyo&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ローカルサーバーのタイムゾーン(timezone)を設定します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Update and upgrade apt packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache_valid_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packages&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Linuxのパッケージ管理ツールの&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;をアップデートします。&lt;code class=&quot;highlighter-rouge&quot;&gt;become: true&lt;/code&gt;で管理者権限(root)でこのアンシブル(Ansible)コマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install basic packages&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unzip&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update_cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;あとで必要な基本プログラム(git, unzip)をインストールします。&lt;/p&gt; &lt;h2 id=&quot;vagrantfile修正&quot;&gt;Vagrantfile修正&lt;/h2&gt; &lt;p&gt;既存の&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;に下記の内容を追加します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; ... sudo ansible-playbook /vagrant/ansible/playbook.yml &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SHELL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;以前のブログで使ったプロビジョンシェル(provision shell)に&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook /vagrant/ansible/playbook.yml&lt;/code&gt;を追加しました。今から&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant provision&lt;/code&gt;コマンドを実行すると私たちが作ったアンシブルプレイブック(Ansible Playbook)が自動に実行されます。&lt;/p&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;config.vm.synced_folder &quot;.&quot;, &quot;/vagrant&quot;&lt;/code&gt;コマンドを使ってローカルマシン(host system)のフォルダを仮想マシン(guest system)の&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;へアップロードして同期化(sync)します。今からはローカルマシン(host system)でファイルを修正したら仮想マシン(guest system)へ自動に反映されます。&lt;/p&gt; &lt;h2 id=&quot;テスト&quot;&gt;テスト&lt;/h2&gt; &lt;p&gt;今まで作ったアンシブルプレイブック(Ansible Playbook)とVagrantfileを使って自動でサーバーを設定してみましょう。既存の仮想マシン(guest system)が起動中だったら下記のvagrantコマンドで仮想マシン(guest system)を削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のvagrantコマンドで仮想マシン(guest system)を生成します。このように生成したら以前と違って私たちが作成したアンシブルプレイブック(Ansible Playbook)が起動してることをコンソール(console)で確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成されたら下記のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドでVagrantfileとアンシブルプレイブック(Ansible Playbook)が上手く動作したかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /vagrant &lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; unzip &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;今回のブログではアンシブルプレイブック(Ansible Playbook)を使って仮想マシン(guest system)へ基本的必要なプログラムをインストールしてみました。これを通じてアンシブルプレイブック(Ansible Playbook)をどうやって使うかもみました。また&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを修正して仮想マシン(guest system)を生成する時アンシブルプレイブック(Ansible Playbook)を自動に実行されるように作ったりVagrantfileが実行されたフォルダと仮想マシン(Ansible Playbook)の&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;フォルダと同期化する方法もみてみました。&lt;/p&gt; &lt;p&gt;アンシブルプレイブック(Ansible Playbook)をもっと上手く使う必要がありますが、私たちは単純に使ってるのでちょっと恥ずかしいですね。下にアンシブルのドキュメント(Ansible Document)サイトのリンクを紹介します。そのドキュメントをみってもっと美しくアンシブル(Ansible)を使ってみてください。&lt;/p&gt; &lt;p&gt;次のブログではdockerの開発環境を追加してみます。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;アンシブルドキュメント(Ansible Document): &lt;a href=&quot;https://docs.ansible.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://docs.ansible.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログでインストールしたアンシブル(Ansible)のプレイブック(Playbook)を使ってサーバーを構築します。基本的にサーバー構築へ必要なプログラムインストールや設定をするためアンシブルプレイブック(Ansible Playbook)を使う予定です。このブログでは基本的vagrantを使って仮想マシン(guest system)を作ってその中にアンシブル(Ansible)をインストールして進めます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/ansible-playbook.jpg"/></entry><entry xml:lang="ja"><title type="html">Firebase Analytics</title><link href="https://dev-yakuza.github.io/react-native/react-native-firebase-analytics/" rel="alternate" type="text/html" title="Firebase Analytics"/><published>2018-11-26T00:00:00+09:00</published><updated>2018-11-29T17:47:41+09:00</updated><id>https://dev-yakuza.github.io/react-native/firebase-analytics-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-firebase-analytics/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する方法を説明しました。以前のブログでも話ししましたが、ファイアベースアナリティクス(Firebase Analytics)は&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定するだけで自動に分析をしてくれます。しかし、私たちが実際ファイアベースアナリティクス(Firebase Analytics)で分析結果を見た結果、自動で分析されたものでは足りないところが多くて今回のブログを作成することにしました。&lt;/p&gt; &lt;p&gt;今回のブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を使ってファイアベースアナリティクス(Firebase Analytics)でもっと詳しく分析するための方法について説明します。&lt;/p&gt; &lt;h2 id=&quot;ライブラリ設定&quot;&gt;ライブラリ設定&lt;/h2&gt; &lt;p&gt;ここで説明する内容は&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリを使ってファイアベースアナリティクス(Firebase Analytics)です。したがって、基本的に&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;を設定する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt;を参考してください。このブログでは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリ設定については省略します。&lt;/p&gt; &lt;h2 id=&quot;デバッグビューdebugview&quot;&gt;デバッグビュー(DebugView)&lt;/h2&gt; &lt;p&gt;ファイアベースアナリティクス（Firebase Analytics）はアプリが記録するイベントを約1時間の間に収集した後、一括アップロードします。したがって、分析されたデータを見るためには約1時間の時間を待てる必要があります。しかし、開発する時、テストする時こんな時間を待てる時間がないです。だから、ファイアベースアナリティクス(Firebase Analytics)はデバッグが可能なデバッグビュー(DebugView)を提供してます。デバッグビュー(DebugView)を利用したら収集したデータのアップロード時間を最小化してほぼリアルタイムで分析をすることができます。&lt;/p&gt; &lt;p&gt;今後&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;ライブラリの機能を使ってファイアベースアナリティクス(Firebase Analytics)で追加する分析機能たちをすぐに確認できるようにデバッグビュー（DebugView)を設定して進めます。&lt;/p&gt; &lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)でデバッグビュー(DebugView)機能を使うためにiOSで下記のような設定をします。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/[project].xcworkspace&lt;/code&gt;ファイルを開いてxcodeを実行します。&lt;/li&gt; &lt;li&gt;上部のメニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme...&lt;/code&gt;を選択します。 &lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme.png&quot; alt=&quot;xcode edit scheme&quot; /&gt;&lt;/li&gt; &lt;li&gt;アクティブされた&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit schema...&lt;/code&gt;ウィンドウの左メニュー中で&lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt;を選択して右の&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;タブを選択します。 &lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme-arguments.png&quot; alt=&quot;edit scheme arguments&quot; /&gt;&lt;/li&gt; &lt;li&gt;選択した&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;タブ中にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments Passed On Launch&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して下の内容を追加します。(マイナス(&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;)符号も一緒にコピペします。) &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;-FIRDebugEnabled&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/edit-scheme-FIRDebugEnabled.png&quot; alt=&quot;edit scheme arguments FIRDebugEnabled&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt; &lt;p&gt;アンドロイドはiOSよりもっとシンプルです。アンドロイドエミュレータ(Android Emulator)やデバイス(Device)を起動して下記のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell setprop debug.firebase.analytics.app &amp;lt;package_name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;を中止したいときは下のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell setprop debug.firebase.analytics.app .none. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;テスト&quot;&gt;テスト&lt;/h3&gt; &lt;p&gt;まずファイアベースコンソル(Firebase Console)のファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;メニューへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/firebase-analytics-debugview.png&quot; alt=&quot;firebase analytics debugview&quot; /&gt;&lt;/p&gt; &lt;p&gt;現在はiOS, Android両方起動してない状態ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;が待機状態であります。iOSやアンドロイドを起動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/debugview-analytics.png&quot; alt=&quot;firebase analytics debugview analytics&quot; /&gt;&lt;/p&gt; &lt;p&gt;しばらくして上のようなほぼリアルタイムで分析される画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;画面分析&quot;&gt;画面分析&lt;/h2&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)でユーザがどんな画面を見たかを記録してくれる&lt;code class=&quot;highlighter-rouge&quot;&gt;screen_view&lt;/code&gt;と呼ぶイベント(Event)があります。&lt;/p&gt; &lt;p&gt;ファイアベースコンソル(Firebase Console)で&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;メニューを選択したら下のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/analytics-events.png&quot; alt=&quot;google firebase console Analytics Events menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面に見える&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt;リストで&lt;code class=&quot;highlighter-rouge&quot;&gt;screen_view&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/analytics-events-screen_view.png&quot; alt=&quot;Firebase Analytics Events screen_view&quot; /&gt;&lt;/p&gt; &lt;p&gt;少しスクロールして下に行ったら&lt;code class=&quot;highlighter-rouge&quot;&gt;User engagement&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen classs&lt;/code&gt;の項目が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_view-class-to-name.png&quot; alt=&quot;Firebase Analytics Events screen_view screen class to screen name&quot; /&gt;&lt;/p&gt; &lt;p&gt;User engagementを&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen class&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen name&lt;/code&gt;で変更します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-no-data.png&quot; alt=&quot;Firebase Analytics Events screen name no data&quot; /&gt;&lt;/p&gt; &lt;p&gt;ここまで来たらなんか足りないことを感じると思います。&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen class&lt;/code&gt;では本当に基本になるclassだけ確認されて&lt;code class=&quot;highlighter-rouge&quot;&gt;Screen name&lt;/code&gt;には何もデータがなくユーザがどんな画面を見たかが分析出来ないです。&lt;/p&gt; &lt;p&gt;それで私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-firebase&lt;/code&gt;が提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;を使ってユーザが見た画面を分析することにしました。&lt;/p&gt; &lt;p&gt;私たちは分析したいアプリの画面へ下記のようなコードを追加しました。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCurrentScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-firebaseが提供する&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;でアプリの画面の名前を入力します。&lt;/p&gt; &lt;p&gt;そしてテストして分析されたら下記のように私たちが&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;で入力したアプリの画面の名前を確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-with-data.png&quot; alt=&quot;Firebase Analytics Events screen name with data&quot; /&gt;&lt;/p&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;でもリアルタイムで分析されることを確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/screen_name-on-debugview.png&quot; alt=&quot;Firebase Analytics Events screen name on debug view&quot; /&gt;&lt;/p&gt; &lt;p&gt;DebugViewでそのイベント(screen_view)を選択したら上のような詳細画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;カスタムイベント分析&quot;&gt;カスタムイベント分析&lt;/h2&gt; &lt;p&gt;上に紹介しした&lt;code class=&quot;highlighter-rouge&quot;&gt;setCurrentScreen&lt;/code&gt;ではユーザが見た画面の分析はできますが、その画面でユーザが何のアクションをしたかはわかりません。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;logEvent&lt;/code&gt;を使ってファイアベースアナリティクス(Firebase Analytics)でカスタムイベント(Custom Event)を分析する方法を説明します。&lt;/p&gt; &lt;p&gt;私たちはファイアベースアナリティクス(Firebase Analytics)で分析したいカスタムイベント(Custom Event)を下のコードを使って追加しました。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_onSpeech&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'onPressSoundButton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;logEventは最初パラメータは英語100文字と特殊文字アンダーバー(_)のみで使えます。(&lt;code class=&quot;highlighter-rouge&quot;&gt;up to 100 characters is the maximum character length supported for event parameters.&lt;/code&gt;)しかし、私たちのアプリは多言語を提供してますのでどの言語でどんなアクションをしたかを分析したくなりました。そして２つ目のパラメータを使ってカスタムイベント(Custom Event)でカスタムパラメータ(Custom Parameter)を追加しました。２つ目のパラメータはオブジェクト(Object)タイプですので自由にカスタムパラメータ(Custom Parameter)を作って分析に活用することができます&lt;/p&gt; &lt;p&gt;上のようにカスタムイベント(Custom Event)へカスタムパラメータ(Custom Parameter)を追加したらファイアベースコンソル(Firebase Console)でも追加する必要があります。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-event-custom-parameter.png&quot; alt=&quot;Firebase Analytics Events custom event&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt;メニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;へ移動してイベント(Event)リスト中で追加したカスタムイベント(Custom Event)へマウスを移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-menu.png&quot; alt=&quot;Firebase Analytics custom parameter menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;マウスを移動したらその項目の右へ&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;ボタンが表示されます。そのボタンを押して見えるメニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit parameter reporting&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-edit-parameter-reporting.png&quot; alt=&quot;Firebase Analytics custom parameter edit parameter reporting&quot; /&gt;&lt;/p&gt; &lt;p&gt;左にある検索バーへ分析したいカスタムイベント(Custom Event)のカスタムパラメータ(Custom Parameter)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;を押してカスタムパラメータ(Custom Parameter)を追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/add-custom-parameter.png&quot; alt=&quot;Firebase Analytics add custom parameter&quot; /&gt;&lt;/p&gt; &lt;p&gt;追加が完了されたらテストを進めます。データが溜まった後（約1日）、&lt;code class=&quot;highlighter-rouge&quot;&gt;Events&lt;/code&gt;メニューで追加したカスタムイベント(Custom Event)を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter.png&quot; alt=&quot;Firebase Analytics custom parameter&quot; /&gt;&lt;/p&gt; &lt;p&gt;少しスクロールして下に行くと私たちが追加したカスタムパラメータ(Custom Parameter)の分析結果を確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom-parameter-result.png&quot; alt=&quot;Firebase Analytics custom parameter result&quot; /&gt;&lt;/p&gt; &lt;p&gt;ファイアベースアナリティクス(Firebase Analytics)の&lt;code class=&quot;highlighter-rouge&quot;&gt;DebugView&lt;/code&gt;でもリアルタイムで分析されることが確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-analytics/custom_event-on-debugview.png&quot; alt=&quot;Firebase Analytics Events custom event on debug view&quot; /&gt;&lt;/p&gt; &lt;p&gt;DebugViewでそのカスタムイベント(Custom Event)を選択したら上のように追加したカスタムパラメータ(Custom Parameter)が一緒に見える詳細画面が見えます。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;ファイアベースデバッグイベント: &lt;a href=&quot;https://firebase.google.com/docs/analytics/debugview&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com/docs/analytics/debugview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;react-native-firebase: &lt;a href=&quot;https://rnfirebase.io/docs/v5.x.x/analytics/reference/analytics&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://rnfirebase.io/docs/v5.x.x/analytics/reference/analytics&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログFirebase Admobでreact-native-firebaseを設定する方法を説明しました。以前のブログでも話ししましたが、ファイアベースアナリティクス(Firebase Analytics)はreact-native-firebaseを設定するだけで自動に分析をしてくれます。しかし、私たちが実際ファイアベースアナリティクス(Firebase Analytics)で分析結果を見た結果、自動で分析されたものでは足りないところが多くて今回のブログを作成することにしました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-firebase-analytics.jpg"/></entry><entry xml:lang="ja"><title type="html">アンシブルインストール</title><link href="https://dev-yakuza.github.io/environment/install-ansible/" rel="alternate" type="text/html" title="アンシブルインストール"/><published>2018-11-26T00:00:00+09:00</published><updated>2018-12-04T09:37:44+09:00</updated><id>https://dev-yakuza.github.io/environment/install_ansible-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/install-ansible/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;アンシブル(Ansible)を説明すると本一冊が必要です。私たちもそんな詳しく知らなく別の人に説明するレベルでもないので詳しくは説明できないですが私たちが使ってる方法を紹介することでアンシブル(Ansible)を紹介してみようかと思います。アンシブル(Ansible)を簡単に説明したらインフラに関する全般的な自動化ツールです。インストール(installation)やデプロイ(deploy)など様々なことを自動化することができます。このブログではvagrantへアンシブル(Ansible)をインストールする方法に関して説明します。&lt;/p&gt; &lt;p&gt;このブログポストはPCへvirtualbox, vagrantがインストールされた環境を対象にしてます。virtualbox, vagrantをインストールする方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/environment/vagrant-install-and-usage/&quot; target=&quot;_blank&quot;&gt;vagrantインストールや使い方&lt;/a&gt;を確認してください。&lt;/p&gt; &lt;h2 id=&quot;仮想マシン設定生成&quot;&gt;仮想マシン設定生成&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドで仮想マシン(guest system)を設定します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrantコマンドを実行したフォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが生成されたことが確認できます。下は&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;でコメントアウト(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)を削除した内容です。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン生成や確認&quot;&gt;仮想マシン生成や確認&lt;/h2&gt; &lt;p&gt;下のvagrantコマンドで仮想マシン(guest system)を生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;仮想マシン(guest system)が生成されたら下のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;アンシブルインストール設定&quot;&gt;アンシブルインストール設定&lt;/h2&gt; &lt;p&gt;仮想マシン(guest system)中で下のコマンドで実行したらまだアンシブル(Ansible)がインストールされてないことが確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを開いて下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inline: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; sudo apt-get update sudo apt-get install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt-get install ansible --yes &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; SHELL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;プロビジョンシェル(provision shell)は仮想マシン(guest system)へスクリプトをアップロードして実行できるようにします。vagrantのプロビジョンシェル(provision shell)へアンシブル(Ansible)のインストールスクリプトを追加します。&lt;/p&gt; &lt;h2 id=&quot;アンシブルインストール&quot;&gt;アンシブルインストール&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドをローカルマシン(host system)で実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant provision &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そしてまた仮想マシン(guest system)に接続した後アンシブル(Ansible)がインストールされたことを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;問題なくアンシブル(Ansible)がインストールされたら下記のようにアンシブル(Ansible)のバージョンば確認できます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible 2.7.2 config file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/ansible/ansible.cfg configured module search path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'/home/vagrant/.ansible/plugins/modules'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'/usr/share/ansible/plugins/modules'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ansible python module location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/lib/python2.7/dist-packages/ansible executable location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/bin/ansible python version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.7.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Dec 4 2017, 14:50:18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GCC 5.4.0 20160609] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今回はプロビジョンシェル(provision shell)でアンシブル(Ansible)を設定しなくて仮想マシン(guest system)を作った後プロビジョンシェル(provision shell)を入力してvagrantコマンド(&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant provision&lt;/code&gt;)でアンシブル(Ansible)をインストールしました。&lt;/p&gt; &lt;p&gt;しかし、別のPCや新しく環境を再構築しする時はさらにプロビジョンシェル(provision shell)が設定された&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを利用するので&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;コマンドを実行するだけでアンシブル(Ansible)がインストールされます。&lt;/p&gt; &lt;p&gt;確認するため下記のvagrantコマンドで仮想マシン(guest system)を削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また下のvagrantコマンドで仮想マシン(guest system)を生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;生成されたら下記のvagrantコマンドで仮想マシン(guest system)へ接続します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)がインストールされたか確認するため下のコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンシブル(Ansible)が問題なくインストールされたら下記のような画面をまた見ることができます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible 2.7.2 config file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/ansible/ansible.cfg configured module search path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'/home/vagrant/.ansible/plugins/modules'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'/usr/share/ansible/plugins/modules'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ansible python module location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/lib/python2.7/dist-packages/ansible executable location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/bin/ansible python version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.7.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Dec 4 2017, 14:50:18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GCC 5.4.0 20160609] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;今回のブログではVagrantfileファイルを使ってvagrantへアンシブル(Ansible)をインストールする方法について見ました。アンシブル(Ansible)を上手く使ってる方はなぜこのようにしてるか疑問があると思います。普通はアンシブル(Ansible)をローカルマシン(host system)へインストールして仮想マシン(guest system)へインフラを構築するため使う方が多いと思います。しかし、まだウィンドウズ(Windows)はアンシブル(Ansible)を提供しないので私たちはこのような方法を選べました。次のブログではアンシブル(Ansible)を使って開発環境を構築する方法を紹介します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 アンシブル(Ansible)を説明すると本一冊が必要です。私たちもそんな詳しく知らなく別の人に説明するレベルでもないので詳しくは説明できないですが私たちが使ってる方法を紹介することでアンシブル(Ansible)を紹介してみようかと思います。アンシブル(Ansible)を簡単に説明したらインフラに関する全般的な自動化ツールです。インストール(installation)やデプロイ(deploy)など様々なことを自動化することができます。このブログではvagrantへアンシブル(Ansible)をインストールする方法に関して説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/install-ansible.jpg"/></entry><entry xml:lang="ja"><title type="html">vagrantインストールや使い方</title><link href="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/" rel="alternate" type="text/html" title="vagrantインストールや使い方"/><published>2018-11-25T00:00:00+09:00</published><updated>2018-11-26T18:26:00+09:00</updated><id>https://dev-yakuza.github.io/environment/vagrant_install_and_usage-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;virtualboxインストール&quot;&gt;virtualboxインストール&lt;/h2&gt; &lt;p&gt;vagrantは仮想マシンを簡単に作って管理してくれるツールです。つまり、仮想環境の上に仮想マシンをインストールして管理してくれるツールです。したがって、仮想マシンを実行する仮想環境はvagrantの管理外です。仮想環境を作ってくれる色んなツールがありますがここではvirtualboxを使って紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvirtualboxのダウンロードページへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;virtualbox: &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下記のような画面で自分のPCにダウンロードファイルをダウンロードしてインストールします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_download.png&quot; alt=&quot;virtualbox donwload page&quot; /&gt;&lt;/p&gt; &lt;p&gt;virtaulboxダウンロードやインストールするプロセスは一般的なソフトをインストールする方法と同じなのでここでは説明を省略します。&lt;/p&gt; &lt;p&gt;インストールを完了してvirtualboxを実行したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_installed.png&quot; alt=&quot;virtualbox installed&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;vagrantインストール&quot;&gt;vagrantインストール&lt;/h2&gt; &lt;p&gt;virtualboxインストールで今からは仮想環境を作ることが可能になりました。今度は仮想環境で実行される仮想マシンを簡単に作ってくれるvagrantのインストール方法を紹介します。&lt;/p&gt; &lt;p&gt;下のリンクを押してvagrantダウンロードサイトへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrant: &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上のリンクを押してvagrantダウンロードサイトへ移動したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/vagrant_site.png&quot; alt=&quot;vagrant download site&quot; /&gt;&lt;/p&gt; &lt;p&gt;自分のPCのOSに合うインストールファイルを選択してダウンロードします。今回もvagrantのダウンロードやインストール方法は一般的ソフトをダウンロドしてインストールする方法と同じなので説明を省略します。&lt;/p&gt; &lt;p&gt;インストールが終わったら下記のコマンドを実行してvagrantがインストールされたかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrantがインストールされたら下のようにvagratのバージョンの確認が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vagrant 2.2.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;box追加&quot;&gt;box追加&lt;/h2&gt; &lt;p&gt;vagrantが仮想マシンを作るために使うboxを追加します。boxは仮想マシンになるOSやOSへ含めてるソフトを集めたパッケージです。下記は基本になる公式boxとvagrantユーザーたちが作ったboxのサイトです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式boxサイト: &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;&lt;/li&gt; &lt;li&gt;ユーザーboxサイト: &lt;a href=&quot;http://www.vagrantbox.es/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドでboxを自分のPCへ追加します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式box追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos/7 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;ユーザーbox追加&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos66 https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.0.0/centos-6.6-x86_64.box &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは公式boxの&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;を使う予定です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;:&lt;a href=&quot;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;下のvagrantコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;boxを自分のPCへ追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のvagrantコマンドで追加されたboxのリストを確認することが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;もしboxを間違って追加したら下記のvagrantコマンドで追加されたboxを消すことが出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box remove bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン設定生成&quot;&gt;仮想マシン設定生成&lt;/h2&gt; &lt;p&gt;下記のvagrantコマンドでvagrantと追加したboxを使って仮想マシンを設定生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# mkdir create your project folder&lt;/span&gt; mkdir temp &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;コマンドを実行したフォルダ(temp)へ&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルが生成されたことを確認出来ます。下記はコメントアウト(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)を消した&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;の内容です。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン生成&quot;&gt;仮想マシン生成&lt;/h2&gt; &lt;p&gt;上で作った&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;を下のvagrantコマンドでvagrantを使って仮想マシンを生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちがインストール下&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualbox&lt;/code&gt;を実行して見たら仮想マシンが生成されたことが確認出来ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox-with-machine.png&quot; alt=&quot;virtualbox with virtual machine&quot; /&gt;&lt;/p&gt; &lt;p&gt;下記のvagrantコマンドで仮想マシンへ接続が出来ます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドで仮想マシンからローカルPC環境に戻ることも可能です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン中止&quot;&gt;仮想マシン中止&lt;/h2&gt; &lt;p&gt;仮想マシンを中止したい時は、下記のvagrantコマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant halt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;仮想マシン削除&quot;&gt;仮想マシン削除&lt;/h2&gt; &lt;p&gt;仮想マシンがもういらない時、下記のvagrantコマンドで仮想マシンを削除します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;これでvagrantを使って仮想マシンを生成する方法を見てみました。今後は&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;ファイルを修正したら仮想マシン中へ開発環境を構築する方法を紹介する要諦です。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 バックエンド(backend) - サーバーを開発するためサーバーは同一な環境を構築しようとします。ここにはvagrantを使って仮想マシンを作る方法を紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/vagrant-install-and-usage.jpg"/></entry><entry xml:lang="ja"><title type="html">iOSシミュレータ変更</title><link href="https://dev-yakuza.github.io/react-native/ios-change-simulator/" rel="alternate" type="text/html" title="iOSシミュレータ変更"/><published>2018-11-23T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-change-simulator-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-change-simulator/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;RN(react native)でアプリを開発する時いつも下記のコマンドでiOSを開発します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;開発する時は特に問題ないですが開発が終わって様々なデバイス(device)でテストしたい時はいつも不便でした。だから、コマンドを使ってシミュレータ(simulator)を変更する方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;iosシミュレータ確認&quot;&gt;iOSシミュレータ確認&lt;/h2&gt; &lt;p&gt;現在使用可能なiOSシミュレータ(simulator)を確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl list devices &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;シミュレータ変更&quot;&gt;シミュレータ変更&lt;/h2&gt; &lt;p&gt;下のコマンドを使って使用したいシミュレータ(simulator)をRN(react native)を実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のコマンドリストはシミュレータ(simulator)を変更する例です。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone SE&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone X&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XR&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS Max&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air 2&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Pro&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 RN(react native)でアプリを開発する時いつも下記のコマンドでiOSを開発します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-change-simulator.jpg"/></entry><entry xml:lang="ja"><title type="html">アンドロイドビルドやテスト</title><link href="https://dev-yakuza.github.io/react-native/android-running-on-device/" rel="alternate" type="text/html" title="アンドロイドビルドやテスト"/><published>2018-11-21T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-running-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-running-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今まで開発したRN(react native)をアンドロイド(Android)用でビルドしてデバイスへ上げてテストする方法を紹介します。ここにはMac(マック)でアンドロイド(Android)署名キー(Signing Key)を生成してビルドする要諦です。このブログはRN(react native)公式サイトを参考しましたので詳しく内容は公式サイトを参考してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/signed-apk-android&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/signed-apk-android&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンドロイド署名キー生成&quot;&gt;アンドロイド署名キー生成&lt;/h2&gt; &lt;p&gt;Macで&lt;code class=&quot;highlighter-rouge&quot;&gt;ターミナル&lt;/code&gt;プログラムを開いてRN(react native)プロジェクトフォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへ移動します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;your path]/android/app &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のコマンドでアンドロイド(Android)用署名キー(Signing Key)を発行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/span&gt; keytool &lt;span class=&quot;nt&quot;&gt;-genkey&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key-name].keystore &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyalg&lt;/span&gt; RSA &lt;span class=&quot;nt&quot;&gt;-keysize&lt;/span&gt; 2048 &lt;span class=&quot;nt&quot;&gt;-validity&lt;/span&gt; 10000 Enter keystore password: Re-enter new password: What is your first and last name? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organizational unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organization? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your City or Locality? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your State or Province? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the two-letter country code &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: Is &lt;span class=&quot;nv&quot;&gt;CN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;OU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt; correct? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;no]: Enter key password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &amp;lt;my-key-alias&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RETURN &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;same as keystore password&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;全てを入力したらRN(react native)プロジェクトフォルダ下ある&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;my-release-key.keystore&lt;/code&gt;ファイルが生成されたことが確認できます。&lt;/p&gt; &lt;h2 id=&quot;署名キー設定&quot;&gt;署名キー設定&lt;/h2&gt; &lt;p&gt;署名キー(Signing Key)が生成されたら&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;へキーを設定する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;android/gradle.properties&lt;/code&gt;ファイルを開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MYAPP_RELEASE_STORE_FILE=my-release-key.keystore MYAPP_RELEASE_KEY_ALIAS=my-key-alias MYAPP_RELEASE_STORE_PASSWORD=***** MYAPP_RELEASE_KEY_PASSWORD=***** &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコードを&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルへ追加します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... defaultConfig { ... } signingConfigs { release { if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) { storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD } } } buildTypes { release { ... signingConfig signingConfigs.release } } } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ビルド&quot;&gt;ビルド&lt;/h2&gt; &lt;p&gt;RN(react native)があるプロジェクトフォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt;フォルダへ移動した後、下のコマンドでビルドします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ビルドされたファイルは下記のパスが生成されます&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android/app/build/outputs/apk/release/app-release.apk &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちはこの部分で下記のようなエラーが発生しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... Execution failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;task &lt;span class=&quot;s1&quot;&gt;':app:lintVitalRelease'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Lint found fatal errors &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;assembling a release target. ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;いい方法ではないですが、私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルへ下の内容を追加したこの部分を解決しました。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... lintOptions { checkReleaseBuilds false // Or, if you prefer, you can continue to check for errors in release builds, // but continue the build even when errors are found: abortOnError false } ... } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ビルドされたファイルテスト&quot;&gt;ビルドされたファイルテスト&lt;/h2&gt; &lt;p&gt;アンドロイドデバイス(Android Device)でインストールされた既存のアプリを削除して下記のコマンドでビルドファイルのテストを進んでください。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;エラー対応&quot;&gt;エラー対応&lt;/h2&gt; &lt;p&gt;公式サイトの内容を見て上記のように進めましたが私たちは実際下のコマンドでビルドする時と&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下のコマンドで直接デバイスでテストする時、&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のようなエラーが発生しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.RuntimeException: Unable to load script from assets &lt;span class=&quot;s1&quot;&gt;'index.android.bundle'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Make sure your bundle is packaged correctly or you&lt;span class=&quot;s1&quot;&gt;'re running a packager server. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;解決する方法で下のコマンドを先実行して&lt;code class=&quot;highlighter-rouge&quot;&gt;index.android.bundle&lt;/code&gt;を生成した後&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... react-native bundle &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; android &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--entry-file&lt;/span&gt; index.js &lt;span class=&quot;nt&quot;&gt;--bundle-output&lt;/span&gt; android/app/src/main/assets/index.android.bundle ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ビルドをしたり&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;直接デバイスでテストしたりしました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今まで開発したRN(react native)をアンドロイド(Android)用でビルドしてデバイスへ上げてテストする方法を紹介します。ここにはMac(マック)でアンドロイド(Android)署名キー(Signing Key)を生成してビルドする要諦です。このブログはRN(react native)公式サイトを参考しましたので詳しく内容は公式サイトを参考してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-running-on-device.jpg"/></entry><entry xml:lang="ja"><title type="html">アンドロイドデバイステスト</title><link href="https://dev-yakuza.github.io/react-native/android-test-on-device/" rel="alternate" type="text/html" title="アンドロイドデバイステスト"/><published>2018-11-20T00:00:00+09:00</published><updated>2018-11-22T22:41:56+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-test-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-test-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)開発する時やっぱりエミュレータで開発はきついですね。RN(react native)をアンドロイド用に開発する時エミュレータではなくアンドロイド(Android)デバイスでテストできるように設定してみます。RN(react native)をiOSデバイスでテストする方法が知りたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;を確認してください。&lt;/p&gt; &lt;h2 id=&quot;準備物&quot;&gt;準備物&lt;/h2&gt; &lt;p&gt;当然な話ですがRN(react native)プロジェクトをアンドロイド(Android)デバイスでテストするためには下記の準備物が必要です。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アンドロイドスタジオ(Android Studio)&lt;/li&gt; &lt;li&gt;アンドロイド(Android)デバイス&lt;/li&gt; &lt;li&gt;RN(react native)プロジェクト&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;PCへRN(react native)開発環境を設定する方法が知りたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/installation/&quot; target=&quot;_blank&quot;&gt;RNインストル&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイステスト&quot;&gt;アンドロイドデバイステスト&lt;/h2&gt; &lt;p&gt;RN(react native)の公式サイトへRN(react native)をアンドロイド(Android)でテストする方法が詳しく載せています。それをみながらやってみましょう。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/running-on-device&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;アンドロイドデバイス設定&quot;&gt;アンドロイドデバイス設定&lt;/h2&gt; &lt;p&gt;使ってるアンドロイド(Android)デバイスの開発者オプションを有効化する必要があります。アンドロイド(Android)デバイスの&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;デバイス情報&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド番号&lt;/code&gt;を何回か押すと開発者オプションが有効化されます。&lt;/p&gt; &lt;p&gt;開発者オプションが有効化されたら、&lt;code class=&quot;highlighter-rouge&quot;&gt;USBデバッグ&lt;/code&gt;機能を有効化する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;開発オプション&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;USBデバッグ&lt;/code&gt;メニューを選択してUSBデバッグ機能を有効化させます。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイス接続&quot;&gt;アンドロイドデバイス接続&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスをUSBを使ってPCと接続します。アンドロイド(Android)デバイスでUSBでデバッグを許可するか聞かれたら許可してテストできる状態を作ります。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドデバイスで実行&quot;&gt;アンドロイドデバイスで実行&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスが接続された状態でアンドロイドスタジオ(Android Studio)を実行して左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug app&lt;/code&gt;ボタン(虫の上に矢印があるボタン)を押したらエミュレータ以外にも自分のデバイスが見えます。自分のデバイスを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;ボタンを押したら開発したRN(react native)アプリが起動されることが確認できます。&lt;/p&gt; &lt;p&gt;注意：これはデバイスでテストするための実行です。したがって、エミュレータと同じようにPCへRN(react native)の開発サーバーが立ち上がってそのサーバーとデバイスが連動してテストが出来る仕組みです。したがって同じWifi/ネットワークの環境じゃないとデバイスがサーバーを見つかれないのでテストが出来ないです。&lt;/p&gt; &lt;h2 id=&quot;アンドロイド50バージョン以下&quot;&gt;アンドロイド5.0バージョン以下&lt;/h2&gt; &lt;p&gt;テストするデバイスがアンドロイド(Android)バージョン5.0以下の場合、別の設定をする必要があります。下記にある設定で私たちはアンドロイド4.4.2でRN(react native)プロジェクトを起動してテストしました。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルを下記のように修正します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaultConfig { ... ndk { // abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; } } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;アンドロイドスタジオ(Android Studio)を開いて&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;ボタンを押して同期化します。同期化が完了されたらRN(react native)プロジェクトを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;RN(react native)のサーバーがPCで実行されてデバイスにもアプリが上手くインストールされますが、赤画面のエラーが出ます。&lt;/p&gt; &lt;p&gt;デバイスを振って開発者メニュー(Developer Menu)を開きます。開発者メニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Dev Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug server host &amp;amp; port for device&lt;/code&gt;を選択します。IPアドレスとポート(Port)を入力する画面が出ます。そこに自分のIPと8081ポートを入力します。(ex&amp;gt; 10.0.1.1:8081)また開発者メニューへ戻って&lt;code class=&quot;highlighter-rouge&quot;&gt;Reload JS&lt;/code&gt;を押してプロジェクトを再起動します。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)デバイスでRN(react native)を起動する方法を紹介しました。今からは実際のデバイスでテストしてみてください。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 アンドロイド(Android)開発する時やっぱりエミュレータで開発はきついですね。RN(react native)をアンドロイド用に開発する時エミュレータではなくアンドロイド(Android)デバイスでテストできるように設定してみます。RN(react native)をiOSデバイスでテストする方法が知りたい方は以前のブログiOSデバイステストを確認してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-test-on-device.jpg"/></entry><entry xml:lang="ja"><title type="html">Firebase Admob</title><link href="https://dev-yakuza.github.io/react-native/react-native-firebase-admob/" rel="alternate" type="text/html" title="Firebase Admob"/><published>2018-11-17T00:00:00+09:00</published><updated>2018-11-29T17:47:41+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-firebase-admob-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-firebase-admob/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;私たちはグーグルアドモブ(Google Admob)を使ってアプリへ広告を表示しています。以前にはreact-native-admobというライブラリを使いましたが、グーグルアドモブ(Google Admob)以外にもアナリティクス(Analytics)など、色んな機能を使うことのになって、統合的に使えるライブラリを探した結果react-native-firebaseというライブラリを見つけました。&lt;/p&gt; &lt;p&gt;ここにはグーグルファイアベース(Google Firebase)を使って無料でグーグルアドモブ(Google Admob), アナリティクス(Analytics)を使う方法を紹介します。&lt;/p&gt; &lt;p&gt;簡単にグーグルアドモブ(Google Admob)だけ使いたい方は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;下記のリンクはreact-native-firebaseの公式ページです。詳しく内容は公式サイトを確認してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://github.com/invertase/react-native-firebase&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-firebase&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ライブラリインストール&quot;&gt;ライブラリインストール&lt;/h2&gt; &lt;p&gt;下のコマンドを使ってreact-native-firebaseライブラリをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;ライブラリリンク&quot;&gt;ライブラリリンク&lt;/h2&gt; &lt;p&gt;下記のコマンドを使ってreact-native-firebaseライブラリをRN(react native)プロジェクトへ連携します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;firebaseプロジェクト生成&quot;&gt;firebaseプロジェクト生成&lt;/h2&gt; &lt;p&gt;次はグーグルのファイアベース(Google Firebase)へプロジェクトを生成する必要があります。下のリンクを押してグーグルファイアベース(Google Firebase)へ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;グーグルファイアベース(Google Firebase): &lt;a href=&quot;https://firebase.google.com&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase.png&quot; alt=&quot;google firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGN IN&lt;/code&gt;ボタンを押してログインします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-after-login.png&quot; alt=&quot;google firebase after login&quot; /&gt;&lt;/p&gt; &lt;p&gt;ログインしたら右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;GO TO CONSOLE&lt;/code&gt;を押してグーグルファイアベースコンソル(Google Firebase Console)へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console.png&quot; alt=&quot;google firebase console&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)で&lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add project&lt;/code&gt;を押してプロジェクトを追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-add-project.png&quot; alt=&quot;google firebase console add project&quot; /&gt;&lt;/p&gt; &lt;p&gt;プロジェクト情報を追加した後&lt;code class=&quot;highlighter-rouge&quot;&gt;Create project&lt;/code&gt;ボタンを押してプロジェクトを生成します。&lt;/p&gt; &lt;h2 id=&quot;グーグルアドモブ設定&quot;&gt;グーグルアドモブ設定&lt;/h2&gt; &lt;p&gt;グーグルアドモブ(Google Admob)へ広告を設定する必要があります。グーグルファイアベースコンソル(Google Firebase Console)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Grow&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Admob&lt;/code&gt;を選択したら下記の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-admob.png&quot; alt=&quot;google firebase console admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面の下へ&lt;code class=&quot;highlighter-rouge&quot;&gt;linking your apps in AdMob.&lt;/code&gt;リンクを押してグーグルアドモブ(Google Admob)ページへ移動します。&lt;/p&gt; &lt;p&gt;グーグルアドモブ(Google Admob)へ広告を設定する方法は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;ブログを参考してください。&lt;/p&gt; &lt;h2 id=&quot;firebase-ios-設定&quot;&gt;firebase iOS 設定&lt;/h2&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)でプロジェクトを選択したら下の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project.png&quot; alt=&quot;google firebase console project&quot; /&gt;&lt;/p&gt; &lt;p&gt;中央にある&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;ボタンを押してiOS設定画面へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project-ios.png&quot; alt=&quot;google firebase console project ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;開発したアプリのバンドルID(Bundle ID)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/googleservice-info-plist-download.png&quot; alt=&quot;GoogleService-Info.plist download&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベース(Google Firebase)が生成した&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;ファイルをダウンロードして&lt;code class=&quot;highlighter-rouge&quot;&gt;info.plist&lt;/code&gt;と同じ位置へコピーします。&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt;ファイルの追加が終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/add-firebase-sdk.png&quot; alt=&quot;add Firebase SDK&quot; /&gt;&lt;/p&gt; &lt;p&gt;画面へ表示したようにグーグルファイアベースSDK(Google Firebase SDK)をRN(react native)プロジェクトへ追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod init &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)を追加します。&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blaboo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Uncomment the next line if you're using Swift or would like to use dynamic frameworks&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use_frameworks!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for blaboo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Core'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/AdMob'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blabooTests'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inherit!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:search_paths&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)をインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install &lt;span class=&quot;c&quot;&gt;# pod update&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/edit-appdelegate.png&quot; alt=&quot;edit appdelegate.m for firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトの&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelete.m&lt;/code&gt;ファイルを上のようにコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)をインポートします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIRApp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GADMobileAds&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configureWithApplicationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031~8295071692&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルファイアベースSDK(Google Firebase SDK)を初期化します。その後グーグルアドモブ(Google Admob)のアプリID(App ID)を入力してグーグルアドモブ(Google Admob)を初期化します。グーグルアドモブのアプリID(App ID)を取得する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/connect-firebase-to-app.png&quot; alt=&quot;connect firebase to app&quot; /&gt;&lt;/p&gt; &lt;p&gt;私たちはこの部分では&lt;code class=&quot;highlighter-rouge&quot;&gt;Skip this step&lt;/code&gt;を押してスキップしました。&lt;/p&gt; &lt;h2 id=&quot;firebaseアンドロイドandroid設定&quot;&gt;firebaseアンドロイド(Android)設定&lt;/h2&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)へ左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Project Overview&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/firebase-project-overview.png&quot; alt=&quot;Google Firebase Console Project Overview&quot; /&gt;&lt;/p&gt; &lt;p&gt;上部へ&lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add app&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;アンドロイド(Android)アイコン&lt;/code&gt;を押してアンドロイドプロジェクト設定へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/register-android.png&quot; alt=&quot;Google Firebase Android app register&quot; /&gt;&lt;/p&gt; &lt;p&gt;アンドロイドパッケージ名(Android Package Name)を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt;を押します。&lt;/p&gt; &lt;p&gt;RN(react native)でアンドロイドパッケージ名を修正したい方は下の項目を進んでください。&lt;/p&gt; &lt;h3 id=&quot;アンドロイドパッケージ名修正&quot;&gt;アンドロイドパッケージ名修正&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/BUCK&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android_build_config( ... package = &quot;package_name&quot;, ) ... android_resource( ... package = &quot;package_name&quot;, ... ) ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/AndroindManifest.xml&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainActivity.java&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native)プロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainApplication.java&lt;/code&gt;ファイル修正&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/set-google-services-json.png&quot; alt=&quot;Google Firebase google-services.json setting&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルファイアベース(Google Firebase)が作った&lt;code class=&quot;highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt;ファイルをRN(react native)プロジェクトの&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt;フォルダへコピーします。その後、&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;ボタンを押して次へ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/setting-android.png&quot; alt=&quot;Google Firebase setting on android&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトがあるフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/build.gradle&lt;/code&gt;を開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Add this line&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms:google-services:4.0.1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;へ&lt;code class=&quot;highlighter-rouge&quot;&gt;google()&lt;/code&gt;が入ってるか&lt;code class=&quot;highlighter-rouge&quot;&gt;jcenter()&lt;/code&gt;のより上にあるか確認します。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトがあるフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;ファイルを開いて下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.gms:play-services-base:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.firebase:firebase-core:16.0.4'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.firebase:firebase-ads:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そして同じファイルの一番下へ下記のコードを追加します。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms.google-services'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;googleservices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GoogleServicesPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableVersionCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/[app name]/MainApplication.java&lt;/code&gt;ファイルへ下のソースを追加します。&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.invertase.firebase.RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.invertase.firebase.admob.RNFirebaseAdMobPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.invertase.firebase.analytics.RNFirebaseAnalyticsPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebaseAdMobPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebaseAnalyticsPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileAds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ca-app-pub-7987914246691031~9800293270&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のソースで&lt;code class=&quot;highlighter-rouge&quot;&gt;MobileAds.initialize(this, &quot;ad app id&quot;);&lt;/code&gt;部分へグーグルアドモブ(Google Admob)で生成下アプリアイディ(App ID)を追加します。グーグルアドモブ(Google Admob)のアプリアイディ(App ID)を生成する方法は以前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;グーグルアドモブ(Google Admob)&lt;/a&gt;を参考してください。&lt;/p&gt; &lt;p&gt;アンドロイドスタジオ(Android Studio)を開いて&lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;を同期化するか聞いてくれたら&lt;code class=&quot;highlighter-rouge&quot;&gt;Sync now&lt;/code&gt;を押して同期化します。&lt;/p&gt; &lt;h2 id=&quot;ソース追加&quot;&gt;ソース追加&lt;/h2&gt; &lt;p&gt;react-native-firebaseの設定は完了しました。今からRN(react native)のソースコードを修正してグーグルアドモブ(Google Admob)が上手く表示されるようにします。&lt;/p&gt; &lt;p&gt;下のソースはreact-native-firebaseを使ってbannerを表示する例です。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-firebaseをローディングします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unitId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031/7659403606&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SMART_BANNER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAdLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Advert loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のようにソースコードを追加してRN(react native)プロジェクトを実行したらバナーが上手く表示されることを確認することができます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;RN(react native)プロジェクトへreact-native-firebaseライブラリを使ってグーグルアドモブ(Google Admob)を適用する方法をみてみました。これでreact-native-firebaseを設定したらアナリティクス(Analytics)は自動に設定されて分析することができます。&lt;/p&gt; &lt;p&gt;グーグルファイアベースコンソル(Google Firebase Console)のメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt;を押してみたら、分析してることが確認できます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/react-native-firebase-analytics.png&quot; alt=&quot;react native firebase analytics&quot; /&gt;&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 私たちはグーグルアドモブ(Google Admob)を使ってアプリへ広告を表示しています。以前にはreact-native-admobというライブラリを使いましたが、グーグルアドモブ(Google Admob)以外にもアナリティクス(Analytics)など、色んな機能を使うことのになって、統合的に使えるライブラリを探した結果react-native-firebaseというライブラリを見つけました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-firebase-admob.jpg"/></entry><entry xml:lang="ja"><title type="html">jekyll-last-modified-at</title><link href="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/" rel="alternate" type="text/html" title="jekyll-last-modified-at"/><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今まで管理してるこのブログの&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;は&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;これを使ってビルドする時点の日付を全てのページへ反映していました。しかし実際更新してないファイルもビルドした時点の時間が入るから全てのファイルを再クローリングして実際更新したファイルのクローリングが遅くなるんじゃないかなと思いました。それで今回&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;プラグインを使って実際ファイルが修正された場合&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;へ反映するように修正しました。&lt;/p&gt; &lt;h2 id=&quot;プラグイン&quot;&gt;プラグイン&lt;/h2&gt; &lt;p&gt;下にあるリンクを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;のサイトへ行ったら全ての説明が詳しくあります。それを見ながらやってみます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;jekyll-last-modified-at: &lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/gjtorikian/jekyll-last-modified-at&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;プラグインインストル&quot;&gt;プラグインインストル&lt;/h2&gt; &lt;p&gt;下のコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;ぷログインをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-last-modified-at &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt; &lt;p&gt;ファイルの修正日を表示したい部分で下記のコード中の一つを選べって入れます。&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {% last_modified_at %} {% last_modified_at %Y:%B:%A:%d:%S:%R %} {{ page.last_modified_at }} {{ page.last_modified_at | date: '%Y:%B:%A:%d:%S:%R' }} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは使ってる&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;を下のように修正しました。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt; --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ post.last_modified_at | date: '%Y-%m-%d' }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;確認&quot;&gt;確認&lt;/h2&gt; &lt;p&gt;実際プロジェクトをビルドして入れたコードを確認した結果、実際ファイルを修正した日付が上手く表示してることを確認しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルのクローリングに影響があるかは分からないけど実際の時間を表示するように修正したのでプログラマー的に上手く仕事したんじゃないかなと思って嬉しいです。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今まで管理してるこのブログのsitemap.xmlは</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/jekyll/jekyll-last-modified-at.jpg"/></entry></feed>