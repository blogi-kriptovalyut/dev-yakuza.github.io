<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/" rel="alternate" type="text/html"/><updated>2018-11-16T14:29:05+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ja"><title type="html">jekyll-last-modified-at</title><link href="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/" rel="alternate" type="text/html" title="jekyll-last-modified-at"/><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-15T21:51:38+09:00</updated><id>https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今まで管理してるこのブログの&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;は&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;これを使ってビルドする時点の日付を全てのページへ反映していました。しかし実際更新してないファイルもビルドした時点の時間が入るから全てのファイルを再クローリングして実際更新したファイルのクローリングが遅くなるんじゃないかなと思いました。それで今回&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;プラグインを使って実際ファイルが修正された場合&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;へ反映するように修正しました。&lt;/p&gt; &lt;h2 id=&quot;プラグイン&quot;&gt;プラグイン&lt;/h2&gt; &lt;p&gt;下にあるリンクを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;のサイトへ行ったら全ての説明が詳しくあります。それを見ながらやってみます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;jekyll-last-modified-at: &lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/gjtorikian/jekyll-last-modified-at&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;プラグインインストル&quot;&gt;プラグインインストル&lt;/h2&gt; &lt;p&gt;下のコマンドで&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt;ぷログインをインストールします。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-last-modified-at &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt; &lt;p&gt;ファイルの修正日を表示したい部分で下記のコード中の一つを選べって入れます。&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {% last_modified_at %} {% last_modified_at %Y:%B:%A:%d:%S:%R %} {{ page.last_modified_at }} {{ page.last_modified_at | date: '%Y:%B:%A:%d:%S:%R' }} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;私たちは使ってる&lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;を下のように修正しました。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt; --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ post.last_modified_at | date: '%Y-%m-%d' }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;確認&quot;&gt;確認&lt;/h2&gt; &lt;p&gt;実際プロジェクトをビルドして入れたコードを確認した結果、実際ファイルを修正した日付が上手く表示してることを確認しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルのクローリングに影響があるかは分からないけど実際の時間を表示するように修正したのでプログラマー的に上手く仕事したんじゃないかなと思って嬉しいです。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今まで管理してるこのブログのsitemap.xmlは</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/jekyll/jekyll-last-modified-at.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS App store 登録</title><link href="https://dev-yakuza.github.io/react-native/ios-app-store/" rel="alternate" type="text/html" title="iOS App store 登録"/><published>2018-11-13T00:00:00+09:00</published><updated>2018-11-16T14:21:13+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-app-store-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-app-store/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今から開発したアプリをiOSアプリスタア(App Store)へ登録する方法について説明します。ここには無料アプリを登録する時必要な情報が載せております。&lt;/p&gt; &lt;h2 id=&quot;準備項目&quot;&gt;準備項目&lt;/h2&gt; &lt;p&gt;iOSアプリストア(App Store)へ登録するためには下記の項目が必要になります。&lt;/p&gt; &lt;h3 id=&quot;アプリストア情報&quot;&gt;アプリストア情報&lt;/h3&gt; &lt;p&gt;下記にある情報はアプリストア(App store)へ表示される情報です。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;名前(最大 30文字)&lt;/li&gt; &lt;li&gt;サブタイトル(最大 30文字)&lt;/li&gt; &lt;li&gt;プライバシーポリシーURL&lt;/li&gt; &lt;li&gt;プライマ言語(アプリの多言語で対応してない国からアプリを起動した時表示する言語)&lt;/li&gt; &lt;li&gt;カテゴリー x 2&lt;/li&gt; &lt;li&gt;アイホン5.5のアプリスクリンショット&lt;/li&gt; &lt;li&gt;プロモーションテキスト(最大 170文字)&lt;/li&gt; &lt;li&gt;キーワード(最大 100文字)&lt;/li&gt; &lt;li&gt;説明(最大 4000文字)&lt;/li&gt; &lt;li&gt;サポートURL&lt;/li&gt; &lt;li&gt;マーケティングURL&lt;/li&gt; &lt;li&gt;著作権&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;ここで一番難しい項目はプライバシーポリシーURLです。下のリンクはプライバシーポリシーを作る時参考したサイトです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;プライバシーポリシー: &lt;a href=&quot;https://kiyaku.jp/hinagata/privacy.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://kiyaku.jp/hinagata/privacy.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上のリンクを押してプライバシーポリシーを作ってみてください。&lt;/p&gt; &lt;h3 id=&quot;アプリ審査情報&quot;&gt;アプリ審査情報&lt;/h3&gt; &lt;p&gt;下記の情報はアプリ審査のため必要な情報です。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;ログイン情報&lt;/li&gt; &lt;li&gt;連絡先&lt;/li&gt; &lt;li&gt;メーも&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;審査指針&quot;&gt;審査指針&lt;/h2&gt; &lt;p&gt;皆さんもよくしてると思いますがアップルの審査は厳しいです。私たちも簡単なアプリですが今三回落ちって、まだ待てる状態です。下記のリンクはアップルの審査指針です。よく読んでアップルの審査にお落ちないように準備しましょう。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;審査指針: &lt;a href=&quot;https://developer.apple.com/jp/app-store/review/guidelines/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/jp/app-store/review/guidelines/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;スクリンショットサイズ: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/devd274dd925&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;li&gt;アプリプレビューサイズ: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/dev4e413fcb8&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今から開発したアプリをiOSアプリスタア(App Store)へ登録する方法について説明します。ここには無料アプリを登録する時必要な情報が載せております。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-app-store.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS TestFlight</title><link href="https://dev-yakuza.github.io/react-native/ios-testflight/" rel="alternate" type="text/html" title="iOS TestFlight"/><published>2018-11-12T00:00:00+09:00</published><updated>2018-11-15T17:51:38+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-testflight-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-testflight/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;iOSは開発したアプリをリリースする前自分のテスターまたはテストバージョンの公開URLを使ってテストができる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;システムを持ってます。ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使って開発したアプリをテストする方法について話します。&lt;/p&gt; &lt;p&gt;このブログは下記のブログを見て全部終わった方のためです。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-running-on-device/&quot; target=&quot;_blank&quot;&gt;iOSビルドやテスト&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS証明書(Certification)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;アップル開発者プログラムApple Developer Program)の登録や証明書(Certification)の設定が出来てない方は上のブログを参考してください。&lt;/p&gt; &lt;h2 id=&quot;リリース用アプリ生成&quot;&gt;リリース用アプリ生成&lt;/h2&gt; &lt;p&gt;アップルが提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってアプリをテストする場合アプリストアコネクト(Apple Store Connect)にリリース用アプリを生成する必要があります。下記のリンクを押してアプリストアコネクト(App Store Connect)へ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アプリストアコネクト(App Store Connect): &lt;a href=&quot;https://appstoreconnect.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://appstoreconnect.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/app-store-connect.png&quot; alt=&quot;App Store Connect&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプル開発者プログラム(Apple Developer Program)へ登録した開発者アイディでログインします。アプル開発者プログラム(Apple Developer Program)へ登録してない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;のブログを参考して登録してください。&lt;/p&gt; &lt;p&gt;ログインをしたら下記のような画面が見えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;マイAppApp&lt;/code&gt;を押してアプリ管理ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-store-connect-main.png&quot; alt=&quot;アプリストアコネクトメイン&quot; /&gt;&lt;/p&gt; &lt;p&gt;左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;新規App&lt;/code&gt;メニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-list.png&quot; alt=&quot;アプリリスト&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプリ登録画面が出たら、自分のアプリの情報を入力します。よくわからない部分があったら項目の左にある&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;マークを押して内容を確認します。名前とプライマ言語(アプリの多言語で対応してない国からアプリを起動した時表示する言語)は後でも帰れます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-new-app.png&quot; alt=&quot;앱 생성&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;バンドルID: アプリを開発する時使った&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle ID&lt;/code&gt;です。これが何か分からない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOSデバイステスト&lt;/a&gt;を見てください。&lt;/li&gt; &lt;li&gt;SKU: App Storeには表示しないアプリユニークIDです。仏はURL形式で作成します。(ex&amp;gt; io.github.dev-yakuza.blaboo)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-app-menu.png&quot; alt=&quot;アプリメニュー&quot; /&gt;&lt;/p&gt; &lt;p&gt;アプリを生成したら上の画面ようにメニューが見えます。メニュー中&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;メニューを選択します。&lt;/p&gt; &lt;p&gt;開発したアプリを&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってテストするためにはリリース用ビルドが必要になりそのビルドがアプリストアコネクト(App Store Connect)へアップロードする必要があります。&lt;/p&gt; &lt;h2 id=&quot;アプリビルド&quot;&gt;アプリビルド&lt;/h2&gt; &lt;p&gt;開発したアプリをビルドしてアプリストアコネクト(App Store Connect)へアップロードする方法について説明します。すでにビルドしたアプリがある方はこの部分はスキップしても大丈夫です。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名.xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/build-for-production.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;xcodeが実行されたら上部にあるメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt;を選択します。アプリ開発者プログラム(Apple Developer Program)へ登録されてない方や証明書を連携してない方は以前のブログを確認してください。(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;, &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 証明書(Certification)&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;ビルドが無事に終わったら下のような画面が出ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;アプリアップロード&quot;&gt;アプリアップロード&lt;/h2&gt; &lt;p&gt;ビルド完了後、見える画面を閉じた方やすでにビルドしたファイルを持ってる方はxcodeの上部にあるメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Window&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Organizer&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/organizer-menu.png&quot; alt=&quot;organizer menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;メニューまたはビルドを完了したら下の画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;右にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Distribute App&lt;/code&gt;を選択します。アプリをリリースするではなくアプリをアプリストアコネクト(App Store Connect)へアップロードする機能です。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/select-platform.png&quot; alt=&quot;select platfom&quot; /&gt;&lt;/p&gt; &lt;p&gt;開発したアプリをリリースするプラットフォームを選択します。私たちは&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Store&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload-export.png&quot; alt=&quot;upload or export&quot; /&gt;&lt;/p&gt; &lt;p&gt;最後の目的地がアプリストアコネクト(App Store Connect)へアップロードするかipaファイルを出す(export)かを決める画面です。私たちはアプリストアコネクト(App Store Connect)へアップロードする予定ですので&lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/options.png&quot; alt=&quot;options&quot; /&gt;&lt;/p&gt; &lt;p&gt;オプション選択画面です。全てのオプションがチェックされてる状態で&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;を押します。次の画面で生成した証明書とプロビジョニングプロファイル(Provisioning Profile)を選択します。証明書、プロビジョニングプロファイル(Provisioning Profile)生成は以前のブログ(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS証明書(Certification)&lt;/a&gt;)を確認してください。&lt;/p&gt; &lt;p&gt;アップロードの準備がおわたら下の画面が見えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;ボタンを押して準備出来たファイルをアプリストアコネクト(App Store Connect)へアップロードしてください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt; &lt;p&gt;無事にアプリをアプリストアコネクト(App Store Connect)へアップロードしました。アップロードしたファイルを使える準備が出来たらアップルからメールが来ます。アップロードからメール来る時まだちょっと時間がかかります。&lt;/p&gt; &lt;h2 id=&quot;テストグループ生成&quot;&gt;テストグループ生成。&lt;/h2&gt; &lt;p&gt;アップルからメールを貰った方はアプリストアコネクト 애플에서 메일을 받으신 분들은 앱 스토어 커넥트(App Store Connect)の &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;ページに移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-testflight-build-file-list.png&quot; alt=&quot;ビルドファイルリスト&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;画面でアップロードしたファイルが見えます。左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;新規グループ ＋&lt;/code&gt;を押してテストのためのグループを生成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-create-test-group.png&quot; alt=&quot;テストグループ生成&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストグループを生成したら左メニューへ生成する時使ったグループ名が追加されます。そのグループを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-test-group.png&quot; alt=&quot;テストグループ&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストグループの生成を完了しました。今後はビルドファイル、テスターを追加してテストする方法を紹介します。&lt;/p&gt; &lt;h2 id=&quot;ビルド追加&quot;&gt;ビルド追加&lt;/h2&gt; &lt;p&gt;テストグループを選択した画面で上部にある&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド&lt;/code&gt;タブを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-build-tab.png&quot; alt=&quot;ビルドタブ選択&quot; /&gt;&lt;/p&gt; &lt;p&gt;ビルドタブで&lt;code class=&quot;highlighter-rouge&quot;&gt;ビルド(0)&lt;/code&gt;の横にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押してビルドファイルを選択する画面に移動します。テストしたいビルドを選択した下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;次へ&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-select-build.png&quot; alt=&quot;ビルド選択&quot; /&gt;&lt;/p&gt; &lt;p&gt;テストする時ログイン情報が必要かどうか選択する画面が出ます。アプリをテストするためにログイン情報が必要な場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;サインインが必要です&lt;/code&gt;を選択してID/PWを入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;次へ&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-need-login.png&quot; alt=&quot;ログイン必要&quot; /&gt;&lt;/p&gt; &lt;p&gt;下の画面でテスターに送りたいメッセージやテストする方ほを作成して&lt;code class=&quot;highlighter-rouge&quot;&gt;審査へ提出&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-test-message.png&quot; alt=&quot;テスターメッセージ&quot; /&gt;&lt;/p&gt; &lt;p&gt;テスターへテストをお願いするための&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;ですが、基本的簡単な審査をするみたいです。したがった、テスターにすぐにファイルを送ることが出来ないです。審査がおわたらテストができる状態になります。&lt;/p&gt; &lt;h2 id=&quot;テスター追加&quot;&gt;テスター追加&lt;/h2&gt; &lt;p&gt;アップルが提供してる&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;は大きく二つ機能があります。自分がしてるテスターを追加する方法と公開URLを生成してこのリンクを配布する方法です。まずテスターを追加する方法について説明します。&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;メニューでテストグループを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;テスター(0)&lt;/code&gt;の横にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;新規テスターを追加&lt;/code&gt;のメニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-add-new-tester.png&quot; alt=&quot;新規テスター追加&quot; /&gt;&lt;/p&gt; &lt;p&gt;新しい追加するテスターのメール、名前を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;追加&lt;/code&gt;ボタンを押します。追加するテスターのメールはアプリストア(App Store)でアプリをダウンロードする時使うメールです。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ja-added-new-tester.png&quot; alt=&quot;新規テスター追加完了&quot; /&gt;&lt;/p&gt; &lt;p&gt;新しテスターが追加されました。新しく追加されたテスターには&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;からメールが送信されます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/testflight-email.png&quot; alt=&quot;testflight email&quot; /&gt;&lt;/p&gt; &lt;p&gt;テスターはアプリストア(App store)から&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を検索してダウンロードしたらアプリテストができます。&lt;/p&gt; &lt;h2 id=&quot;公開リンク&quot;&gt;公開リンク&lt;/h2&gt; &lt;p&gt;公開リンクを選択して登録を完了したら公開リンクが生成されます。そのリンクをコピーして共有したらテストへ参加することができます。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使ってテストする方法を見ました。次のブログでは実際アップリをリリースする方法について紹介します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 iOSは開発したアプリをリリースする前自分のテスターまたはテストバージョンの公開URLを使ってテストができるTestFlightシステムを持ってます。ここではTestFlightを使って開発したアプリをテストする方法について話します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-testflight.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS 証明書(Certification)</title><link href="https://dev-yakuza.github.io/react-native/ios-certification/" rel="alternate" type="text/html" title="iOS 証明書(Certification)"/><published>2018-11-11T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-certification-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-certification/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;このブログはアップル開発者プログラム(Apple Developer Program)へすでに登録した開発者のため説明です。アップル開発者プログラム(Apple Developer Program)へまだ登録してない方は前のブログ&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS開発者登録&lt;/a&gt;をみてアップル開発者プログラム(Apple Developer Program)へ登録してください。&lt;/p&gt; &lt;p&gt;今から開発者の証明書(Certification)を生成して設定する方法について説明します。&lt;/p&gt; &lt;h2 id=&quot;証明書ダウンロード&quot;&gt;証明書ダウンロード&lt;/h2&gt; &lt;p&gt;アップル開発者プログラム(Apple Developer Program)を購入して購入完了メールをもらったらアップル開発者サイト(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/apple-developer-site-after-enrolling.png&quot; alt=&quot;apple developer site after enrolling&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者プログラム(Apple Developer Program)へ登録する前と画面が少し違います。左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;を選択して証明書(Certification)を発行するページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書(Certification)がすでに一個存在します。この証明書(Certification)を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;ボタンを押して証明書を好きなところに保存します。証明書が見えない方は下記の証明書生成を見って証明書を新しく生成します。&lt;/p&gt; &lt;p&gt;この証明書は開発用です。この証明書がある方も下記の証明書生成でリリース用の証明書を生成してください。&lt;/p&gt; &lt;h2 id=&quot;証明書生成&quot;&gt;証明書生成&lt;/h2&gt; &lt;p&gt;Macで&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;プログラムを実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain.png&quot; alt=&quot;キーチェーンアクセス&quot; /&gt;&lt;/p&gt; &lt;p&gt;キージェーンが実行されたら左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;証明書アシスタント&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;証明局に証明書を要求...&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-request-certification.png&quot; alt=&quot;キーチェーンアクセス証明書要求&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;証明局に証明書を要求...&lt;/code&gt;を押すと下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;証明書アシスタント&lt;/code&gt;ダイアローグが表示します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-info.png&quot; alt=&quot;キーチェーンアクセス証明書情報入力&quot; /&gt;&lt;/p&gt; &lt;p&gt;上の画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;ユーザのメールアドレス&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;通称&lt;/code&gt;へ情報を入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;要求の処理&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;ディスクに保存&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;鍵ペア情報を指定&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;続ける&lt;/code&gt;を押します。ファイル保存する画面が出たら好きな場所を選択してファイルを保存します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-key.png&quot; alt=&quot;キーチェーンアクセス証明書保存&quot; /&gt;&lt;/p&gt; &lt;p&gt;キーペア情報を上のように設定して&lt;code class=&quot;highlighter-rouge&quot;&gt;続ける&lt;/code&gt;を押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-certification-completed.png&quot; alt=&quot;キーチェーンアクセス証明書完了&quot; /&gt;&lt;/p&gt; &lt;p&gt;ディスクへ証明書が上手く保存しました。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者サイト(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページで&lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;メニューを押して証明書登録サイトへ移動します。そこで右上にある&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/select-certification.png&quot; alt=&quot;certification selection&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書選択画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;を選択して下にスクロールして&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;リリース用証明書を生成する方は&lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt;の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;App Store and Ad Hoc&lt;/code&gt;を選択してく進んでください。&lt;/p&gt; &lt;p&gt;証明書ファイル(CSR)を作る方法を説明するページが出ます。私たちは上部で&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;ですでに証明書ファイル(CSR)を作りましたのでスクロールして&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/create-csr-file.png&quot; alt=&quot;create csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;生成した証明書ファイルを選択する画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Choose File&lt;/code&gt;ボタンを押して上部で作った証明書ファイルを選択して下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/choose-csr-file.png&quot; alt=&quot;choose csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;証明書の生成を完了しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;ボタンを押して証明書を好きなところへ保存してください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/complete-create-certification.png&quot; alt=&quot;complete create certification file&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;証明書登録&quot;&gt;証明書登録&lt;/h2&gt; &lt;p&gt;生成した証明書を&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;へ入れる必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;を実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain.png&quot; alt=&quot;キーチェーンアクセス&quot; /&gt;&lt;/p&gt; &lt;p&gt;下のように&lt;code class=&quot;highlighter-rouge&quot;&gt;キーチェーンアクセス&lt;/code&gt;が開けたら左下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;自分の証明書&lt;/code&gt;を押して上部でダウンロードした証明書のファイルをドラッグして追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ja-keychain-certification.png&quot; alt=&quot;キーチェーンアクセス証明書&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;アップル開発者アカウント連携&quot;&gt;アップル開発者アカウント連携&lt;/h2&gt; &lt;p&gt;アップル開発者アカウント(Apple Developer)と現在のプロジェクトを連携する必要があります。RN(react native)のプロジェクトフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名.xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/p&gt; &lt;p&gt;xcodeで左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;タブに移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の横にあるドロップダウンメニューを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;すでにxcodeとアップル開発者アカウント(Apple Developer)が連動されてる方はそのアカウントを選択します。アカウント連動をしてない方は&lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-login.png&quot; alt=&quot;xcode certification login&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者アカウント(Appld Developer)でログインします。アップル開発者アカウント(Appld Developer)がない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS デバイステスト&lt;/a&gt;でアップル開発者アカウント生成方法を見って作ってください。ログインを完了したら左上の閉じるボタンを押して画面を閉じます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の横のドロップダウンメニューを選択したら先ほど追加したアップル開発者アカウントが見えます。そのアカウントを選択します。&lt;/p&gt; &lt;p&gt;同じ方法でTestの部分もアップル開発者アカウント(Apple Developer)と連携します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-test.png&quot; alt=&quot;xcode certification add test&quot; /&gt;&lt;/p&gt; &lt;p&gt;これでアップル開発者アカウントとの連携が終わりました。今からリリース用のビルドへ必要なプロビジョニングプロファイル(Provisioning Profiles)を生成して連携します。&lt;/p&gt; &lt;h2 id=&quot;プロビジョニングプロファイル生成&quot;&gt;プロビジョニングプロファイル生成&lt;/h2&gt; &lt;p&gt;アップル開発者サイト(Apple Developer)の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページで下にスクロールしたら&lt;code class=&quot;highlighter-rouge&quot;&gt;Provisioning Profiles&lt;/code&gt;の項目が見ます&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profiles)도 개발자용과 배포용이 필요하므로 아래에 과정을 개발자용과 배포용, 두 번 진행하셔야합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles.png&quot; alt=&quot;provisioning profiles&quot; /&gt;&lt;/p&gt; &lt;p&gt;メニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;All&lt;/code&gt;を押してプロビジョニングプロファイル(Provisioning Profiles)を登録するページへ遷移します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-detail.png&quot; alt=&quot;provisioning profiles detail&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面が見えたら右上の&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ボタンを押して新しプロビジョニングプロファイル(Provisioning Profile)を追加します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-ios.png&quot; alt=&quot;provisioning profiles ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押して進めます。&lt;/p&gt; &lt;p&gt;リリース用プロビジョニングプロファイル(Provisioning Profiles)は&lt;code class=&quot;highlighter-rouge&quot;&gt;Distribution&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;App Store&lt;/code&gt;を選択して進めてください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-app-id.png&quot; alt=&quot;provisioning profiles app id&quot; /&gt;&lt;/p&gt; &lt;p&gt;私たちがアプリを開発する時使った&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;を選択します。&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;はxcodeで左上の&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;タブに移動したら一番上の部分で&lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt;項目を確認することが出来ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;選択を完了したら&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;を押して進めてください。開発者アカウントとテストするデバイスを選択して次のページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-name.png&quot; alt=&quot;provisioning profiles name&quot; /&gt;&lt;/p&gt; &lt;p&gt;最後にプロビジョニングプロファイル(Provisioning Profile)の名前を設定して&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;を押して次のページへ移動します。&lt;/p&gt; &lt;p&gt;プロビジョニングプロファイル(Provisioning Profile)の生成が完了しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;を押してファイルを好きなところに保存してください。&lt;/p&gt; &lt;h2 id=&quot;プロビジョニングプロファイル連携&quot;&gt;プロビジョニングプロファイル連携&lt;/h2&gt; &lt;p&gt;xcodeでは基本的に自動に&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;を管理する設定がされております。(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;項目の&lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;この状態でプロビジョニングプロファイル(Provisioning Profile)の連携、リリースのビルドする時特に問題ない方はそのまま使っても大丈夫です。（&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の項目へ赤文字エラーがない方）私たちはプロビジョニングプロファイル(Provisioning Profile)との連携が上手く出来なかったので手動で連携してみます。&lt;/p&gt; &lt;p&gt;下記は手動でプロビジョニングプロファイル(Provisioning Profile)を連携する方法です。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のような画面で&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;を選択してチェックを外します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto.png&quot; alt=&quot;disable automatically manage signing&quot; /&gt;&lt;/p&gt; &lt;p&gt;チェックを外したら上の画面ような&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Debug)&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Release)&lt;/code&gt;が見えます。二つの&lt;code class=&quot;highlighter-rouge&quot;&gt;Provision Profile&lt;/code&gt;の横にあるドロップダウンメニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Import Profile&lt;/code&gt;を選択して上部で生成してダウンロードしたプロビジョニングプロファイル(Provisioning Profile)を選択します。同じ方法でTestの部分も修正します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto_test.png&quot; alt=&quot;disable automatically manage signing test&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;全ての設定が終わりました。証明書を連携したので開発やリリースの準備まで終わりました。次のブログからはリリース準備や&lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;を使う方法、実際のリリースについて説明します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 このブログはアップル開発者プログラム(Apple Developer Program)へすでに登録した開発者のため説明です。アップル開発者プログラム(Apple Developer Program)へまだ登録してない方は前のブログiOS開発者登録をみてアップル開発者プログラム(Apple Developer Program)へ登録してください。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-certification.jpg"/></entry><entry xml:lang="ja"><title type="html">iOS開発者登録</title><link href="https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/" rel="alternate" type="text/html" title="iOS開発者登録"/><published>2018-11-10T00:00:00+09:00</published><updated>2018-11-13T13:35:25+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-enroll-developer-program-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;今までRN(react native)プロジェクトを開発してデバイスでテストする方法について勉強しました。ここでは完成したアプリをiOSアプリストア(App store)へ登録するためアップルの開発者プログラム(Apple developer program)へ登録する方法について説明します。&lt;/p&gt; &lt;h2 id=&quot;アップル開発者プログラム登録&quot;&gt;アップル開発者プログラム登録&lt;/h2&gt; &lt;p&gt;アップル開発者プログラム(Apple developer program)へ登録するため下のリンクを押してアップル開発者(Apple developer)サイトへ移動します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アップル開発者(Apple developer)サイト: &lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-site.png&quot; alt=&quot;apple developer site&quot; /&gt;&lt;/p&gt; &lt;p&gt;右上の&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ボタンを押してログイン画面へ遷移します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/login.png&quot; alt=&quot;apple developer login&quot; /&gt;&lt;/p&gt; &lt;p&gt;開発者アカウントがない方は&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;デバイステスト&lt;/a&gt;ブログを参考して開発者アカウントを生成してください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/after-login.png&quot; alt=&quot;after login&quot; /&gt;&lt;/p&gt; &lt;p&gt;ログインをしたら上の画面が見えます。下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Join the Apple Developer Program&lt;/code&gt;を押してアップル開発者プログラム(Apple Developer Program)ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-program-site.png&quot; alt=&quot;Apple Developer Program site&quot; /&gt;&lt;/p&gt; &lt;p&gt;右うの&lt;code class=&quot;highlighter-rouge&quot;&gt;Enroll&lt;/code&gt;ボタンを押してアップル開発者プログラム（Apple Developer Program)の登録条件ページへ移動します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-program-condition.png&quot; alt=&quot;Apple Developer Program condition&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者プログラム(Apple Developer Program)へ登録するための条件が出ます。開発者アカウントを無事に生成したら全てクリアーの状態です。スクロールして下に移動して&lt;code class=&quot;highlighter-rouge&quot;&gt;Start Your Enrollment&lt;/code&gt;ボタンを押して登録ページへ移動します。&lt;/p&gt; &lt;p&gt;どんなアップル開発者プログラム(Apple Developer Program)へ登録するかを選択する画面が出ます。自分の状況に合うアップル開発者プログラム(Apple Developer Program)を選択してください。ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;Individual / Sole Proprietor / Single Person Business&lt;/code&gt;で説明します。このプログラムを選択して左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押して登録します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/select-apple-developer-program.png&quot; alt=&quot;select apple developer program&quot; /&gt;&lt;/p&gt; &lt;p&gt;使うアップル開発者アカウント(Apple developer account)の個人情報を入力して規約を同意します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/information.png&quot; alt=&quot;apple developer account private information&quot; /&gt;&lt;/p&gt; &lt;p&gt;自分が入力した内容が合うかを確認するページが出ます。内容が大丈夫だったら&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;ボタンを押して次のページへ行きます。&lt;/p&gt; &lt;p&gt;購入の画面が見えます。 &lt;code class=&quot;highlighter-rouge&quot;&gt;Purchase&lt;/code&gt;ボタンを押して購入します。購入手続きの説明は省略します。&lt;/p&gt; &lt;h2 id=&quot;完了&quot;&gt;完了&lt;/h2&gt; &lt;p&gt;購入手続きを完了しました。購入が正式的完了されたらアップルから購入完了メールがきます。購入後、購入完了まで少し時間がかかります。結構待っててもメールが来ない方はアップル開発者サイト(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)へログインして&lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;ページの左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Contact Us&lt;/code&gt;メニューを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;メンバーシップおよびアカウント&lt;/code&gt;を押します。&lt;code class=&quot;highlighter-rouge&quot;&gt;プログラムの購入と更新&lt;/code&gt;を押して&lt;code class=&quot;highlighter-rouge&quot;&gt;電話&lt;/code&gt;を押して電話で相談したらすぐ完了メールをもらえます。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 今までRN(react native)プロジェクトを開発してデバイスでテストする方法について勉強しました。ここでは完成したアプリをiOSアプリストア(App store)へ登録するためアップルの開発者プログラム(Apple developer program)へ登録する方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-enroll-developer-program.jpg"/></entry><entry xml:lang="ja"><title type="html">iOSビルドやテスト</title><link href="https://dev-yakuza.github.io/react-native/ios-running-on-device/" rel="alternate" type="text/html" title="iOSビルドやテスト"/><published>2018-11-09T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-running-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-running-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログでRN(react native)で開発したプロジェクトをデバイスでテストしてみました。(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;デバイステスト&lt;/a&gt;) 皆さん、特に問題ありませんでしたか？今まで結構テストしたのでRN(react native)のプロジェクトをリリースするためビルドして実際のデバイスでテストしてみます。&lt;/p&gt; &lt;p&gt;ここではRN(react native)のプロジェクトをビルドする方法とビルドしたファイルをテストデバイスへアップして確認する方法について説明します。実際マーケットへアップロードする内容は含まれてないです。&lt;/p&gt; &lt;h2 id=&quot;ios--mac&quot;&gt;iOS / Mac&lt;/h2&gt; &lt;p&gt;開発者アカウント生成とデバイスとの連携は以前のブログを参考してください。(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;デバイステスト&lt;/a&gt;) ここにはRN(react native)のプロジェクトをリリースするためのビルド方法とビルドしたファイルをデバイスでテストする方法について紹介します。&lt;/p&gt; &lt;h3 id=&quot;リリースビルド準備&quot;&gt;リリースビルド準備&lt;/h3&gt; &lt;p&gt;公式サイト(&lt;a href=&quot;https://facebook.github.io/react-native/docs/ios-running-on-device#building-your-app-for-production&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native&lt;/a&gt;)へ全ての説明があります。それを見ながらやってみます。&lt;/p&gt; &lt;h4 id=&quot;https通信の設定&quot;&gt;HTTPS通信の設定&lt;/h4&gt; &lt;p&gt;アップルはアプリが外部のシステムと&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;通信をする時&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPS&lt;/code&gt;で通信しないとダメになる機能を入れました。しかし、RN(react native)を開発する時はPCに開発サーバーを立ち上げてそのサーバーと通信してアプリを起動するのでRN(react native)は基本この機能を無効化してます。実際ビルドしてリリースすると開発サーバーとは通信しないのでこの無効化してる部分を消す必要があります。RN(react native)のプロジェクトフォルダから&lt;code class=&quot;highlighter-rouge&quot;&gt;/ios/プロジェクト名/info.plist&lt;/code&gt;のファイルを開いて下記の部分を探して消します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSExceptionDomains&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;localhost&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSExceptionAllowsInsecureHTTPLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;注意：また開発する時はこの部分を復元する必要があります。上で説明したけど、開発する時は開発サーバー(localhost)との通信はHTTPでするからです。&lt;/p&gt; &lt;p&gt;アプリでHTTPSプロトコルじゃなくHTTPプロトコルで通信をする必要がある方は下記のようにlocalhostの部分だけ消します。&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;ビルドスキマ変更&quot;&gt;ビルドスキマ変更&lt;/h4&gt; &lt;p&gt;RN(react native)のプロジェクトをビルドするためにはビルドスキマ(build schme)を&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;で変更する必要があります。RN(react native)のプロジェクトがあるフォルダから&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名.xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/p&gt; &lt;p&gt;xcodeが実行されたら上部のメニューから&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;メニューの&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt;メニューで&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/change-scheme.png&quot; alt=&quot;change build scheme&quot; /&gt;&lt;/p&gt; &lt;p&gt;下記のような画面が表示されたら左の&lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt;を選択して右の&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Configuration&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;に変更して下の&lt;code class=&quot;highlighter-rouge&quot;&gt;Close&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/change-debug-to-release.png&quot; alt=&quot;change build scheme to Release from Debug&quot; /&gt;&lt;/p&gt; &lt;p&gt;注意:ここもまた開発する時は&lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;に戻せる必要があります。&lt;/p&gt; &lt;h4 id=&quot;bundleファイル指定&quot;&gt;bundleファイル指定&lt;/h4&gt; &lt;p&gt;最後にbundleファイルを指定します。RN(react native)で開発する時は開発サーバー(localhost)からjs(javascript)のファイルを提供しますがリリースする時は&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;と同じように一つのbundleファイルを生成してそのファイルを利用します。したがってリリースではjs(javascript)がビルドされた一つのbundleファイルを活用するように指定する必要があります。RN(react natie)があるフォルダで&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名/AppDelegate.m&lt;/code&gt;ファイルを開いてか下記のように修正します。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#ifdef DEBUG jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil]; #else jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;]; #endif &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;デバイスで起動&quot;&gt;デバイスで起動&lt;/h4&gt; &lt;p&gt;全ての設定が終わりました。RN(react native)をビルドする前にデバイスで確認してみましょう。デバイスでテストした時と同じようにUSBでMacとアイホンを接続してビルドターゲットをデバイスで設定した後、矢印を押して実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/device-test.png&quot; alt=&quot;device test&quot; /&gt;&lt;/p&gt; &lt;p&gt;デバイステストとは違ってjs(javascript)がビルドされたbundleファイルを使うのでMacとアイホンが同じWifi/Network上へある必要とインストールした後デバイスがMacと接続してる必要がありません。しかし、正式にインストールではないので一定期間が経過すると、そのアプリを使うことが出来ません。&lt;/p&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/ios-running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログでRN(react native)で開発したプロジェクトをデバイスでテストしてみました。(デバイステスト) 皆さん、特に問題ありませんでしたか？今まで結構テストしたのでRN(react native)のプロジェクトをリリースするためビルドして実際のデバイスでテストしてみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-running-on-device.jpg"/></entry><entry xml:lang="ja"><title type="html">iOSデバイステスト</title><link href="https://dev-yakuza.github.io/react-native/ios-test-on-device/" rel="alternate" type="text/html" title="iOSデバイステスト"/><published>2018-11-08T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-test-on-device-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-test-on-device/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;RN(react native)で開発したプロジェクトをシミュレータでテストすることは大変ですね。今まで開発したRN(react native)プロジェkとをシミュレータではなくデバイスでテストしてみましょう。&lt;/p&gt; &lt;h2 id=&quot;ios--mac&quot;&gt;iOS / Mac&lt;/h2&gt; &lt;p&gt;アイホンでテストするためにはMacが必要です。Mac、iOSデバイス(アイホン)とテストしたいプロジェクトを準備します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/mac-iphone.jpg&quot; alt=&quot;prepare iphone mac&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;開発アカウント生成&quot;&gt;開発アカウント生成&lt;/h3&gt; &lt;p&gt;デバイスでテストするためにはアップル開発者アカウント(Apple developer account)が必要です。開発者登録じゃなくアカウントの生成なので無料で使うことが可能です。アップル開発者アカウントがある方はこの項目はスキップしても構わないです。&lt;/p&gt; &lt;p&gt;下のリンクを押してアップル開発者アカウント(Apple developer account)生成サイトに行きます。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;アップル開発者アカウント(Apple developer account): &lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/apple-developer-site.png&quot; alt=&quot;apple developer site&quot; /&gt;&lt;/p&gt; &lt;p&gt;右上の&lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt;メニューを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/apple-developer-site-login.png&quot; alt=&quot;apple developer site login&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップルアカウントがある方はログインしてください。アカウントがない方は&lt;code class=&quot;highlighter-rouge&quot;&gt;Create Apple ID&lt;/code&gt;でアップルアカウントを作ります。アップル開発者アカウントじゃなくアップルアカウントです。アイホンでアプリをダウンロードする時使ってるアカウントでログインすればいいです。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/agreement.png&quot; alt=&quot;agreement&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者アカウントを使うための利用規約です。&lt;code class=&quot;highlighter-rouge&quot;&gt;By checking this box I confirm that I have read and agree to be bound by the Agreement above.&lt;/code&gt;を押して同意して&lt;code class=&quot;highlighter-rouge&quot;&gt;Submit&lt;/code&gt;を押して次のページへ遷移します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/completed-create-account.png&quot; alt=&quot;completed to create developer account&quot; /&gt;&lt;/p&gt; &lt;p&gt;アップル開発者アカウント(Apple developer account)の生成が終わりました。&lt;/p&gt; &lt;h3 id=&quot;デバイステスト&quot;&gt;デバイステスト&lt;/h3&gt; &lt;p&gt;公式サイト(&lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;)へ全ての内容が詳しく載せております。やってみましょう。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;USBを使ってテストしたいデバイスとMacを接続します。&lt;/li&gt; &lt;li&gt;RN(react native)プロジェクトがあるフォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/[プロジェクト名].xcodeproj&lt;/code&gt;ファイルを実行します。&lt;/li&gt; &lt;li&gt; &lt;p&gt;xcodeが実行されたら左上のプロジェクト名を選択してプロジェクト名の右へある画面上の&lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt;タブを選択します。スクロールしてちょっと下に行くと&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;の項目が見えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の項目の右へある&lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account...&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing.png&quot; alt=&quot;signing in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;上部で作ったアップル開発者アカウント(Apple developer account)のID/PWを入力して&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-login.png&quot; alt=&quot;login signing in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;ログイン後に出る画面の下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Download Manual Profiles&lt;/code&gt;ボタンを押して後ウィンドウを閉じます。そしたら&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;の横にある項目がドロップダウンメニューになったことが分かります。ドロップダウンメニューを開いて上で追加したアイディを選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-error.png&quot; alt=&quot;signing error in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のようなエラーが出る方はxcodeの同じ画面の上の所にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;を変更てください。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-error-solve.png&quot; alt=&quot;signing error solve in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;左にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt;の項目で &lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名Tests&lt;/code&gt;を選択して&lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;横にあるドロップダウンメニューを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;signing&lt;/code&gt;(アイディを選択)をします。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-target-test.png&quot; alt=&quot;signing test target in xcode&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;左上のシミュレータを選択するところでUSBで接続してるデバイスに変更して矢印を押してプロジェクトを実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/device-test.png&quot; alt=&quot;device test in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;注意：これはデバイスでテストするためのビルドです。したがって、シミュレータと同じようにPCへRN(react native)の開発サーバーが立ち上がってそのサーバーとデバイスが連動してテストが出来る仕組みです。したがって同じWifi/ネットワークの環境じゃないとデバイスがサーバーを見つかれないのでテストが出来ないです。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ビルドが無事に終わったら下記のようなメッセージが出ます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/security-error.png&quot; alt=&quot;security error&quot; /&gt;&lt;/p&gt; &lt;p&gt;詳しく説明があるのでやってみましょう。デバイスの&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt;を実行します。&lt;code class=&quot;highlighter-rouge&quot;&gt;一般&lt;/code&gt;を選択して &lt;code class=&quot;highlighter-rouge&quot;&gt;プロファイルとデバイス管理&lt;/code&gt;を選択します。&lt;code class=&quot;highlighter-rouge&quot;&gt;デベロッパAPP&lt;/code&gt;項目にある自分のアップル開発アカウント(Apple developer account)を選択します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;APPを検証&lt;/code&gt;を押します。その後xcodeに戻ってもう一回矢印を押してプロジェクトを実行して上手く起動することを確認します。&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;公式サイト: &lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 RN(react native)で開発したプロジェクトをシミュレータでテストすることは大変ですね。今まで開発したRN(react native)プロジェkとをシミュレータではなくデバイスでテストしてみましょう。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-test-on-device.jpg"/></entry><entry><title type="html">React Native Admob/common/installation</title><link href="https://dev-yakuza.github.io/2018/11/" rel="alternate" type="text/html" title="React Native Admob/common/installation"/><published>2018-11-04T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/2018/react-native-admob/common/installation</id><content type="html" xml:base="https://dev-yakuza.github.io/2018/11/">&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-tts &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">npm install --save react-native-tts</summary></entry><entry xml:lang="ja"><title type="html">グーグルアドモブ</title><link href="https://dev-yakuza.github.io/react-native/react-native-admob/" rel="alternate" type="text/html" title="グーグルアドモブ"/><published>2018-11-04T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-admob-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-admob/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;グーグルは広告プラットフォームでアドセンス(Adsense: &lt;a href=&quot;https://www.google.com/adsense/start/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/adsense/start/&lt;/a&gt;)とアドモブ(Admob: &lt;a href=&quot;https://www.google.com/admob/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/admob/&lt;/a&gt;)を持ってます。ここではアプリケーションへグーグルアドモブ(google admob)を使って広告を表示させる方法について話します。&lt;/p&gt; &lt;p&gt;グーグルのアドセンス(google adsense)とアドモブ(google admob)の違いはアドセンスはウェブサイト用のプラットホームでアドモブはスマホ用のフラットフォームのことです。私たちはブログ用の広告ですでにアドセンス(google adsense)を使ってます。ウェブへアドセンス(google adsense)を使う方法が気になる方は&lt;a href=&quot;https://dev-yakuza.github.io/jekyll/google-service/&quot;&gt;google service&lt;/a&gt;を確認してください。&lt;/p&gt; &lt;h2 id=&quot;ライブラリインストール&quot;&gt;ライブラリインストール&lt;/h2&gt; &lt;p&gt;グーグルのアドモブ(google admob)をRN(react native)へ使うためには&lt;a href=&quot;https://github.com/sbugert/react-native-admob&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native-admob&lt;/a&gt;ライブラリをインストールする必要があります。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react-native-admob@next &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;インストールが完了されたら下記のコマンドでreact-native-admobライブラリとRN(react native)のプロジェクトをリンクさせます。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-admob &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;ios-sdk-インストール&quot;&gt;iOS SDK インストール&lt;/h3&gt; &lt;p&gt;グーグルアドモブ(Google admob)をiOS上で使うためには&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;をインストールする必要があります。下のリンクを押してインストールする方法を確認してください。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Google Mobile Ads SDK: &lt;a href=&quot;https://developers.google.com/admob/ios/quick-start#import_the_mobile_ads_sdk&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developers.google.com/admob/ios/quick-start&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;このブログではファイルダウンロード形式を説明します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;ダウンロードリンク: &lt;a href=&quot;https://developers.google.com/admob/ios/download&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developers.google.com/admob/ios/download&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;上記のリンクを押してダウンロードサイトへ遷移して&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;をダウンロードします。ダウンロードが完了されたら圧縮を解除します。&lt;/p&gt; &lt;p&gt;RN(react native)プロジェクトフォルドへ移動して&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト名.xcodeproj&lt;/code&gt;ファイl流を実行します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/add_sdk.png&quot; alt=&quot;add Google Mobile Ads SDK to ios &quot; /&gt;&lt;/p&gt; &lt;p&gt;xcodeが実行されたら左上のプロジェクト名を右クリックして&lt;code class=&quot;highlighter-rouge&quot;&gt;Add Files to [プロジェクト名]&lt;/code&gt;を押します。上記でダウンロードした&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;フォルダへ移動して&lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMobileAds.framework&lt;/code&gt;ファイルを選択します。下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;Copy items if needed&lt;/code&gt;を洗濯して&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;を押して&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;ライブラリを追加します。&lt;/p&gt; &lt;h2 id=&quot;グーグルアドモブ会員登録&quot;&gt;グーグルアドモブ会員登録&lt;/h2&gt; &lt;p&gt;グーグルのアドモブ(Google admob)のサイトへ移動して会員登録をします。一般的な会員登録/ログインのプロセスなのでここでは省略します。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;グーグルアドモブ(Google admob)のサイト: &lt;a href=&quot;https://www.google.com/admob/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/admob/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;グーグルアドモブ設定&quot;&gt;グーグルアドモブ設定&lt;/h2&gt; &lt;p&gt;グーグルアドモブ(Google admob)の使用法について見てみましょう。グーグルアドモブ(Google admob)を使うためにはグーグルアドモブ(Google admob)サイトに会員登録してログインしたら下のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/signin_google_admob.png&quot; alt=&quot;signin google admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;下の所にある&lt;code class=&quot;highlighter-rouge&quot;&gt;GET STARTED&lt;/code&gt;ボタンを押してグーグルアドモブ(Google admob)の利用を始めます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/configure_admob.png&quot; alt=&quot;configure admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;すでにアプリがマーケットへ登録されたかどうかを選択します。私たちはまだアプリを登録してないので&lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;を選択します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/configure_app_name.png&quot; alt=&quot;configure app name on admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルアドモブ(Google admob)を使うためにアプリの名前を作成して広告を表示させたいプラットフォームを選択します。私たちはまず&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;を選択して進めます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/completed_configure.png&quot; alt=&quot;completed to configure&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルアドモブ(Google admob)の登録が終わりました。次は何をすればいいかが親切に書いております。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;まず、react-native-admobを設定する時必要な&lt;code class=&quot;highlighter-rouge&quot;&gt;App ID&lt;/code&gt;をコピーします。&lt;/li&gt; &lt;li&gt;広告のタイプ(ad unit)をグーグルアドモブ(Google admob)に設定します。&lt;/li&gt; &lt;li&gt;アプリをマーケットへ登録したらグーグルアドモブ(Google admob)へ連携する必要があります。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;NEXT: CREATE AD UNIT&lt;/code&gt;を押したら広告のタイプを設定する画面へ遷移します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/select_ad_uni.png&quot; alt=&quot;select advertisement type&quot; /&gt;&lt;/p&gt; &lt;p&gt;私たちはまずバナー広告をしてみます。&lt;code class=&quot;highlighter-rouge&quot;&gt;Banner&lt;/code&gt;の下にある&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;ボタンを押します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/set_banner_name.png&quot; alt=&quot;input banner name&quot; /&gt;&lt;/p&gt; &lt;p&gt;バナーの名前を設定します。グーグルアドモブ(Google admob)サービスでこのバナーを探すための名前ですので自分が認識できる名前で設定します。入力が終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE AD UNIT&lt;/code&gt;を押して設定を終了します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/finished_configuration.png&quot; alt=&quot;finished configuration&quot; /&gt;&lt;/p&gt; &lt;p&gt;グーグルアドモブ(Google admob)のバナー設定が終わりました。また、出たApp IDとバナーのad unit IDをコピーします。&lt;/p&gt; &lt;h2 id=&quot;react-native-admob&quot;&gt;react-native-admob&lt;/h2&gt; &lt;p&gt;グーグルアドモブ(Google admob)へ設定したバナーをRN(react-native)で使うためにreact-native-admobの使う方法をみてみましょう。&lt;/p&gt; &lt;h3 id=&quot;ios設定&quot;&gt;iOS設定&lt;/h3&gt; &lt;p&gt;グーグルアドモブ(Google admob)をiOSで使うためには&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/プロジェクト名/AppDelegate.m&lt;/code&gt;のファイルを修正する必要があります。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;React/RCTRootView.h&amp;gt; @import GoogleMobileAds; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上でダウンロードしてxcodeへ追加した&lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;ライブラリをインポートします。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.window.rootViewController = rootViewController; [GADMobileAds configureWithApplicationID:@&quot;ca-app-pub-7987914246691031~8295071692&quot;]; [self.window makeKeyAndVisible]; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルアドモブ(Google admob)を生成する時コピーしたApp Idを入れた&lt;code class=&quot;highlighter-rouge&quot;&gt;[GADMobileAds configureWithApplicationID:@&quot;グーグルアドモブアプリID&quot;];&lt;/code&gt;コードを上記のような位置へ入れます。&lt;/p&gt; &lt;p&gt;これでiOSでグーグルアドモブ(Google admob)を使う準備ができました。&lt;/p&gt; &lt;h3 id=&quot;react-native-admob使う&quot;&gt;react-native-admob使う&lt;/h3&gt; &lt;p&gt;グーグルアドモブ(Google admob)へ設定したバナーを使うためバナーを表示したいファイルで&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-admob&lt;/code&gt;ライブラリの&lt;code class=&quot;highlighter-rouge&quot;&gt;AdMobBanner&lt;/code&gt;をインポーとします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-admob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;グーグルアドモブ(Google admob)バナーを表示したい位置へ下記のコードをコピペします。&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fullBanner&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adUnitID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ad unit ID&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulatorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAdFailedToLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;adSize: 広告のサイズを決定します。サイズについては公式サイトを参考してください。(&lt;a href=&quot;https://github.com/sbugert/react-native-admob#admobbanner&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native-admob banner size&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;adUnitID: グーグルアドモブ(Google admob)で生成したバナーユニットのアイディ(ad unit ID)をコピペします。&lt;/li&gt; &lt;li&gt;testDevices: テスト用の端末のアイディを入れます。ここにはシミュレータのアイディを設定します。&lt;/li&gt; &lt;li&gt;onAdFailedToLoad: 広告のローディングが失敗した時の処理を入れる部分です。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;これで設定が終わりました。プロジェクトを実行して広告が上手く表示されるかを確認します。&lt;/p&gt; &lt;h2 id=&quot;アンドロイドandroid&quot;&gt;アンドロイド(Android)&lt;/h2&gt; &lt;p&gt;アンドロイド(Android)の部分は実際開発する時、このブログへ追加します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 グーグルは広告プラットフォームでアドセンス(Adsense: https://www.google.com/adsense/start/)とアドモブ(Admob: https://www.google.com/admob/)を持ってます。ここではアプリケーションへグーグルアドモブ(google admob)を使って広告を表示させる方法について話します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-admob.jpg"/></entry><entry xml:lang="ja"><title type="html">バージョン生成</title><link href="https://dev-yakuza.github.io/git/create-stage/" rel="alternate" type="text/html" title="バージョン生成"/><published>2018-10-31T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/git/create-stage-ja</id><content type="html" xml:base="https://dev-yakuza.github.io/git/create-stage/">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt; &lt;p&gt;以前のブログで(&lt;a href=&quot;https://dev-yakuza.github.io/git/create-stage/&quot; target=&quot;_blank&quot;&gt;リポジトリ生成&lt;/a&gt;)でgitのリポジトリ(Repository)を生成する方法を勉強しました。今回は生成されたgitのリポジトリ(Repository)へバージョン管理をするためバージョン(変更履歴)を生成する方法に関して勉強してみましょう。&lt;/p&gt; &lt;h2 id=&quot;ファイル追加&quot;&gt;ファイル追加&lt;/h2&gt; &lt;p&gt;gitのリポジトリ(Repository)が存在するフォルダ(&lt;code class=&quot;highlighter-rouge&quot;&gt;temp_test_git&lt;/code&gt;)へバージョン管理したいファイルをコピーするか生成します。&lt;/p&gt; &lt;p&gt;私たちはテストのため&lt;code class=&quot;highlighter-rouge&quot;&gt;temp_test_git&lt;/code&gt;フォルダへ&lt;code class=&quot;highlighter-rouge&quot;&gt;test text&lt;/code&gt;を書いた&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;ファイルを生成しました。&lt;/p&gt; &lt;h2 id=&quot;git-status&quot;&gt;git status&lt;/h2&gt; &lt;p&gt;gitのリポジトリ(Repository)の現在状態を確認するため下の&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;コマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;コマンドを実行したら下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status.png&quot; alt=&quot;git status&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;On branch master: 現在のブランチ(branch)はマスター(master)です。gitのブランチ(branch)に関しては別のブログポストで紹介します。&lt;/li&gt; &lt;li&gt;No commits yet: まだ、コミット(commit)をしてない状態です。コミット(commit)はバージョン(変更履歴)を意味します。まだ、バージョン(変更履歴)を作ってない状態を意味します。&lt;/li&gt; &lt;li&gt;Untracked files: gitがバージョン(変更履歴)管理をしてないファイルリストです。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;私たちはまだgitに&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;ファイルをバージョン(変更履歴)管理するように教えてくれませんでした。そのため、&lt;code class=&quot;highlighter-rouge&quot;&gt;Untracked files&lt;/code&gt;へ私たちが作った&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;ファイルが存在します。&lt;/p&gt; &lt;h2 id=&quot;git-add&quot;&gt;git add&lt;/h2&gt; &lt;p&gt;私たちが作った新しファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;)をgitへバージョン(変更履歴)管理対象であることを教える必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;コマンドでgitへ&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;フィルはバージョン(変更履歴)管理対象てあることを教えてみましょう。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# add single file&lt;/span&gt; git add test.txt &lt;span class=&quot;c&quot;&gt;# add multiple files&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# git add test.txt test2.txt test3.txt&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add all files&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# git add .&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;コマンドでgitが新しく追加されたファイルがバージョン(変更履歴)管理対象で認識されてるかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;コマンドを実行したら先の画面とは違う画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-after-add.png&quot; alt=&quot;git status after executing git add command&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Changes to be committed: gitが次のバージョン(変更履歴)管理をするためのファイルリストです。私たちはファイルを新しく追加したので&lt;code class=&quot;highlighter-rouge&quot;&gt;new file&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;text.txt&lt;/code&gt;が追加されたことが見えます。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;このように&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;を使ってファイルを追加するプロセスがある理由は今回のバージョン(変更履歴)へ追加したくないファイルが実際のプログラムを作成する時存在するからです。例えば、ビルドされた結果物、DBの情報、ID/PWが保存されてるファイルや臨時でログを表示するため作成したコード(console.log / printなど)が含まれていてバージョン(変更履歴)とは無関係な内容を区分するため使います。&lt;/p&gt; &lt;h2 id=&quot;git-commit&quot;&gt;git commit&lt;/h2&gt; &lt;p&gt;私たちはgitにバージョン(変更履歴)へ追加したいファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;git addd&lt;/code&gt;コマンドを使って教えてあげました。しかし、実際バージョン(変更履歴)管理はまだ出来てないです。ただgitに新しファイルがあることを教えただけです。実際バージョン(変更履歴)管理をするため&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;を使ってバージョン(変更履歴)を生成します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;このように```git commit``コマンドを実行したらバージョン(変更履歴)を生成する画面が実行されます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-commit.png&quot; alt=&quot;git commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;この画面は&lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;と言うドキュメント編集ツールが実行された画面です。ドキュメントを編集するためキーボードで&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;(insert)を押して変更履歴の内容を作成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-commit-with-message.png&quot; alt=&quot;git commit with message&quot; /&gt;&lt;/p&gt; &lt;p&gt;作成を完了したらキーボードの&lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt;ボタンを押して&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;(write-quit)を入力して変更履歴を作成します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-complete-commit.png&quot; alt=&quot;git completed commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;変更履歴が作成されたら上記のようなメッセージが見えます。&lt;/p&gt; &lt;h2 id=&quot;git-log&quot;&gt;git log&lt;/h2&gt; &lt;p&gt;バージョン(変更履歴)が上手く生成されたかを確認するため&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;コマンドを実行します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;上のように&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;を実行したら現在作成したバージョン(変更履歴)を確認することができます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-log.png&quot; alt=&quot;git log&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Author: バージョン(変更履歴)を作った人と作成者のメール(git configで登録したユーザー名とメール)&lt;/li&gt; &lt;li&gt;Date: バージョン(変更履歴)の生成日時&lt;/li&gt; &lt;li&gt;Dateの下には&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;を使って作成したメッセージが見えます。&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;ファイル修正の場合&quot;&gt;ファイル修正の場合&lt;/h2&gt; &lt;p&gt;ファイルを修正する場合も上記と同じ方法でします。まず、下のように&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;コマンドを使って現在の状態を確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;まだ何も変更してないので変更内容がないとgitが教えてくれます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-no-change.png&quot; alt=&quot;git status no change&quot; /&gt;&lt;/p&gt; &lt;p&gt;じゃ、&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;ファイルの内容を&lt;code class=&quot;highlighter-rouge&quot;&gt;test text&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;test string&lt;/code&gt;で修正して&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;を実行してみましょう。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;今回は変更の内容があるため下記のような画面が見えます。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-with-modification.png&quot; alt=&quot;git status with modification&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;modified: 修正したファイルを意味します。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;今度は```git addd``を使ってgitへ変更した内容があることを教えてあげます。言い換えれバージョン(変更履歴)へ記録するファイルを追加します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add test.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;で状態を確認します。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-after-commit.png&quot; alt=&quot;git status after commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;先とは違って文字も緑で&lt;code class=&quot;highlighter-rouge&quot;&gt;no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)&lt;/code&gt;メッセージもないことが分かります。gitへバージョン(変更履歴)へ&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;ファイルを上手く追加したことが分かります。&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;を使ってバージョン(変更履歴)を生成します。バージョンメッセージ(変更履歴メッセージ)には&lt;code class=&quot;highlighter-rouge&quot;&gt;edit 'text' to 'string'&lt;/code&gt;と入力しました。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;そして&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;でバージョン(変更履歴)が上手く生成されたかを確認します。&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-log-with-new-version.png&quot; alt=&quot;git log with new version&quot; /&gt;&lt;/p&gt; &lt;p&gt;上のようにバージョン(変更履歴)が上手く生成されたことが確認できます。&lt;/p&gt; &lt;h2 id=&quot;要約&quot;&gt;要約&lt;/h2&gt; &lt;p&gt;バージョン(変更履歴)を生成する方法について勉強しました。全般的に要約すると下記のようです。&lt;/p&gt; &lt;ol&gt; &lt;li&gt;ファイル追加または変更&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;で追加または変更されたフィアるを確認&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;でバージョン(変更履歴)へ追加したいファイルを登録&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;でバージョン(変更履歴)へ追加したファイルが登録されたかを確認&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;でバージョン(変更履歴)へメッセージを追加して生成&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;で生成されたバージョン(変更履歴)を確認&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;上記のような方法で新しバージョン(変更履歴)を生成します。&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">概要 以前のブログで(リポジトリ生成)でgitのリポジトリ(Repository)を生成する方法を勉強しました。今回は生成されたgitのリポジトリ(Repository)へバージョン管理をするためバージョン(変更履歴)を生成する方法に関して勉強してみましょう。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/git/create-stage.jpg"/></entry></feed>