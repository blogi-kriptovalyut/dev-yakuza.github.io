<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/ko/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/ko/" rel="alternate" type="text/html"/><updated>2018-11-26T18:23:25+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ko"><title type="html">vagrant 설치 및 사용법</title><link href="https://dev-yakuza.github.io/ko/environment/vagrant-install-and-usage/" rel="alternate" type="text/html" title="vagrant 설치 및 사용법"/><published>2018-11-25T00:00:00+09:00</published><updated>2018-11-26T17:47:10+09:00</updated><id>https://dev-yakuza.github.io/environment/vagrant_install_and_usage-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/environment/vagrant-install-and-usage/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;백엔드(backend) - 서버를 개발하기 위해서 서버와 동일한 환경을 구축하려고 합니다. 여기에서는 vagrant를 사용하여 가상 머신을 만드는 방법을 소개합니다.&lt;/p&gt; &lt;h2 id=&quot;virtualbox-설치&quot;&gt;virtualbox 설치&lt;/h2&gt; &lt;p&gt;vagrant는 가상 머신을 쉽게 만들고 관리해주는 툴입니다. 다시말해, 가상 환경위에 가상 머신을 설치하고 관리해주는 툴입니다. 따라서 가상 머신을 돌릴 가상 환경은 vagrant의 관리밖입니다. 가상 환경을 만들어주는 여러 툴이 있지만 여기에서는 virtualbox를 활용하겠습니다.&lt;/p&gt; &lt;p&gt;아래에 링크를 눌러 virtualbox의 다운로드 페이지로 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;virtualbox: &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;아래와 같은 화면에서 자신의 PC에 해당하는 다운로드 파일을 다운로드받아 설치합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_download.png&quot; alt=&quot;virtualbox donwload page&quot; /&gt;&lt;/p&gt; &lt;p&gt;virtualbox 다운로드 및 설치 과정은 일반적인 소프트웨어를 설치하는 것과 동일하기 때문에 자세한 설명은 생략하겠습니다.&lt;/p&gt; &lt;p&gt;설치가 완료하고 virtualbox를 실행하면 아래와 같은 화면을 볼수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox_installed.png&quot; alt=&quot;virtualbox installed&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;vagrant-설치&quot;&gt;vagrant 설치&lt;/h2&gt; &lt;p&gt;virtualbox 설치로 이제 가상 환경을 만들 수 있습니다. 이제 가상 환경에서 돌아갈 가상 머신을 쉽고 간단하게 만들 수 있게 도와주는 vagrant의 설치 방법에 대해서 알아봅니다.&lt;/p&gt; &lt;p&gt;아래에 링크를 눌러 vagrant 다운로드 사이트로 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;vagrant: &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;위에 링크를 눌러 vagrant 다운로드 사이트로 이동하면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/vagrant_site.png&quot; alt=&quot;vagrant download site&quot; /&gt;&lt;/p&gt; &lt;p&gt;자신의 PC의 OS에 맞는 설치 파일을 선택하여 다운로드합니다. 역시 vagrant의 다운로드 및 설치 방법은 일반적인 소프트웨어를 다운로드하고 설치하는 방법과 동일하기 때문에 설명을 생략하겠습니다.&lt;/p&gt; &lt;p&gt;설치가 완료되면 아래에 명령어를 실행하여 vagrant가 잘 설치되었는지 확인합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;vagrant가 잘 설치되었다면 아래와 같이 설치된 vagrant의 버전을 확인할 수 있습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vagrant 2.2.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;box-추가&quot;&gt;box 추가&lt;/h2&gt; &lt;p&gt;vagrant가 가상 머신을 만들기 위해 사용할 box를 추가합니다. box는 가상 머신이 될 OS와 OS에 포함된 소프트웨어들을 모아둔 패키지입니다. 아래는 기본이 되는 공식 box와 vagrant 유저들이 만든 box의 사이트입니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 box 사이트: &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;&lt;/li&gt; &lt;li&gt;유저 box 사이트: &lt;a href=&quot;http://www.vagrantbox.es/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;아래에 vagrant 명령어를 통해 box를 자신의 PC에 추가합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 box 추가&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos/7 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;유저 box 추가&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add centos66 https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.0.0/centos-6.6-x86_64.box &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리는 공식 box인 &lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;를 사용할 예정입니다&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 &lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt;:&lt;a href=&quot;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://app.vagrantup.com/bento/boxes/ubuntu-16.04&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;아래에 vagrant 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;bento/ubuntu-16.04&lt;/code&gt; box를 자신의 PC에 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 vagrant 명령어로 추가된 box 리스트를 확인할 수 있습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;만약 잘못된 box를 추가하였다면 아래에 vagrant 명령어로 추가된 box를 제거할 수 있습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box remove bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;가상-머신-설정-생성&quot;&gt;가상 머신 설정 생성&lt;/h2&gt; &lt;p&gt;아래에 vagrant 명령어를 통해 vagrant와 추가한 box를 이용하여 가상 머신을 설정 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# mkdir create your project folder&lt;/span&gt; mkdir temp &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp vagrant init bento/ubuntu-16.04 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;명령어를 실행한 폴더(temp)에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; 파일이 생성된 것을 확인할 수 있습니다. 아래는 주석 처리(&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;)가 된 부분을 제외한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;의 내용입니다.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bento/ubuntu-16.04&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;가상-머신-생성&quot;&gt;가상 머신 생성&lt;/h2&gt; &lt;p&gt;위에서 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;를 아래에 vagrant 명령어로 vagrant를 사용하여 가상 머신을 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리가 다운로드하고 설치한 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualbox&lt;/code&gt;를 실행해 보면 가상 머신이 생성된 것을 확인할 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/environment/vagrant-install-and-usage/virtualbox-with-machine.png&quot; alt=&quot;virtualbox with virtual machine&quot; /&gt;&lt;/p&gt; &lt;p&gt;아래에 vagrant 명령어를 통해 가상 머신에 접근합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 명령어를 통해 가상 머신에서 로컬 PC 환경으로 나옵니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;가상-머신-중지&quot;&gt;가상 머신 중지&lt;/h2&gt; &lt;p&gt;가상 머신에 사용을 중지하고 싶을 때, 아래에 vagrant 명령어를 실행합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant halt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;가상-머신-삭제&quot;&gt;가상 머신 삭제&lt;/h2&gt; &lt;p&gt;가상 머신이 더 이상 필요하지 않을 때, 아래에 vagrant 명령어로 가상 머신을 삭제합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;이것으로 vagrant를 이용한 가상 머신을 만드는 방법을 살펴보았습니다. 앞으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; 파일을 수정하거나 가상 머신안에 개발 환경을 구축하는 방법에 대해 소개할 예정입니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 백엔드(backend) - 서버를 개발하기 위해서 서버와 동일한 환경을 구축하려고 합니다. 여기에서는 vagrant를 사용하여 가상 머신을 만드는 방법을 소개합니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/environment/vagrant-install-and-usage.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 시뮬레이터 변경</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-change-simulator/" rel="alternate" type="text/html" title="iOS 시뮬레이터 변경"/><published>2018-11-23T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-change-simulator-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-change-simulator/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;RN(react native)으로 앱을 개발할 때 항상 아래에 명령어를 이용하여 iOS를 개발합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;개발할 때는 크게 문제가 없는데 개발을 완료하고 여러 디바이스(Device)에서 테스트를 하고 싶을 때는 항상 불편했습니다. 그래서 명령어를 사용해서 시뮬레이터(simulator)를 변경하는 방법을 소개합니다.&lt;/p&gt; &lt;h2 id=&quot;ios-시뮬레이터-확인&quot;&gt;iOS 시뮬레이터 확인&lt;/h2&gt; &lt;p&gt;현재 사용 가능한 iOS 시뮬레이터(simulator)를 확인합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl list devices &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;시뮬레이터-변경&quot;&gt;시뮬레이터 변경&lt;/h2&gt; &lt;p&gt;이제 아래에 명령어를 통해 사용하고 싶은 시뮬레이터(simulator)로 RN(react native)를 실행합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 명령어 리스트는 시뮬레이터(simulator)를 변경하는 예제입니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 5s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 6s Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 7 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone 8 Plus&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone SE&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone X&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XR&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPhone XS Max&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Air 2&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad&quot;&lt;/span&gt; react-native run-ios &lt;span class=&quot;nt&quot;&gt;--simulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad Pro&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 RN(react native)으로 앱을 개발할 때 항상 아래에 명령어를 이용하여 iOS를 개발합니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-change-simulator.jpg"/></entry><entry xml:lang="ko"><title type="html">안드로이드 빌드 및 테스트</title><link href="https://dev-yakuza.github.io/ko/react-native/android-running-on-device/" rel="alternate" type="text/html" title="안드로이드 빌드 및 테스트"/><published>2018-11-21T00:00:00+09:00</published><updated>2018-11-24T09:08:46+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-running-on-device-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-running-on-device/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지금까지 개발한 RN(react native)를 안드로이드(Android)용으로 빌드하여 디바이스에 올리고 테스트하는 방법을 소개하겠습니다. 여기에서는 Mac(맥)에서 안드로이드(Android)용 서명 키(Signing Key)를 생성하고 빌드할 예정입니다. 이 블로그는 RN(react native)의 공식 사이트를 참고하였으며 상세한 설명은 공식 사이트를 참고하시기 바랍니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://facebook.github.io/react-native/docs/signed-apk-android&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/signed-apk-android&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;안드로이드-서명-키-생성&quot;&gt;안드로이드 서명 키 생성&lt;/h2&gt; &lt;p&gt;Mac에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;터미널&lt;/code&gt; 프로그램을 열고 RN(react native) 프로젝트 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt; 폴더로 이동합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;your path]/android/app &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 명령어를 통해 안드로이드(Android)용 서명 키(Signing Key)를 발급합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/span&gt; keytool &lt;span class=&quot;nt&quot;&gt;-genkey&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key-name].keystore &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;key &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyalg&lt;/span&gt; RSA &lt;span class=&quot;nt&quot;&gt;-keysize&lt;/span&gt; 2048 &lt;span class=&quot;nt&quot;&gt;-validity&lt;/span&gt; 10000 Enter keystore password: Re-enter new password: What is your first and last name? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organizational unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your organization? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your City or Locality? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the name of your State or Province? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: What is the two-letter country code &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this unit? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unknown]: Is &lt;span class=&quot;nv&quot;&gt;CN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;OU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown, &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt; correct? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;no]: Enter key password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &amp;lt;my-key-alias&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RETURN &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;same as keystore password&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;전부 입력을 하고 나면 RN(react native) 프로젝트 폴더 하위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt; 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-release-key.keystore&lt;/code&gt; 파일이 생성된 것을 확인할 수 있습니다.&lt;/p&gt; &lt;h2 id=&quot;서명-키-설정&quot;&gt;서명 키 설정&lt;/h2&gt; &lt;p&gt;서명 키(Signing Key)가 생성되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;에 키를 설정해야합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;android/gradle.properties&lt;/code&gt; 파일을 열고 아래에 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MYAPP_RELEASE_STORE_FILE=my-release-key.keystore MYAPP_RELEASE_KEY_ALIAS=my-key-alias MYAPP_RELEASE_STORE_PASSWORD=***** MYAPP_RELEASE_KEY_PASSWORD=***** &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 코드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; 파일에 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... defaultConfig { ... } signingConfigs { release { if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) { storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD } } } buildTypes { release { ... signingConfig signingConfigs.release } } } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;빌드&quot;&gt;빌드&lt;/h2&gt; &lt;p&gt;RN(react native)가 있는 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; 폴더로 이동한 후 아래에 명령어로 빌드합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;빌드된 파일은 아래에 경로에 생성됩니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android/app/build/outputs/apk/release/app-release.apk &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리는 이 부분에서 아래와 같은 에러가 발생했습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... Execution failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;task &lt;span class=&quot;s1&quot;&gt;':app:lintVitalRelease'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Lint found fatal errors &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;assembling a release target. ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;좋은 방법은 아니지만, 우리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; 파일에 아래에 내용을 추가하여 이 부분을 해결했습니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android { ... lintOptions { checkReleaseBuilds false // Or, if you prefer, you can continue to check for errors in release builds, // but continue the build even when errors are found: abortOnError false } ... } ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;빌드된-파일-테스트&quot;&gt;빌드된 파일 테스트&lt;/h2&gt; &lt;p&gt;안드로이드 디바이스(Android Device)에 기존에 설치된 앱을 삭제하고 아래에 명령어를 실행하여 빌드 파일을 위한 테스트를 진행하세요.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;에러-대응&quot;&gt;에러 대응&lt;/h2&gt; &lt;p&gt;공식 사이트에 내용을 통해 위와 같이 진행했지만 우리는 실제로 아래와 명령어를 통해 빌드 파일을 생성할 때와&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 명령어로 직접 디바이스에서 테스할 때,&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래와 같은 에러가 발생하였습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.RuntimeException: Unable to load script from assets &lt;span class=&quot;s1&quot;&gt;'index.android.bundle'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Make sure your bundle is packaged correctly or you&lt;span class=&quot;s1&quot;&gt;'re running a packager server. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;해결 방법으로 아래의 명령어를 먼저 입력하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.android.bundle&lt;/code&gt;을 생성한 후&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... react-native bundle &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; android &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--entry-file&lt;/span&gt; index.js &lt;span class=&quot;nt&quot;&gt;--bundle-output&lt;/span&gt; android/app/src/main/assets/index.android.bundle ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;빌드를 하거나&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;직접 디바이스에 올려 테스트했습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;span class=&quot;nt&quot;&gt;--variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지금까지 개발한 RN(react native)를 안드로이드(Android)용으로 빌드하여 디바이스에 올리고 테스트하는 방법을 소개하겠습니다. 여기에서는 Mac(맥)에서 안드로이드(Android)용 서명 키(Signing Key)를 생성하고 빌드할 예정입니다. 이 블로그는 RN(react native)의 공식 사이트를 참고하였으며 상세한 설명은 공식 사이트를 참고하시기 바랍니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-running-on-device.jpg"/></entry><entry xml:lang="ko"><title type="html">안드로이드 디바이스 테스트</title><link href="https://dev-yakuza.github.io/ko/react-native/android-test-on-device/" rel="alternate" type="text/html" title="안드로이드 디바이스 테스트"/><published>2018-11-20T00:00:00+09:00</published><updated>2018-11-22T22:41:56+09:00</updated><id>https://dev-yakuza.github.io/react-native/android-test-on-device-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/android-test-on-device/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;안드로이드(Android) 개발은 역시 에뮬레이터에서 개발하기가 너무 힘드네요. RN(react native) 프로젝트를 안드로이드용으로 개발할 때 에뮬레이터가 아닌 안드로이드(Android) 디바이스에서 테스트하도록 설정해보겠습니다. RN(react native)를 iOS 디바이스에서 테스트하는 방법이 궁금하시는 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;를 확인해 주시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;준비물&quot;&gt;준비물&lt;/h2&gt; &lt;p&gt;당연한 이야기 이지만 RN(react native) 프로젝트를 안드로이드(Android) 디바이스에서 테스트하려면 아래와 같은 준비물이 필요합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;안드로이드 스튜디오(Android Studio)&lt;/li&gt; &lt;li&gt;안드로이드(Android) 디바이스&lt;/li&gt; &lt;li&gt;RN(react native) 프로젝트&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;PC에 RN(react native) 개발 환경을 구성하는 방법에 대해서 궁금하신 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/installation/&quot; target=&quot;_blank&quot;&gt;RN 설치&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;안드로이드-디바이스-테스트&quot;&gt;안드로이드 디바이스 테스트&lt;/h2&gt; &lt;p&gt;RN(react native)의 공식 사이트에 가면 RN(react native)를 안드로이드(Android)에서 테스트하는 방법에 대해서 자세히 나와있습니다. 그럼 한번 따라해보도록 하겠습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/react-native/docs/running-on-device&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;안드로이드-디바이스-설정&quot;&gt;안드로이드 디바이스 설정&lt;/h2&gt; &lt;p&gt;사용하고 있는 안드로이드(Android) 디바이스의 개발자 옵션을 활성화 시켜야합니다. 안드로이드(Android) 디바이스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;설정&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;디바이스 정보&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드 번호&lt;/code&gt;를 여러번 누르면 개발자 옵션이 활성화됩니다.&lt;/p&gt; &lt;p&gt;개발자 옵션이 활성화되었다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;USB 디버깅&lt;/code&gt; 기능을 활성화 해야합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;설정&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;개발자 옵션&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;USB 디버깅&lt;/code&gt; 메뉴를 선택하여 USB 디버깅 기능을 활성화 시킵니다.&lt;/p&gt; &lt;h2 id=&quot;안드로이드-디바이스-연결&quot;&gt;안드로이드 디바이스 연결&lt;/h2&gt; &lt;p&gt;안드로이드(Android) 디바이스를 USB를 이용해서 PC와 연결합니다. 안드로이드(Android) 디바이스에서 USB 디버깅을 허용할지 묻는 메세지가 나오면 허용해 테스트가 가능한 상태를 만듭니다.&lt;/p&gt; &lt;h2 id=&quot;안드로이드-디바이스에서-실행&quot;&gt;안드로이드 디바이스에서 실행&lt;/h2&gt; &lt;p&gt;안드로이드(Android) 디바이스가 연결된 상태에서 안드로이드 스튜디오(Android Studio)를 실행하고 왼쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug app&lt;/code&gt; 버튼(벌레 위에 화살표가 있는 버튼)을 누르면 자신의 에뮬레이터 이외에 자신의 디바이스가 보입니다. 자신의 디바이스를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;를 누르면 디바이스에서 자신이 개발한 RN(react native) 앱이 기동하시는 걸 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;주의: 디바이스에 테스트를 위한 실행입니다. 따라서 에뮬레이터와 동일하게 PC에 개발서버가 활성화되고 그 서버와 디바이스가 통신하여 테스트가 가능하도록 동작합니다. 따라서 같은 Wifi 환경 / 네트워크가 아니면 서버를 찾을 수 없기 때문에 디바이스 테스트가 불가능합니다.&lt;/p&gt; &lt;h2 id=&quot;안드로이드-50-버전-이하&quot;&gt;안드로이드 5.0 버전 이하&lt;/h2&gt; &lt;p&gt;테스트하려는 디바이스가 안드로이드(Android) 버전이 5.0이하인 경우 몇가지 추가적으로 수정을 해 주셔야합니다. 밑에 나온 동작으로 우리는 안드로이드 4.4.2에서 RN(react native) 프로젝트를 구동시켜 테스트하였습니다.&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; 파일을 아래와 같이 수정합니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaultConfig { ... ndk { // abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; } } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;안드로이드 스튜디오(Android Studio)를 열고 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt;버튼을 눌러 동기화합니다. 동기화가 완료되면 RN(react native) 프로젝트를 실행합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-android &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;RN(react native)의 서버가 PC에 활성화되고 디바이스에도 어플이 잘 설치되지만 빨간 에러 화면이 나옵니다.&lt;/p&gt; &lt;p&gt;디바이스를 흔들어서 개발자 메뉴(Developer Menu)를 띄웁니다. 개발자 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dev Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug server host &amp;amp; port for device&lt;/code&gt;를 선택합니다. IP 주소와 포트를 넣는 화면이 나옵니다. 거기에 자신의 피씨 IP와 8081 포트를 입력합니다.(ex&amp;gt; 10.0.1.1:8081) 다시 개발자 메뉴로 돌아와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Reload JS&lt;/code&gt;를 눌러 프로젝트를 재실행합니다.&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;안드로이드(Android) 디바이스에서 RN(react native)를 기동시키는 방법을 살펴보았습니다. 이제 에뮬레이터에서 벗어나 실제 디바이스에서 테스트해 보세요.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 안드로이드(Android) 개발은 역시 에뮬레이터에서 개발하기가 너무 힘드네요. RN(react native) 프로젝트를 안드로이드용으로 개발할 때 에뮬레이터가 아닌 안드로이드(Android) 디바이스에서 테스트하도록 설정해보겠습니다. RN(react native)를 iOS 디바이스에서 테스트하는 방법이 궁금하시는 분은 이전 블로그인 iOS 디바이스 테스트를 확인해 주시기 바랍니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/android-test-on-device.jpg"/></entry><entry xml:lang="ko"><title type="html">Firebase Admob</title><link href="https://dev-yakuza.github.io/ko/react-native/react-native-firebase-admob/" rel="alternate" type="text/html" title="Firebase Admob"/><published>2018-11-17T00:00:00+09:00</published><updated>2018-11-22T22:41:56+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-firebase-admob-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-firebase-admob/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;우리는 구글 애드몹(Google Admob)을 사용하여 앱에 광고를 표시하고 있습니다. 이전에는 react-native-admob이라는 라이브러리를 사용했지만 구글 애드몹(Google Admob)이외에도 애널리틱스(Analytics)등 여러 기능을 사용하게 되어 통합적으로 사용할 수 있는 라이브러리를 찾다가 react-native-firebase라는 유용한 라이브러리를 찾게 되었습니다.&lt;/p&gt; &lt;p&gt;여기에서는 구글 파이어베이스(google firebase)를 사용하여 무료로 구글 애드몹(Google Admob), 애널리틱스(Analytics)를 사용하는 방법에 대해서 알아보겠습니다.&lt;/p&gt; &lt;p&gt;간단하게 구글 애드몹(Google Admob)만을 사용하고 싶으신 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;구글 애드몹(Google Admob)&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt; &lt;p&gt;아래에 링크는 react-native-firebase 라이브러리의 공식 페이지입니다. 자세한 내용은 공식 사이트에서 확인해 주세요.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://github.com/invertase/react-native-firebase&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-firebase&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;라이브러리-설치&quot;&gt;라이브러리 설치&lt;/h2&gt; &lt;p&gt;아래에 명령어를 사용하여 react-native-firebase 라이브러리를 설치합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;라이브러리-링크&quot;&gt;라이브러리 링크&lt;/h2&gt; &lt;p&gt;아래에 명령어를 사용하여 react-native-firebase 라이브러리를 RN(react native) 프로젝트에 연결합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-firebase &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;firebase-프로젝트-생성&quot;&gt;firebase 프로젝트 생성&lt;/h2&gt; &lt;p&gt;다음은 구글의 파이어베이스(Google Firebase)에서 프로젝트를 생성할 필요가 있습니다. 아래에 링크를 눌러 구글 파이어베이스(Google Firebase)로 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;구글 파이어베이스(Google Firebase): &lt;a href=&quot;https://firebase.google.com&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://firebase.google.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase.png&quot; alt=&quot;google firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGN IN&lt;/code&gt; 버튼을 눌러 로그인합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-after-login.png&quot; alt=&quot;google firebase after login&quot; /&gt;&lt;/p&gt; &lt;p&gt;로그인을 했다면 오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;GO TO CONSOLE&lt;/code&gt;을 눌러 구글 파이어베이스 콘솔(Google Firebase Console)로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console.png&quot; alt=&quot;google firebase console&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 파이어베이스 콘솔(Google Firebase Console)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add project&lt;/code&gt;를 눌러 프로젝트를 추가합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-add-project.png&quot; alt=&quot;google firebase console add project&quot; /&gt;&lt;/p&gt; &lt;p&gt;프로젝트 정보를 추가한 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create project&lt;/code&gt; 버튼을 눌러 프로젝트를 생성합니다.&lt;/p&gt; &lt;h2 id=&quot;구글-애드몹-설정&quot;&gt;구글 애드몹 설정&lt;/h2&gt; &lt;p&gt;구글 애드몹(Google Admob)에 광고를 설정해야 합니다. 구글 파이어베이스 콘솔(Google Firebas Console)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Grow&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Admob&lt;/code&gt;을 선택하면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-admob.png&quot; alt=&quot;google firebase console admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;화면 중앙 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;linking your apps in AdMob.&lt;/code&gt; 링크를 누르면 구글 애드몹(Google Admob) 페이지로 이동됩니다.&lt;/p&gt; &lt;p&gt;구글 애드몹(Google Admob)에 광고를 설정하는 방법은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;구글 애드몹(Google Admob)&lt;/a&gt; 블로그를 참고하여 설정해 주시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;firebase-ios-설정&quot;&gt;firebase iOS 설정&lt;/h2&gt; &lt;p&gt;구글 파이어베이스 콘솔(Google Firebase Console)에서 프로젝트를 선택하면 다음과 같은 화면이 보입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project.png&quot; alt=&quot;google firebase console project&quot; /&gt;&lt;/p&gt; &lt;p&gt;중앙에 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt; 버튼을 눌러 iOS 설정 화면으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/google-firebase-console-project-ios.png&quot; alt=&quot;google firebase console project ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;개발한 앱에 번들 ID(bundle ID)를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt; 버튼을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/googleservice-info-plist-download.png&quot; alt=&quot;GoogleService-Info.plist download&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 파이어베이스(Google Firebase)가 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt; 파일을 다운로드하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;info.plist&lt;/code&gt;와 동일한 위치에 추가합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleService-Info.plist&lt;/code&gt; 파일 추가를 완료했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; 버튼을 클릭합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/add-firebase-sdk.png&quot; alt=&quot;add Firebase SDK&quot; /&gt;&lt;/p&gt; &lt;p&gt;화면에 표시된 방식으로 구글 파이어베이스 SDK(Google Firebase SDK)를 RN(react native) 프로젝트에 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod init &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 파이어베이스 SDK(Google Firebase SDK) 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blaboo'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Uncomment the next line if you're using Swift or would like to use dynamic frameworks&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use_frameworks!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for blaboo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Core'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/AdMob'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blabooTests'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inherit!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:search_paths&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pods for testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 파이어베이스 SDK(Google Firebase SDK) 설치를 설치합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install &lt;span class=&quot;c&quot;&gt;# pod update&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/edit-appdelegate.png&quot; alt=&quot;edit appdelegate.m for firebase&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt; 파일에 위와 같이 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 파이어베이스 SDK(Google Firebase SDK)를 임포트합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIRApp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GADMobileAds&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configureWithApplicationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031~8295071692&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 파이어베이스 SDK(Google Firebase SDK)를 초기화합니다. 그 다음 구글 애드몹(Google Admob)의 앱 ID(App ID)를 입력하여 구글 애드몹(Google Admobe)을 초기화합니다. 구글 애드몹의 앱 ID(App ID)를 얻는 방법은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;구글 애드몹(Google Admob)&lt;/a&gt;를 참고하시기 바랍니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/connect-firebase-to-app.png&quot; alt=&quot;connect firebase to app&quot; /&gt;&lt;/p&gt; &lt;p&gt;우리는 이 부분에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Skip this step&lt;/code&gt;을 눌러 이 부분을 건너 뛰었습니다.&lt;/p&gt; &lt;h2 id=&quot;firebase-안드로이드android-설정&quot;&gt;firebase 안드로이드(Android) 설정&lt;/h2&gt; &lt;p&gt;구글 파이어베이스 콘솔(Google Firebase Console)에서 왼쪽 상단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Project Overview&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/firebase-project-overview.png&quot; alt=&quot;Google Firebase Console Project Overview&quot; /&gt;&lt;/p&gt; &lt;p&gt;상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+ Add app&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;안드로이드(Android) 아이콘&lt;/code&gt;을 눌러 안드로이드(Android) 프로젝트 설정으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/register-android.png&quot; alt=&quot;Google Firebase Android app register&quot; /&gt;&lt;/p&gt; &lt;p&gt;안드로이드 패키지명(Android Package Name)을 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Register app&lt;/code&gt;을 선택합니다.&lt;/p&gt; &lt;p&gt;RN(react native)에서 안드로이드 패키지명을 수정하고 싶으신 분은 아래에 항목을 진행해 주세요.&lt;/p&gt; &lt;h3 id=&quot;안드로이드-패키지명-수정&quot;&gt;안드로이드 패키지명 수정&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/BUCK&lt;/code&gt; 파일 수정&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... android_build_config( ... package = &quot;package_name&quot;, ) ... android_resource( ... package = &quot;package_name&quot;, ... ) ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/AndroindManifest.xml&lt;/code&gt; 파일 수정&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainActivity.java&lt;/code&gt; 파일 수정&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/ProjectName/MainApplication.java&lt;/code&gt; 파일 수정&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/set-google-services-json.png&quot; alt=&quot;Google Firebase google-services.json setting&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 파이어베이스(Google Firebase)가 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt; 파일을 RN(react native) 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app&lt;/code&gt; 폴더에 복사합니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;버튼을 눌러 다음 단계로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/setting-android.png&quot; alt=&quot;Google Firebase setting on android&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트가 있는 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/build.gradle&lt;/code&gt; 파일을 열고 아래에 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Add this line&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms:google-services:4.0.1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;google()&lt;/code&gt;이 포함되어 있어야 하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;jcenter()&lt;/code&gt;보다 위에 선언되어 있어야 됩니다.&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트가 있는 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; 파일을 열고 아래에 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.gms:play-services-base:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.firebase:firebase-core:16.0.4'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.google.firebase:firebase-ads:16.0.1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;그리고 동일한 파일 제일 하단에 아래에 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.gms.google-services'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;googleservices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GoogleServicesPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableVersionCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;마지막으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/java/com/[app name]/MainApplication.java&lt;/code&gt; 파일에 아래와 같이 소스를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.ads.MobileAds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebasePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RNFirebaseAdMobPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MobileAds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ca-app-pub-7987914246691031~9800293270&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위에 소스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;MobileAds.initialize(this, &quot;ad app id&quot;);&lt;/code&gt; 부분에 구글 애드몹(Google Admob)에서 생성한 앱 아이디(App ID)를 추가합니다. 구글 애드몹(Google Admob)의 앱 아이디(App ID)를 생성하는 방법은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-admob/&quot; target=&quot;_blank&quot;&gt;구글 애드몹(Google Admob)&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt; &lt;p&gt;안드로이드 스튜디오(Android Studio)를 열면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;을 동기화할지 물어봅니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Sync now&lt;/code&gt;를 눌러 동기화 해줍니다.&lt;/p&gt; &lt;h2 id=&quot;소스-추가&quot;&gt;소스 추가&lt;/h2&gt; &lt;p&gt;react-native-firebase의 설정을 완료했습니다. 이제 RN(react native)의 코드를 수정하여 구글 애드몹(Google Admob)이 잘 표시되도록 합니다.&lt;/p&gt; &lt;p&gt;아래의 소스는 react-native-firebase를 사용하여 banner를 표시하는 예제입니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-firebase를 로딩합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;admob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unitId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ca-app-pub-7987914246691031/7659403606&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SMART_BANNER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAdLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Advert loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위와 같이 소스를 추가하고 RN(react native) 프로젝트를 실행하면 배너가 잘 표시되는 것을 확인할 수 있습니다.&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;RN(react native) 프로젝트에 react-native-firebase 라이브러리를 사용하여 구글 애드몹(Google Admobe)을 적용하는 법을 살펴보았습니다. 이렇게 react-native-firebase를 설정하면 애널리틱스(Analytics)는 자동으로 설정되어 분석이 가능하게 됩니다.&lt;/p&gt; &lt;p&gt;구글 파이어베이스 콘솔(Google Firebase Console)의 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Analytics&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt;를 선택하면, 분석을 하고 있는 것을 확인할 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-firebase-admob/react-native-firebase-analytics.png&quot; alt=&quot;react native firebase analytics&quot; /&gt;&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 우리는 구글 애드몹(Google Admob)을 사용하여 앱에 광고를 표시하고 있습니다. 이전에는 react-native-admob이라는 라이브러리를 사용했지만 구글 애드몹(Google Admob)이외에도 애널리틱스(Analytics)등 여러 기능을 사용하게 되어 통합적으로 사용할 수 있는 라이브러리를 찾다가 react-native-firebase라는 유용한 라이브러리를 찾게 되었습니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-firebase-admob.jpg"/></entry><entry xml:lang="ko"><title type="html">jekyll-last-modified-at</title><link href="https://dev-yakuza.github.io/ko/jekyll/jekyll-last-modified-at/" rel="alternate" type="text/html" title="jekyll-last-modified-at"/><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지금 관리하고 있는 블로그의 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;에&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;를 사용하여 빌드된 시점에 시간을 모든 페이지에 적용하고 있었습니다. 하지만 실제 갱신하지 않은 파일도 빌드한 시점에 시간이 들어가므로 그 모든 파일을 크롤링하느라 실제 갱신한 파일의 크롤링이 늦어지지 않을까 싶은 의문이 들었습니다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 플로그인을 이용하여 실제로 파일이 수정된 경우만 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;에 반영되도록 변경하기로 했습니다.&lt;/p&gt; &lt;h2 id=&quot;플러그인&quot;&gt;플러그인&lt;/h2&gt; &lt;p&gt;아래에 링크를 클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 사이트로 이동하면 모든 설명이 자세히 나와있습니다. 한번 따라해 보도록 하겠습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;jekyll-last-modified-at: &lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/gjtorikian/jekyll-last-modified-at&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;플러그인-설치&quot;&gt;플러그인 설치&lt;/h2&gt; &lt;p&gt;아래에 명령어를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 플러그인을 설치합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-last-modified-at &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;플로그인-사용법&quot;&gt;플로그인 사용법&lt;/h2&gt; &lt;p&gt;파일 수정일을 표시하고 싶은 부분에 아래에 코드중 원하는 형식을 선택하여 삽입합니다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {% last_modified_at %} {% last_modified_at %Y:%B:%A:%d:%S:%R %} {{ page.last_modified_at }} {{ page.last_modified_at | date: '%Y:%B:%A:%d:%S:%R' }} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리는 사용하던 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;을 아래와 같이 수정하였습니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt; --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ post.last_modified_at | date: '%Y-%m-%d' }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;확인&quot;&gt;확인&lt;/h2&gt; &lt;p&gt;실제로 프로젝트를 빌드하여 삽입한 코드를 확인해 본 결과, 실제 파일을 수정한 날짜가 잘 들어가 있는 것을 확인하였습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글의 크롤링에 영향이 있을지 모르지만 일단 실제 시간을 표시함으로써 프로그래머로써 일 처리를 한거 같아 기분이 좋습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지금 관리하고 있는 블로그의 sitemap.xml에</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/jekyll/jekyll-last-modified-at.jpg"/></entry><entry xml:lang="ko"><title type="html">Google Analytics</title><link href="https://dev-yakuza.github.io/ko/react-native/react-native-analytics-bridge/" rel="alternate" type="text/html" title="Google Analytics"/><published>2018-11-14T00:00:00+09:00</published><updated>2018-11-19T23:06:15+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-analytics-bridge-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-analytics-bridge/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;구글 애널리틱스(&lt;a href=&quot;https://marketingplatform.google.com/about/analytics/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;Google Analytics&lt;/a&gt;)를 사용하여 RN(react native)로 제작한 앱을 분석할 수 있습니다. 구글 애널리틱스(Google Analytics)를 이용하여 RN(react native)를 분석해 봅시다.&lt;/p&gt; &lt;h2 id=&quot;라이브러리-설치&quot;&gt;라이브러리 설치&lt;/h2&gt; &lt;p&gt;RN(react native)와 구글 애널리틱스(Google Analytics)를 연동하기 위해서는 &lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#installation-and-linking-libraries&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;GoogleAnalyticsBridge&lt;/a&gt; 라이브러리를 설치해야 합니다. 아래에 코드를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleAnalyticsBridge&lt;/code&gt; 라이브러리를 설치해 주십시오.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-google-analytics-bridge &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래에 명령어로 RN(react native)와 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleAnalyticsBridge&lt;/code&gt;를 연결합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-google-analytics-bridge &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;react-native-google-analytics-bridge 라이브러리를 사용할 준비가 되었습니다. 이제 구글 애널리틱스(Google Analytics)에 연동할 준비를 해야합니다.&lt;/p&gt; &lt;h2 id=&quot;google-analytics&quot;&gt;Google Analytics&lt;/h2&gt; &lt;p&gt;아래에 링크를 눌러 구글 애널리틱스(Google Analytics)로 이동하여 로그인합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;구글 애널리틱스(Google Analytics): &lt;a href=&quot;https://analytics.google.com/analytics/web/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://analytics.google.com/analytics/web/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;로그인후 왼쪽 하단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/create-account-for-mobile.png&quot; alt=&quot;create account for mobile&quot; /&gt;&lt;/p&gt; &lt;p&gt;왼쪽 상단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;+ Create Account&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/click-create-account.png&quot; alt=&quot;click create account&quot; /&gt;&lt;/p&gt; &lt;p&gt;RN(react native)로 만든 자신의 앱 정보를 입력하고 제일 하단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get Tracking ID&lt;/code&gt;버튼을 눌러 트랙킹 아이디(Tracking ID)를 생성합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-analytics-bridge/insert-app-info.png&quot; alt=&quot;insert-app-info&quot; /&gt;&lt;/p&gt; &lt;p&gt;react-native-google-analytics-bridge 라이브러리와 구글 애널리틱스(Google Analytics)를 연동하기 위한 준비가 끝났습니다. 이제 실제로 트랙킹 아이디(Tracking ID)를 이용하여 RN(react native)로 만든 앱을 분석해 보도록하겠습니다.&lt;/p&gt; &lt;h2 id=&quot;분석-코드&quot;&gt;분석 코드&lt;/h2&gt; &lt;p&gt;RN(react native)로 개발된 프로젝트에서 구글 애널리틱스(Google Analytics)로 분석하고 싶은 페이지에 아래의 코드를 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-google-analytics-bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UA-12345-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackScreenView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;네, 이제 전부입니다. 간단하죠? 아래 코드에 자신의 구글 애널리틱스(Google Analytics) 트랙킹 아이디(Tracking ID)를 입력합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GoogleAnalyticsTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;자신의 트랙킹 아이디&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;트랙킹 하고 싶은 페이지를 식별하기 위한 제목을 입력해 줍니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackScreenView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리는 이 코드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;함수에서 사용하고 있습니다. 어디가 적절한 위치인지는 여러분이 판단해서 추가하면 될거 같습니다.&lt;/p&gt; &lt;p&gt;좀 더 깊은 분석을 하고 싶은 분은 공식 홈페이지를 참조해서 react-native-google-analytics-bridge의 다양한 기능을 활용해 보세요.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#usage&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;react-native-google-analytics-bridge&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;알림&quot;&gt;알림&lt;/h2&gt; &lt;p&gt;우리는 앱 분석뿐만아니라 구글 파이어베이스(Google firebase)의 다양한 기능을 사용하기 위해서 react-native-firebase를 통해 앱을 분석하기로 했습니다. 다른 기능을 위해 react-native-firebase 라이브러리를 설정하기만 해도 자동으로 앱을 분석해줍니다. react-native-firebase 라이브러리 설정에 관해서는 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/react-native-firebase-admob/&quot; target=&quot;_blank&quot;&gt;Firebase Admob&lt;/a&gt; 블로그를 참고하시기바랍니다.&lt;/p&gt; &lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://github.com/idehub/react-native-google-analytics-bridge#installation-and-linking-libraries&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;GoogleAnalyticsBridge&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 구글 애널리틱스(Google Analytics)를 사용하여 RN(react native)로 제작한 앱을 분석할 수 있습니다. 구글 애널리틱스(Google Analytics)를 이용하여 RN(react native)를 분석해 봅시다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-analytics-bridge.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS App store 등록</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-app-store/" rel="alternate" type="text/html" title="iOS App store 등록"/><published>2018-11-13T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-app-store-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-app-store/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지금부터 개발한 앱을 iOS 앱 스토어(App Store)에 등록하는 방법에 대해서 알아봅니다. 여기에서는 무료 앱을 등록하기 위한 최소한에 정보가 기록되어있습니다.&lt;/p&gt; &lt;h2 id=&quot;준비-사항&quot;&gt;준비 사항&lt;/h2&gt; &lt;p&gt;iOS 앱 스토어(App Store)에 등록시키기 위해서는 아래와 같은 항목이 필요합니다.&lt;/p&gt; &lt;h3 id=&quot;앱-스토어-정보&quot;&gt;앱 스토어 정보&lt;/h3&gt; &lt;p&gt;아래에 정보는 앱 스토어(App store)에 표시될 정보입니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;이름(최대 30자)&lt;/li&gt; &lt;li&gt;부제(최대 30자)&lt;/li&gt; &lt;li&gt;개인정보 취급방침 URL&lt;/li&gt; &lt;li&gt;기본언어(앱이 지원하지 않는 언어의 국가에서 표시될 기본 언어)&lt;/li&gt; &lt;li&gt;카테고리 x 2&lt;/li&gt; &lt;li&gt;아이폰 5.5인치의 앱 스크린샷&lt;/li&gt; &lt;li&gt;프로모션 텍스트(최대 170자)&lt;/li&gt; &lt;li&gt;키워드(최대 100자)&lt;/li&gt; &lt;li&gt;설명(최대 4000자))&lt;/li&gt; &lt;li&gt;지원 URL&lt;/li&gt; &lt;li&gt;마케팅 URL&lt;/li&gt; &lt;li&gt;저작권&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;제일 어려운건 개인정보 취급방침 URL입니다. 다행이 한국은 개인정보 취급방침을 쉽게 만들수 있도록 도와주는 사이트가 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;개인정보 취급방침: &lt;a href=&quot;https://www.privacy.go.kr/a3sc/per/inf/perInfStep01.do&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.privacy.go.kr/a3sc/per/inf/perInfStep01.do&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;위에 링크를 클릭해 지시사항을 따라서 입력해 줍니다. 완성된 파일을 다운로드하여 서비스 사이트에 업로드합니다.&lt;/p&gt; &lt;h3 id=&quot;앱-심사-정보&quot;&gt;앱 심사 정보&lt;/h3&gt; &lt;p&gt;아래에 정보는 앱을 심사하기 위해 필요한 정보입니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;로그인 정보&lt;/li&gt; &lt;li&gt;연락처&lt;/li&gt; &lt;li&gt;메모&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;심사-지침&quot;&gt;심사 지침&lt;/h2&gt; &lt;p&gt;모두가 잘 알고 있지만 애플의 심사는 까다롭습니다. 저도 지금 3번째 떨어졌고, 아직 등록이 안된 상태입니다. 아래에 애플 심사 지침을 참고하여 애플 심사에 떨어지지 않도록 준비하십시오.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;애플 심사 지침: &lt;a href=&quot;https://developer.apple.com/kr/app-store/review/guidelines/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/kr/app-store/review/guidelines/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;스크린샷 사이즈: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/devd274dd925&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;li&gt;앱 미리보기 사이즈: &lt;a href=&quot;https://help.apple.com/app-store-connect/#/dev4e413fcb8&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://help.apple.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지금부터 개발한 앱을 iOS 앱 스토어(App Store)에 등록하는 방법에 대해서 알아봅니다. 여기에서는 무료 앱을 등록하기 위한 최소한에 정보가 기록되어있습니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-app-store.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS TestFlight</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-testflight/" rel="alternate" type="text/html" title="iOS TestFlight"/><published>2018-11-12T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-testflight-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-testflight/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;iOS는 개발한 앱을 배포하기 전에 자신의 테스터 또는 테스트 버전의 공개 URL을 사용하여 테스트할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 시스템을 가지고 있습니다. 여기에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 이용하여 개발한 앱을 테스트하는 방법에 대해 알아보겠습니다.&lt;/p&gt; &lt;p&gt;이 블로그는 아래에 과정을 끝내신 분을 위한 블로그입니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-running-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 빌드 및 테스트&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program) 등록이나 인증서(Certification) 설정에 관해서는 위에 블로그 내용을 참고하시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;배포용-앱-생성&quot;&gt;배포용 앱 생성&lt;/h2&gt; &lt;p&gt;애플이 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 사용하여 앱을 테스트할 경우 앱 스토어 커넥트(Apple Store Connect)에 배포용 앱을 생성해야합니다. 아래에 링크를 눌러 앱 스토어 커넥트(App Store Connect)에 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;앱 스토어 커넥트(App Store Connect): &lt;a href=&quot;https://appstoreconnect.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://appstoreconnect.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/app-store-connect.png&quot; alt=&quot;App Store Connect&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)에 등록한 개발자 아이디로 로그인합니다. 애플 개발자 프로그램(Apple Developer Program)에 등록하지 않은 분은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt; 블로그를 참고하여 등록하시기 바랍니다.&lt;/p&gt; &lt;p&gt;로그인을 하고 나면 아래와 같은 화면을 볼 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;나의 앱&lt;/code&gt;을 선택하여 앱 관리 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-store-connect-main.png&quot; alt=&quot;앱 스토어 커넥트 메인&quot; /&gt;&lt;/p&gt; &lt;p&gt;왼쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;신규 앱&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-list.png&quot; alt=&quot;앱 리스트&quot; /&gt;&lt;/p&gt; &lt;p&gt;앱 등록 화면이 나옵니다. 자신의 앱 정보를 입력합니다. 잘 모르는 부분이 있으면 항목 타이틀 옆 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;를 눌러 확인합니다. 이름과 기본 언어는 나중에 변경이 가능합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-new-app.png&quot; alt=&quot;앱 생성&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;번들 ID: 앱을 개발할 때 사용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle ID&lt;/code&gt;입니다. 어디에 있는지 잘 모르시는 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;에서 확인해 주세요.&lt;/li&gt; &lt;li&gt;SKU: App Store에 표시되지 않는 앱의 고유한 ID입니다. 보통 URL 형식으로 작성합니다.(ex&amp;gt; io.github.dev-yakuza.blaboo)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-menu.png&quot; alt=&quot;앱 메뉴&quot; /&gt;&lt;/p&gt; &lt;p&gt;앱을 생성하고 나면 위와 같이 메뉴를 볼 수 있습니다. 메뉴중 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;개발한 앱을 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 사용하여 테스트하기 위해서는 배포를 위해 빌드되고 앱 스토어 커넥트(App Store Connect)에 업로드를 해야합니다.&lt;/p&gt; &lt;h2 id=&quot;앱-빌드&quot;&gt;앱 빌드&lt;/h2&gt; &lt;p&gt;개발된 앱을 빌드하여 앱스토어 커넥트(App Store Connect)에 업로드하는 방법을 알아보겠습니다. 이미 빌드한 파일이 있으신 분은 이 부분을 건너뛰셔도 좋습니다.&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명.xcodeproj&lt;/code&gt; 파일을 실행시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/build-for-production.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;xcode가 실행되면 상단 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt;를 선택합니다. 애플 개발자 프로그램(Apple Developer Program)에 등록하지 않은 분이나 인증서를 연결하지 않으신 분은 이전 블로그를 확인해 주세요.(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;, &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;빌드가 무사히 끝나면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;앱-업로드&quot;&gt;앱 업로드&lt;/h2&gt; &lt;p&gt;빌드 완료후 보이는 화면을 실수로 닫으셨거나 이미 빌드한 파일을 가지고 계신 분은 xcode 상단 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Organizer&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/organizer-menu.png&quot; alt=&quot;organizer menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;메뉴를 선택하거나 빌드를 완료하신 분은 아래와 같은 화면이 보입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽에 보이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Distribute App&lt;/code&gt;을 선택합니다. 앱을 배포하는 것이 아니라 앱을 앱 스토어 커넥트(App Store Connect)에 업로드하는 과정입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/select-platform.png&quot; alt=&quot;select platfom&quot; /&gt;&lt;/p&gt; &lt;p&gt;개발한 앱을 배포할 플랫폼을 선택합니다. 우리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Store&lt;/code&gt;를 선택하고 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload-export.png&quot; alt=&quot;upload or export&quot; /&gt;&lt;/p&gt; &lt;p&gt;최종 목적지로 앱 스토어 커넥트(App Store Connect)에 업로드할지 ipa파일로 내보낼지(export) 선택하는 화면이 나옵니다. 우리는 앱 스토어 커넥트(App Store Connect)에 업로드할 예정임으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/options.png&quot; alt=&quot;options&quot; /&gt;&lt;/p&gt; &lt;p&gt;옵션 선택 화면이 나옵니다. 옵션이 모두 선택된 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 선택합니다. 다음 화면에서 생성한 인증서와 프로비저닝 프로파일(Provisioning Profile)을 선택합니다. 인증서, 프로비저닝 프로파일(Provisioning Profile) 생성은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;를 확인해 주세요.&lt;/p&gt; &lt;p&gt;배포 준비가 끝나면 아래와 같은 화면을 볼 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt; 버튼을 눌러 준비된 파일을 앱 스토어 커넥트(App Store Connect)에 업로드합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt; &lt;p&gt;무사히 앱을 앱스토어 커넥트(App Store Connect)에 업로드하였습니다. 업로드한 파일을 사용할 준비가 되면 애플에서 메일이 옵니다. 업로드에서 메일 도착까지 조금 시간이 걸립니다.&lt;/p&gt; &lt;h2 id=&quot;테스트-그룹-생성&quot;&gt;테스트 그룹 생성&lt;/h2&gt; &lt;p&gt;애플에서 메일을 받으신 분들은 앱 스토어 커넥트(App Store Connect) 페이지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-testflight-build-file-list.png&quot; alt=&quot;빌드 파일 리스트&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 화면에 업로드된 파일이 보입니다. 왼쪽 밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;새 그룹 +&lt;/code&gt;를 눌러 테스트를 위한 그룹을 생성합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-create-test-group.png&quot; alt=&quot;테스트 그룹 생성&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트 그룹을 생성하면 왼쪽 메뉴에 생성시 사용한 그룹명이 추가됩니다. 그룹명을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-test-group.png&quot; alt=&quot;테스트 그룹&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트 그룹 생성이 완료되었습니다. 이제 빌드 파일, 테스터를 추가하여 테스트를 진행해 봅시다.&lt;/p&gt; &lt;h2 id=&quot;빌드-추가&quot;&gt;빌드 추가&lt;/h2&gt; &lt;p&gt;테스트 그룹을 선택한 상태에서 상단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt; 탭을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-build-tab.png&quot; alt=&quot;빌드 탭 선택&quot; /&gt;&lt;/p&gt; &lt;p&gt;빌드 탭에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드(0)&lt;/code&gt;옆에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 눌러 빌드를 선택하는 화면으로 이동합니다. 테스트하고 싶은 빌드를 선택하고 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음&lt;/code&gt; 버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-select-build.png&quot; alt=&quot;빌드 선택&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트에 로그인 정보가 필요한지 선택하는 화면이 나옵니다. 앱을 테스트할 때 로그인 정보가 필요하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;로그인 필요&lt;/code&gt;를 선택하고 아이디/암호를 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음&lt;/code&gt; 버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-need-login.png&quot; alt=&quot;로그인 필요&quot; /&gt;&lt;/p&gt; &lt;p&gt;아래에 화면에서 테스터에게 전달할 메세지 또는 테스트 하는 방법에 대해 작성하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;심사를 위해 제출&lt;/code&gt;버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-test-message.png&quot; alt=&quot;메시지 작성&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스터에게 테스트를 부탁하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;이지만, 기본적으로 간단한 심사 작업이 있습니다. 따라서 테스터들에게 테스트를 바로 부탁할 수 없습니다. 심사가 끝난 후 테스트가 가능하게 됩니다.&lt;/p&gt; &lt;h2 id=&quot;테스터-추가&quot;&gt;테스터 추가&lt;/h2&gt; &lt;p&gt;애플이 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;는 크게 두가지 기능이 있습니다. 자신이 알고 있는 테스터를 추가하는 방법과 공개 URL을 생성하여 이 링크를 배포하는 방법입니다. 우선 테스터를 추가하는 방법에 대해 알아보겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;에서 테스트 그룹을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;테스터(0)&lt;/code&gt;옆에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;새로운 테스터 추가&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-add-new-tester.png&quot; alt=&quot;새로운 테스터 추가&quot; /&gt;&lt;/p&gt; &lt;p&gt;새로 추가할 테스터의 이메일, 이름을 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;추가&lt;/code&gt; 버튼을 누릅니다. 추가할 테스터의 이메일을 앱 스토어(App Store)에서 앱을 다운로드할 때 사용하는 이메일이여야 합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-added-new-tester.png&quot; alt=&quot;새로운 테스터 추가 완료&quot; /&gt;&lt;/p&gt; &lt;p&gt;새로운 테스터가 추가되었습니다. 새롭게 추가된 테스테에게는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 메일이 발송됩니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/testflight-email.png&quot; alt=&quot;testflight email&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스터는 앱 스토어(App store)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 검색하여 다운로드하여 앱 테스트를 하면 됩니다.&lt;/p&gt; &lt;h2 id=&quot;공개-링크&quot;&gt;공개 링크&lt;/h2&gt; &lt;p&gt;공개 링크를 선택해서 작업을 맞치면 공개 링크가 생성됩니다. 그 링크를 복사하여 공유면 테스트 참여가 가능하게 됩니다.&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;이것으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 활용하는 간단한 방법에 대해서 살펴보았습니다. 다음 블로그에서는 실제 앱을 배포하는 방법에 대해 알아보겠습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 iOS는 개발한 앱을 배포하기 전에 자신의 테스터 또는 테스트 버전의 공개 URL을 사용하여 테스트할 수 있는 TestFlight 시스템을 가지고 있습니다. 여기에서는 TestFlight를 이용하여 개발한 앱을 테스트하는 방법에 대해 알아보겠습니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-testflight.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 인증서(Certification)</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-certification/" rel="alternate" type="text/html" title="iOS 인증서(Certification)"/><published>2018-11-11T00:00:00+09:00</published><updated>2018-11-16T16:17:29+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-certification-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-certification/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;이 블로그는 애플 개발자 프로그램(Apple Developer Program)에 이미 등록된 개발자를 위한 설명입니다. 애플 개발자 프로그램(Apple Developer Program)에 아직 등록을 하지 않으신 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;을 보고 애플 개발자 프로그램(Apple Developer Program)에 등록해 주시기 바랍니다.&lt;/p&gt; &lt;p&gt;그럼 개발자 인증서(Certification)을 생성하고 설정하는 방법에 대해 알아보겠습니다.&lt;/p&gt; &lt;h2 id=&quot;인증서-다운로드&quot;&gt;인증서 다운로드&lt;/h2&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)을 구매하고 구매 완료 이메일을 받았다면 애플 개발자 사이트(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/&lt;/a&gt;)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/apple-developer-site-after-enrolling.png&quot; alt=&quot;apple developer site after enrolling&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)에 등록하기 전과 화면이 조금 다릅니다. 왼쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;를 선택하여 인증서(Certification) 발급 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서(Certification)가 이미 하나 존재합니다. 해당 인증서(Certification)를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt; 버튼을 눌러 원하는 위치에 잘 저장합니다. 인증서가 보이지 않는 분은 아래에 인증서 생성을 통해 인증서를 새로 생성해 주시기 바랍니다.&lt;/p&gt; &lt;p&gt;이 인증서는 개발용 인증서입니다. 이 인증서가 있는 분도 아래에 인증서 생성 부분을 통해 배포용 인증서를 생성해 주시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;인증서-생성&quot;&gt;인증서 생성&lt;/h2&gt; &lt;p&gt;Mac에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt; 프로그램을 실행 시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain.png&quot; alt=&quot;키체인 접근&quot; /&gt;&lt;/p&gt; &lt;p&gt;키체인이 실행되면 왼쪽 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증서 지원&lt;/code&gt;을 누른 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증 기관에서 인증서 요청...&lt;/code&gt;을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-request-certification.png&quot; alt=&quot;키체인 접근 인증서 요청&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증 기관에서 인증서 요청...&lt;/code&gt;을 누르면 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증서 지원&lt;/code&gt; 다이얼로그가 나옵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-info.png&quot; alt=&quot;키체인 접근 인증서 정보 입력&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면이 나오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자 이메일 주소&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;일반 이름&lt;/code&gt;에 정보를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;요청 항목&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;디스크에 저장&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;본인이 키 쌍 정보 지정&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;계속&lt;/code&gt;을 누릅니다. 파일 저장 화면이 나오면 원하는 장소를 선택하여 파일을 저장합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-key.png&quot; alt=&quot;키체인 접근 인증서 저장&quot; /&gt;&lt;/p&gt; &lt;p&gt;키 쌍 정보를 위와 같이 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;계속&lt;/code&gt;을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-completed.png&quot; alt=&quot;키체인 접근 인증서 저장 완료&quot; /&gt;&lt;/p&gt; &lt;p&gt;디스크에 인증서가 잘 저장되었습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 사이트(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/&lt;/a&gt;)에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;를 눌러 이동했던 사이트에 오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/select-certification.png&quot; alt=&quot;certification selection&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서 선택화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;를 선택하고 밑으로 스크롤한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 누릅니다.&lt;/p&gt; &lt;p&gt;배포용 인증서를 생성하시는 분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt; 섹션의 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Store and Ad Hoc&lt;/code&gt;을 선택하고 진행하시기 바랍니다.&lt;/p&gt; &lt;p&gt;인증서 파일(CSR)을 만드는 방법에 대한 설명 페이지가 나옵니다. 우리는 위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 통해 인증서 파일(CSR) 파일을 이미 만들었으므로 밑으로 스크롤하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/create-csr-file.png&quot; alt=&quot;create csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;생성한 인증서 파일을 선택하는 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Choose File&lt;/code&gt; 버튼을 눌러 이전에 만든 인증서 파일을 선택하고 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/choose-csr-file.png&quot; alt=&quot;choose csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서 생성이 완료되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt; 버튼을 눌러 인증서를 원하는 폴더에 잘 저장합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/complete-create-certification.png&quot; alt=&quot;complete create certification file&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;인증서-등록&quot;&gt;인증서 등록&lt;/h2&gt; &lt;p&gt;생성한 인증서를 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;에 넣어줄 필요가 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 실행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain.png&quot; alt=&quot;키체인 접근&quot; /&gt;&lt;/p&gt; &lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt; 창이 활성화 되면 왼쪽 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;내 인증서&lt;/code&gt;를 선택하고 해당 화면에 위에서 다운로드한 인증서를 드래그해서 추가합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain-certification.png&quot; alt=&quot;키체인 접근 인증서&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;애플-개발자-계정-연결&quot;&gt;애플 개발자 계정 연결&lt;/h2&gt; &lt;p&gt;애플 개발자 계정(Apple Developer)과 현재 프로젝트를 연결할 필요가 있습니다. RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명.xcodeproj&lt;/code&gt; 파일을 실행시킵니다.&lt;/p&gt; &lt;p&gt;xcode에서 왼쪽 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt; 탭으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 옆 드롭다운 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;이미 xcode와 애플 개발자 계정(Apple Developer) 연동을 시키신 분은 해당 계정을 선택하시면 됩니다. 계정 연동을 하지 않으신 분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account&lt;/code&gt;을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-login.png&quot; alt=&quot;xcode certification login&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 계정(Apple Developer)으로 로그인합니다. 애플 개발자 계정(Apple Developer) 생성을 하지 않은 분은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;에서 애플 개발자 계정 생성법을 확인해 주세요. 로그인을 완료하면 왼쪽위에 닫기 버튼을 눌러 창을 닫습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 옆에 드롭다운 메뉴를 선택하면 방금 추가한 애플 개발자 계정을 볼 수 있습니다. 개발자 계정을 선택합니다.&lt;/p&gt; &lt;p&gt;같은 방식으로 Test 부분도 애플 개발자 계정(Apple Developer)과 연결합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-test.png&quot; alt=&quot;xcode certification add test&quot; /&gt;&lt;/p&gt; &lt;p&gt;이로써 개발자 계정 연결을 완료하였습니다. 이제 배포를 위한 빌드시 사용하는 프로비저닝 프로파일(Provisioning Profiles)을 생성하고 연결하겠습니다.&lt;/p&gt; &lt;h2 id=&quot;프로비저닝-프로파일-생성&quot;&gt;프로비저닝 프로파일 생성&lt;/h2&gt; &lt;p&gt;애플 개발자 사이트(Apple Developer)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지에서 스크롤하여 하단으로 이동하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Provisioning Profiles&lt;/code&gt; 항목을 확인할 수 있습니다.&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profiles)도 개발자용과 배포용이 필요하므로 아래에 과정을 개발자용과 배포용, 두 번 진행하셔야합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles.png&quot; alt=&quot;provisioning profiles&quot; /&gt;&lt;/p&gt; &lt;p&gt;메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;All&lt;/code&gt;을 눌러 프로비저닝 프로파일(Provisioning Profiles)를 등록하는 화면으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-detail.png&quot; alt=&quot;provisioning profiles detail&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면이 보이면 오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 눌러 새로운 프로비저닝 프로파일(Provisioning Profile)을 추가합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-ios.png&quot; alt=&quot;provisioning profiles ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 진행합니다.&lt;/p&gt; &lt;p&gt;배포용 프로비저닝 프로파일(Provisioning Profiles)은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Distribution&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Store&lt;/code&gt;를 선택하고 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-app-id.png&quot; alt=&quot;provisioning profiles app id&quot; /&gt;&lt;/p&gt; &lt;p&gt;우리가 앱을 개발할 때 사용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;를 선택합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;는 xcode에서 왼쪽 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt; 탭으로 이동하면 제일 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt; 항목에서 확인 할 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;선택을 완료하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 진행합니다. 개발자 계정과 테스트 장치를 선택하고 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-name.png&quot; alt=&quot;provisioning profiles name&quot; /&gt;&lt;/p&gt; &lt;p&gt;최종적으로 프로비저닝 프로파일(Provisioning Profile)의 이름을 설정하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profile)의 생성이 완료되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;를 눌러 파일을 다운로드한 후 알기 쉬운 곳에 보관해 둡니다.&lt;/p&gt; &lt;h2 id=&quot;프로비저닝-프로파일-연결&quot;&gt;프로비저닝 프로파일 연결&lt;/h2&gt; &lt;p&gt;xcode에서는 기본적으로 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;을 관리하도록 설정되어있습니다.(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;이 상태로 프로비저닝 프로파일(Provisioning Profile)과 연결이라던지, 배포 빌드시 별 문제가 없는 분들은 그대로 사용을 하시면 됩니다.(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목에 빨간 에러가 나오지 않는 분들) 저희는 프로비저닝 프로파일(Provisioning Profile)과의 연결이 제대로 되지 않아 이 옵션을 풀고 수동으로 연동하였습니다.&lt;/p&gt; &lt;p&gt;아래는 수동으로 프로비저닝 프로파일(Provisioning Profile)을 연결하는 방법입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 섹션의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;을 클릭하여 체크박스를 해제합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto.png&quot; alt=&quot;disable automatically manage signing&quot; /&gt;&lt;/p&gt; &lt;p&gt;체크박스를 해제하면 위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Debug)&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Release)&lt;/code&gt;섹션이 확성화됩니다. 둘다 &lt;code class=&quot;highlighter-rouge&quot;&gt;Provision Profile&lt;/code&gt; 옆 드롭다운 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Import Profile&lt;/code&gt;을 선택하고 위에서 생성하여 다운로드한 프로비저닝 프로파일(Provisioning Profile)을 선택합니다. 같은 방식으로 Test부분도 수정해줍니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto_test.png&quot; alt=&quot;disable automatically manage signing test&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;이제 모든 설정이 완료되었습니다. 인증서 연결을 하였으므로 개발은 물론 배포준비까지 끝났습니다. 다음 블로그에서는 배포 준비와 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 사용법, 실제 배포에 대해서 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 이 블로그는 애플 개발자 프로그램(Apple Developer Program)에 이미 등록된 개발자를 위한 설명입니다. 애플 개발자 프로그램(Apple Developer Program)에 아직 등록을 하지 않으신 분은 이전 블로그인 iOS 개발자 등록을 보고 애플 개발자 프로그램(Apple Developer Program)에 등록해 주시기 바랍니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-certification.jpg"/></entry></feed>