<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://dev-yakuza.github.io/ko/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dev-yakuza.github.io/ko/" rel="alternate" type="text/html"/><updated>2018-11-15T21:49:44+09:00</updated><id>https://dev-yakuza.github.io/</id><title type="html">Dreams the art through programming</title><subtitle>『Programming Artist ヤクザ』</subtitle><author><name>dev.yakuza@gmail.com</name></author><entry xml:lang="ko"><title type="html">jekyll-last-modified-at</title><link href="https://dev-yakuza.github.io/ko/jekyll/jekyll-last-modified-at/" rel="alternate" type="text/html" title="jekyll-last-modified-at"/><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-15T21:44:21+09:00</updated><id>https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/jekyll/jekyll-last-modified-at/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지금 관리하고 있는 블로그의 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;에&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;를 사용하여 빌드된 시점에 시간을 모든 페이지에 적용하고 있었습니다. 하지만 실제 갱신하지 않은 파일도 빌드한 시점에 시간이 들어가므로 그 모든 파일을 크롤링하느라 실제 갱신한 파일의 크롤링이 늦어지지 않을까 싶은 의문이 들었습니다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 플로그인을 이용하여 실제로 파일이 수정된 경우만 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;에 반영되도록 변경하기로 했습니다.&lt;/p&gt; &lt;h2 id=&quot;플러그인&quot;&gt;플러그인&lt;/h2&gt; &lt;p&gt;아래에 링크를 클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 사이트로 이동하면 모든 설명이 자세히 나와있습니다. 한번 따라해 보도록 하겠습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;jekyll-last-modified-at: &lt;a href=&quot;https://github.com/gjtorikian/jekyll-last-modified-at&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/gjtorikian/jekyll-last-modified-at&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;플러그인-설치&quot;&gt;플러그인 설치&lt;/h2&gt; &lt;p&gt;아래에 명령어를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-last-modified-at&lt;/code&gt; 플러그인을 설치합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-last-modified-at &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;플로그인-사용법&quot;&gt;플로그인 사용법&lt;/h2&gt; &lt;p&gt;파일 수정일을 표시하고 싶은 부분에 아래에 코드중 원하는 형식을 선택하여 삽입합니다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {% last_modified_at %} {% last_modified_at %Y:%B:%A:%d:%S:%R %} {{ page.last_modified_at }} {{ page.last_modified_at | date: '%Y:%B:%A:%d:%S:%R' }} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;우리는 사용하던 &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;을 아래와 같이 수정하였습니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;lastmod&amp;gt;{{ site.time | date: '%Y-%m-%d' }}&amp;lt;/lastmod&amp;gt; --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ post.last_modified_at | date: '%Y-%m-%d' }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;확인&quot;&gt;확인&lt;/h2&gt; &lt;p&gt;실제로 프로젝트를 빌드하여 삽입한 코드를 확인해 본 결과, 실제 파일을 수정한 날짜가 잘 들어가 있는 것을 확인하였습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글의 크롤링에 영향이 있을지 모르지만 일단 실제 시간을 표시함으로써 프로그래머로써 일 처리를 한거 같아 기분이 좋습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지금 관리하고 있는 블로그의 sitemap.xml에</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/jekyll/jekyll-last-modified-at.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS TestFlight</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-testflight/" rel="alternate" type="text/html" title="iOS TestFlight"/><published>2018-11-12T00:00:00+09:00</published><updated>2018-11-15T17:51:38+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-testflight-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-testflight/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;iOS는 개발한 앱을 배포하기 전에 자신의 테스터 또는 테스트 버전의 공개 URL을 사용하여 테스트할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 시스템을 가지고 있습니다. 여기에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 이용하여 개발한 앱을 테스트하는 방법에 대해 알아보겠습니다.&lt;/p&gt; &lt;p&gt;이 블로그는 아래에 과정을 끝내신 분을 위한 블로그입니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-running-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 빌드 및 테스트&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program) 등록이나 인증서(Certification) 설정에 관해서는 위에 블로그 내용을 참고하시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;배포용-앱-생성&quot;&gt;배포용 앱 생성&lt;/h2&gt; &lt;p&gt;애플이 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 사용하여 앱을 테스트할 경우 앱 스토어 커넥트(Apple Store Connect)에 배포용 앱을 생성해야합니다. 아래에 링크를 눌러 앱 스토어 커넥트(App Store Connect)에 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;앱 스토어 커넥트(App Store Connect): &lt;a href=&quot;https://appstoreconnect.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://appstoreconnect.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/app-store-connect.png&quot; alt=&quot;App Store Connect&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)에 등록한 개발자 아이디로 로그인합니다. 애플 개발자 프로그램(Apple Developer Program)에 등록하지 않은 분은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt; 블로그를 참고하여 등록하시기 바랍니다.&lt;/p&gt; &lt;p&gt;로그인을 하고 나면 아래와 같은 화면을 볼 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;나의 앱&lt;/code&gt;을 선택하여 앱 관리 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-store-connect-main.png&quot; alt=&quot;앱 스토어 커넥트 메인&quot; /&gt;&lt;/p&gt; &lt;p&gt;왼쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;신규 앱&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-list.png&quot; alt=&quot;앱 리스트&quot; /&gt;&lt;/p&gt; &lt;p&gt;앱 등록 화면이 나옵니다. 자신의 앱 정보를 입력합니다. 잘 모르는 부분이 있으면 항목 타이틀 옆 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;를 눌러 확인합니다. 이름과 기본 언어는 나중에 변경이 가능합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-new-app.png&quot; alt=&quot;앱 생성&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;번들 ID: 앱을 개발할 때 사용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle ID&lt;/code&gt;입니다. 어디에 있는지 잘 모르시는 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;에서 확인해 주세요.&lt;/li&gt; &lt;li&gt;SKU: App Store에 표시되지 않는 앱의 고유한 ID입니다. 보통 URL 형식으로 작성합니다.(ex&amp;gt; io.github.dev-yakuza.blaboo)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-app-menu.png&quot; alt=&quot;앱 메뉴&quot; /&gt;&lt;/p&gt; &lt;p&gt;앱을 생성하고 나면 위와 같이 메뉴를 볼 수 있습니다. 메뉴중 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;개발한 앱을 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 사용하여 테스트하기 위해서는 배포를 위해 빌드되고 앱 스토어 커넥트(App Store Connect)에 업로드를 해야합니다.&lt;/p&gt; &lt;h2 id=&quot;앱-빌드&quot;&gt;앱 빌드&lt;/h2&gt; &lt;p&gt;개발된 앱을 빌드하여 앱스토어 커넥트(App Store Connect)에 업로드하는 방법을 알아보겠습니다. 이미 빌드한 파일이 있으신 분은 이 부분을 건너뛰셔도 좋습니다.&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명.xcodeproj&lt;/code&gt; 파일을 실행시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/build-for-production.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;xcode가 실행되면 상단 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt;를 선택합니다. 애플 개발자 프로그램(Apple Developer Program)에 등록하지 않은 분이나 인증서를 연결하지 않으신 분은 이전 블로그를 확인해 주세요.(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;, &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;빌드가 무사히 끝나면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;앱-업로드&quot;&gt;앱 업로드&lt;/h2&gt; &lt;p&gt;빌드 완료후 보이는 화면을 실수로 닫으셨거나 이미 빌드한 파일을 가지고 계신 분은 xcode 상단 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Organizer&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/organizer-menu.png&quot; alt=&quot;organizer menu&quot; /&gt;&lt;/p&gt; &lt;p&gt;메뉴를 선택하거나 빌드를 완료하신 분은 아래와 같은 화면이 보입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/distribute-app.png&quot; alt=&quot;build for production&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽에 보이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Distribute App&lt;/code&gt;을 선택합니다. 앱을 배포하는 것이 아니라 앱을 앱 스토어 커넥트(App Store Connect)에 업로드하는 과정입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/select-platform.png&quot; alt=&quot;select platfom&quot; /&gt;&lt;/p&gt; &lt;p&gt;개발한 앱을 배포할 플랫폼을 선택합니다. 우리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Store&lt;/code&gt;를 선택하고 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload-export.png&quot; alt=&quot;upload or export&quot; /&gt;&lt;/p&gt; &lt;p&gt;최종 목적지로 앱 스토어 커넥트(App Store Connect)에 업로드할지 ipa파일로 내보낼지(export) 선택하는 화면이 나옵니다. 우리는 앱 스토어 커넥트(App Store Connect)에 업로드할 예정임으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/options.png&quot; alt=&quot;options&quot; /&gt;&lt;/p&gt; &lt;p&gt;옵션 선택 화면이 나옵니다. 옵션이 모두 선택된 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 선택합니다. 다음 화면에서 생성한 인증서와 프로비저닝 프로파일(Provisioning Profile)을 선택합니다. 인증서, 프로비저닝 프로파일(Provisioning Profile) 생성은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-certification/&quot; target=&quot;_blank&quot;&gt;iOS 인증서(Certification)&lt;/a&gt;를 확인해 주세요.&lt;/p&gt; &lt;p&gt;배포 준비가 끝나면 아래와 같은 화면을 볼 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload&lt;/code&gt; 버튼을 눌러 준비된 파일을 앱 스토어 커넥트(App Store Connect)에 업로드합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt; &lt;p&gt;무사히 앱을 앱스토어 커넥트(App Store Connect)에 업로드하였습니다. 업로드한 파일을 사용할 준비가 되면 애플에서 메일이 옵니다. 업로드에서 메일 도착까지 조금 시간이 걸립니다.&lt;/p&gt; &lt;h2 id=&quot;테스트-그룹-생성&quot;&gt;테스트 그룹 생성&lt;/h2&gt; &lt;p&gt;애플에서 메일을 받으신 분들은 앱 스토어 커넥트(App Store Connect) 페이지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-testflight-build-file-list.png&quot; alt=&quot;빌드 파일 리스트&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 화면에 업로드된 파일이 보입니다. 왼쪽 밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;새 그룹 +&lt;/code&gt;를 눌러 테스트를 위한 그룹을 생성합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-create-test-group.png&quot; alt=&quot;테스트 그룹 생성&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트 그룹을 생성하면 왼쪽 메뉴에 생성시 사용한 그룹명이 추가됩니다. 그룹명을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-test-group.png&quot; alt=&quot;테스트 그룹&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트 그룹 생성이 완료되었습니다. 이제 빌드 파일, 테스터를 추가하여 테스트를 진행해 봅시다.&lt;/p&gt; &lt;h2 id=&quot;빌드-추가&quot;&gt;빌드 추가&lt;/h2&gt; &lt;p&gt;테스트 그룹을 선택한 상태에서 상단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt; 탭을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-build-tab.png&quot; alt=&quot;빌드 탭 선택&quot; /&gt;&lt;/p&gt; &lt;p&gt;빌드 탭에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드(0)&lt;/code&gt;옆에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 눌러 빌드를 선택하는 화면으로 이동합니다. 테스트하고 싶은 빌드를 선택하고 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음&lt;/code&gt; 버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-select-build.png&quot; alt=&quot;빌드 선택&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스트에 로그인 정보가 필요한지 선택하는 화면이 나옵니다. 앱을 테스트할 때 로그인 정보가 필요하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;로그인 필요&lt;/code&gt;를 선택하고 아이디/암호를 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음&lt;/code&gt; 버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-need-login.png&quot; alt=&quot;로그인 필요&quot; /&gt;&lt;/p&gt; &lt;p&gt;아래에 화면에서 테스터에게 전달할 메세지 또는 테스트 하는 방법에 대해 작성하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;심사를 위해 제출&lt;/code&gt;버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-test-message.png&quot; alt=&quot;메시지 작성&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스터에게 테스트를 부탁하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;이지만, 기본적으로 간단한 심사 작업이 있습니다. 따라서 테스터들에게 테스트를 바로 부탁할 수 없습니다. 심사가 끝난 후 테스트가 가능하게 됩니다.&lt;/p&gt; &lt;h2 id=&quot;테스터-추가&quot;&gt;테스터 추가&lt;/h2&gt; &lt;p&gt;애플이 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;는 크게 두가지 기능이 있습니다. 자신이 알고 있는 테스터를 추가하는 방법과 공개 URL을 생성하여 이 링크를 배포하는 방법입니다. 우선 테스터를 추가하는 방법에 대해 알아보겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;에서 테스트 그룹을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;테스터(0)&lt;/code&gt;옆에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;새로운 테스터 추가&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-add-new-tester.png&quot; alt=&quot;새로운 테스터 추가&quot; /&gt;&lt;/p&gt; &lt;p&gt;새로 추가할 테스터의 이메일, 이름을 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;추가&lt;/code&gt; 버튼을 누릅니다. 추가할 테스터의 이메일을 앱 스토어(App Store)에서 앱을 다운로드할 때 사용하는 이메일이여야 합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/ko-added-new-tester.png&quot; alt=&quot;새로운 테스터 추가 완료&quot; /&gt;&lt;/p&gt; &lt;p&gt;새로운 테스터가 추가되었습니다. 새롭게 추가된 테스테에게는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 메일이 발송됩니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-testflight/testflight-email.png&quot; alt=&quot;testflight email&quot; /&gt;&lt;/p&gt; &lt;p&gt;테스터는 앱 스토어(App store)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 검색하여 다운로드하여 앱 테스트를 하면 됩니다.&lt;/p&gt; &lt;h2 id=&quot;공개-링크&quot;&gt;공개 링크&lt;/h2&gt; &lt;p&gt;공개 링크를 선택해서 작업을 맞치면 공개 링크가 생성됩니다. 그 링크를 복사하여 공유면 테스트 참여가 가능하게 됩니다.&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;이것으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt;를 활용하는 간단한 방법에 대해서 살펴보았습니다. 다음 블로그에서는 실제 앱을 배포하는 방법에 대해 알아보겠습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 iOS는 개발한 앱을 배포하기 전에 자신의 테스터 또는 테스트 버전의 공개 URL을 사용하여 테스트할 수 있는 TestFlight 시스템을 가지고 있습니다. 여기에서는 TestFlight를 이용하여 개발한 앱을 테스트하는 방법에 대해 알아보겠습니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-testflight.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 인증서(Certification)</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-certification/" rel="alternate" type="text/html" title="iOS 인증서(Certification)"/><published>2018-11-11T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-certification-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-certification/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;이 블로그는 애플 개발자 프로그램(Apple Developer Program)에 이미 등록된 개발자를 위한 설명입니다. 애플 개발자 프로그램(Apple Developer Program)에 아직 등록을 하지 않으신 분은 이전 블로그인 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/&quot; target=&quot;_blank&quot;&gt;iOS 개발자 등록&lt;/a&gt;을 보고 애플 개발자 프로그램(Apple Developer Program)에 등록해 주시기 바랍니다.&lt;/p&gt; &lt;p&gt;그럼 개발자 인증서(Certification)을 생성하고 설정하는 방법에 대해 알아보겠습니다.&lt;/p&gt; &lt;h2 id=&quot;인증서-다운로드&quot;&gt;인증서 다운로드&lt;/h2&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)을 구매하고 구매 완료 이메일을 받았다면 애플 개발자 사이트(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/apple-developer-site-after-enrolling.png&quot; alt=&quot;apple developer site after enrolling&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)에 등록하기 전과 화면이 조금 다릅니다. 왼쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;를 선택하여 인증서(Certification) 발급 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서(Certification)가 이미 하나 존재합니다. 해당 인증서(Certification)를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt; 버튼을 눌러 원하는 위치에 잘 저장합니다. 인증서가 보이지 않는 분은 아래에 인증서 생성을 통해 인증서를 새로 생성해 주시기 바랍니다.&lt;/p&gt; &lt;p&gt;이 인증서는 개발용 인증서입니다. 이 인증서가 있는 분도 아래에 인증서 생성 부분을 통해 배포용 인증서를 생성해 주시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;인증서-생성&quot;&gt;인증서 생성&lt;/h2&gt; &lt;p&gt;Mac에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt; 프로그램을 실행 시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain.png&quot; alt=&quot;키체인 접근&quot; /&gt;&lt;/p&gt; &lt;p&gt;키체인이 실행되면 왼쪽 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증서 지원&lt;/code&gt;을 누른 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증 기관에서 인증서 요청...&lt;/code&gt;을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-request-certification.png&quot; alt=&quot;키체인 접근 인증서 요청&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증 기관에서 인증서 요청...&lt;/code&gt;을 누르면 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;인증서 지원&lt;/code&gt; 다이얼로그가 나옵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-info.png&quot; alt=&quot;키체인 접근 인증서 정보 입력&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면이 나오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자 이메일 주소&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;일반 이름&lt;/code&gt;에 정보를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;요청 항목&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;디스크에 저장&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;본인이 키 쌍 정보 지정&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;계속&lt;/code&gt;을 누릅니다. 파일 저장 화면이 나오면 원하는 장소를 선택하여 파일을 저장합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-key.png&quot; alt=&quot;키체인 접근 인증서 저장&quot; /&gt;&lt;/p&gt; &lt;p&gt;키 쌍 정보를 위와 같이 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;계속&lt;/code&gt;을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-certification-completed.png&quot; alt=&quot;키체인 접근 인증서 저장 완료&quot; /&gt;&lt;/p&gt; &lt;p&gt;디스크에 인증서가 잘 저장되었습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/download-certification.png&quot; alt=&quot;download certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 사이트(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, IDs &amp;amp; Profiles&lt;/code&gt;를 눌러 이동했던 사이트에 오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;버튼을 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/select-certification.png&quot; alt=&quot;certification selection&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서 선택화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;를 선택하고 밑으로 스크롤한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 누릅니다.&lt;/p&gt; &lt;p&gt;배포용 인증서를 생성하시는 분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt; 섹션의 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Store and Ad Hoc&lt;/code&gt;을 선택하고 진행하시기 바랍니다.&lt;/p&gt; &lt;p&gt;인증서 파일(CSR)을 만드는 방법에 대한 설명 페이지가 나옵니다. 우리는 위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 통해 인증서 파일(CSR) 파일을 이미 만들었으므로 밑으로 스크롤하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/create-csr-file.png&quot; alt=&quot;create csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;생성한 인증서 파일을 선택하는 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Choose File&lt;/code&gt; 버튼을 눌러 이전에 만든 인증서 파일을 선택하고 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/choose-csr-file.png&quot; alt=&quot;choose csr file&quot; /&gt;&lt;/p&gt; &lt;p&gt;인증서 생성이 완료되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt; 버튼을 눌러 인증서를 원하는 폴더에 잘 저장합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/complete-create-certification.png&quot; alt=&quot;complete create certification file&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;인증서-등록&quot;&gt;인증서 등록&lt;/h2&gt; &lt;p&gt;생성한 인증서를 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;에 넣어줄 필요가 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt;을 실행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain.png&quot; alt=&quot;키체인 접근&quot; /&gt;&lt;/p&gt; &lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;키체인 접근&lt;/code&gt; 창이 활성화 되면 왼쪽 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;내 인증서&lt;/code&gt;를 선택하고 해당 화면에 위에서 다운로드한 인증서를 드래그해서 추가합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/ko-keychain-certification.png&quot; alt=&quot;키체인 접근 인증서&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;애플-개발자-계정-연결&quot;&gt;애플 개발자 계정 연결&lt;/h2&gt; &lt;p&gt;애플 개발자 계정(Apple Developer)과 현재 프로젝트를 연결할 필요가 있습니다. RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명.xcodeproj&lt;/code&gt; 파일을 실행시킵니다.&lt;/p&gt; &lt;p&gt;xcode에서 왼쪽 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt; 탭으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode certification&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 옆 드롭다운 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;이미 xcode와 애플 개발자 계정(Apple Developer) 연동을 시키신 분은 해당 계정을 선택하시면 됩니다. 계정 연동을 하지 않으신 분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account&lt;/code&gt;을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-login.png&quot; alt=&quot;xcode certification login&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 계정(Apple Developer)으로 로그인합니다. 애플 개발자 계정(Apple Developer) 생성을 하지 않은 분은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;iOS 디바이스 테스트&lt;/a&gt;에서 애플 개발자 계정 생성법을 확인해 주세요. 로그인을 완료하면 왼쪽위에 닫기 버튼을 눌러 창을 닫습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-new.png&quot; alt=&quot;xcode certification add new&quot; /&gt;&lt;/p&gt; &lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 옆에 드롭다운 메뉴를 선택하면 방금 추가한 애플 개발자 계정을 볼 수 있습니다. 개발자 계정을 선택합니다.&lt;/p&gt; &lt;p&gt;같은 방식으로 Test 부분도 애플 개발자 계정(Apple Developer)과 연결합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification-add-test.png&quot; alt=&quot;xcode certification add test&quot; /&gt;&lt;/p&gt; &lt;p&gt;이로써 개발자 계정 연결을 완료하였습니다. 이제 배포를 위한 빌드시 사용하는 프로비저닝 프로파일(Provisioning Profiles)을 생성하고 연결하겠습니다.&lt;/p&gt; &lt;h2 id=&quot;프로비저닝-프로파일-생성&quot;&gt;프로비저닝 프로파일 생성&lt;/h2&gt; &lt;p&gt;애플 개발자 사이트(Apple Developer)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt; 페이지에서 스크롤하여 하단으로 이동하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Provisioning Profiles&lt;/code&gt; 항목을 확인할 수 있습니다.&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profiles)도 개발자용과 배포용이 필요하므로 아래에 과정을 개발자용과 배포용, 두 번 진행하셔야합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles.png&quot; alt=&quot;provisioning profiles&quot; /&gt;&lt;/p&gt; &lt;p&gt;메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;All&lt;/code&gt;을 눌러 프로비저닝 프로파일(Provisioning Profiles)를 등록하는 화면으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-detail.png&quot; alt=&quot;provisioning profiles detail&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면이 보이면 오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 버튼을 눌러 새로운 프로비저닝 프로파일(Provisioning Profile)을 추가합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-ios.png&quot; alt=&quot;provisioning profiles ios&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS App Development&lt;/code&gt;를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 진행합니다.&lt;/p&gt; &lt;p&gt;배포용 프로비저닝 프로파일(Provisioning Profiles)은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Distribution&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Store&lt;/code&gt;를 선택하고 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-app-id.png&quot; alt=&quot;provisioning profiles app id&quot; /&gt;&lt;/p&gt; &lt;p&gt;우리가 앱을 개발할 때 사용한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;를 선택합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;는 xcode에서 왼쪽 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt; 탭으로 이동하면 제일 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt; 항목에서 확인 할 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;선택을 완료하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 진행합니다. 개발자 계정과 테스트 장치를 선택하고 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/provisioning-profiles-name.png&quot; alt=&quot;provisioning profiles name&quot; /&gt;&lt;/p&gt; &lt;p&gt;최종적으로 프로비저닝 프로파일(Provisioning Profile)의 이름을 설정하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;프로비저닝 프로파일(Provisioning Profile)의 생성이 완료되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Download&lt;/code&gt;를 눌러 파일을 다운로드한 후 알기 쉬운 곳에 보관해 둡니다.&lt;/p&gt; &lt;h2 id=&quot;프로비저닝-프로파일-연결&quot;&gt;프로비저닝 프로파일 연결&lt;/h2&gt; &lt;p&gt;xcode에서는 기본적으로 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt;을 관리하도록 설정되어있습니다.(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;이 상태로 프로비저닝 프로파일(Provisioning Profile)과 연결이라던지, 배포 빌드시 별 문제가 없는 분들은 그대로 사용을 하시면 됩니다.(&lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 항목에 빨간 에러가 나오지 않는 분들) 저희는 프로비저닝 프로파일(Provisioning Profile)과의 연결이 제대로 되지 않아 이 옵션을 풀고 수동으로 연동하였습니다.&lt;/p&gt; &lt;p&gt;아래는 수동으로 프로비저닝 프로파일(Provisioning Profile)을 연결하는 방법입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/xcode-certification.png&quot; alt=&quot;xcode bundle identifier&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같은 화면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 섹션의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically manage signing&lt;/code&gt;을 클릭하여 체크박스를 해제합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto.png&quot; alt=&quot;disable automatically manage signing&quot; /&gt;&lt;/p&gt; &lt;p&gt;체크박스를 해제하면 위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Debug)&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing(Release)&lt;/code&gt;섹션이 확성화됩니다. 둘다 &lt;code class=&quot;highlighter-rouge&quot;&gt;Provision Profile&lt;/code&gt; 옆 드롭다운 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Import Profile&lt;/code&gt;을 선택하고 위에서 생성하여 다운로드한 프로비저닝 프로파일(Provisioning Profile)을 선택합니다. 같은 방식으로 Test부분도 수정해줍니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-certification/disable_auto_test.png&quot; alt=&quot;disable automatically manage signing test&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;이제 모든 설정이 완료되었습니다. 인증서 연결을 하였으므로 개발은 물론 배포준비까지 끝났습니다. 다음 블로그에서는 배포 준비와 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFlight&lt;/code&gt; 사용법, 실제 배포에 대해서 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 이 블로그는 애플 개발자 프로그램(Apple Developer Program)에 이미 등록된 개발자를 위한 설명입니다. 애플 개발자 프로그램(Apple Developer Program)에 아직 등록을 하지 않으신 분은 이전 블로그인 iOS 개발자 등록을 보고 애플 개발자 프로그램(Apple Developer Program)에 등록해 주시기 바랍니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-certification.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 개발자 등록</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-enroll-developer-program/" rel="alternate" type="text/html" title="iOS 개발자 등록"/><published>2018-11-10T00:00:00+09:00</published><updated>2018-11-13T13:35:25+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-enroll-developer-program-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-enroll-developer-program/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지금까지 RN(react native) 프로젝트로 개발하고 디바이스에 올리는 방법까지 알아봤습니다. 이제 완성된 어플리케이션을 iOS 앱 스토어(App store)에 등록하기 위한 애플의 개발자 프로그램(Apple developer program)에 등록하는 방법에 대해서 알아봅시다.&lt;/p&gt; &lt;h2 id=&quot;애플-개발자-프로그램-등록&quot;&gt;애플 개발자 프로그램 등록&lt;/h2&gt; &lt;p&gt;애플 개발자 프로그램(Apple developer program)에 등록하기 위해 아래에 링크를 눌러 애플 개발자(Apple developer) 사이트로 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;애플 개발자(Apple developer) 사이트: &lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-site.png&quot; alt=&quot;apple developer site&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Account&lt;/code&gt;를 눌러 로그인 화면으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/login.png&quot; alt=&quot;apple developer login&quot; /&gt;&lt;/p&gt; &lt;p&gt;개발자 계정이 없는 분은 &lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;디바이스 테스트&lt;/a&gt; 블로그를 참고하여 계정을 생성해 주세요.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/after-login.png&quot; alt=&quot;after login&quot; /&gt;&lt;/p&gt; &lt;p&gt;로그인을 하고 나면 위와 같은 화면을 볼 수 있습니다. 하단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Join the Apple Developer Program&lt;/code&gt;을 눌러 애플 개발자 프로그램(Apple Developer Program) 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-program-site.png&quot; alt=&quot;Apple Developer Program site&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enroll&lt;/code&gt; 버튼을 눌러 애플 개발자 프로그램(Apple Developer Program) 가입 조건 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/apple-developer-program-condition.png&quot; alt=&quot;Apple Developer Program condition&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 프로그램(Apple Developer Program)에 가입하기 위한 조건이 나와있습니다. 개발자 계정을 무사히 생성하였다면 모든 조건을 클리어한 상태입니다. 스크롤을 해서 아래로 이동하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Start Your Enrollment&lt;/code&gt; 버튼을 눌러 등록 페이지로 이동합니다.&lt;/p&gt; &lt;p&gt;어떤 애플 개발자 프로그램(Apple Developer Program)에 등록할지 선택하는 화면입니다. 자신에 상황에 맞는 애플 개발자 프로그램(Apple Developer Program)을 선택하세요. 여기에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Individual / Sole Proprietor / Single Person Business&lt;/code&gt;를 설명합니다. 해당 프로그램을 선택하고 왼쪽 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 등록을 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/select-apple-developer-program.png&quot; alt=&quot;select apple developer program&quot; /&gt;&lt;/p&gt; &lt;p&gt;사용할 애플 개발자 계정(Apple developer account)의 개인 정보를 입력한 후 약관에 동의합니다. 오른쪽 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-enroll-developer-program/information.png&quot; alt=&quot;apple developer account private information&quot; /&gt;&lt;/p&gt; &lt;p&gt;자신이 입력한 내용이 맞는지 확인하는 페이지가 나옵니다. 내용이 맞다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt;를 눌러 진행합니다.&lt;/p&gt; &lt;p&gt;이제 구매 화면을 보실 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Purchase&lt;/code&gt;버튼을 눌러 구매합니다. 구매 절차는 설명을 생략하도록 하겠습니다.&lt;/p&gt; &lt;h2 id=&quot;완료&quot;&gt;완료&lt;/h2&gt; &lt;p&gt;구매 절차를 모두 완료했습니다. 구매가 정식적으로 완료되면 애플로부터 구매 완료 메일이 옵니다. 구매후 구매 완료까지 조금 시간이 걸립니다. 아무리 기다려도 구매 완료 메일이 오지 않는 분은 애플 개발자 사이트(&lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;)에 로그인한 후 왼쪽 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Contact Us&lt;/code&gt;를 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;멤버십 및 계정&lt;/code&gt; 메뉴를선택한 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로그램 구입 및 갱신&lt;/code&gt;을 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;전화받기&lt;/code&gt;를 눌러 전화로 상담하시면 바로 구매 완료 메일을 받으실 수 있습니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지금까지 RN(react native) 프로젝트로 개발하고 디바이스에 올리는 방법까지 알아봤습니다. 이제 완성된 어플리케이션을 iOS 앱 스토어(App store)에 등록하기 위한 애플의 개발자 프로그램(Apple developer program)에 등록하는 방법에 대해서 알아봅시다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-enroll-developer-program.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 빌드 및 테스트</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-running-on-device/" rel="alternate" type="text/html" title="iOS 빌드 및 테스트"/><published>2018-11-09T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-running-on-device-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-running-on-device/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;지난 시간에 RN(react native)로 개발한 프로젝트를 디바이스에서 테스트를 해봤습니다.(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;디바이스 테스트&lt;/a&gt;) 다들 별 문제 없으셨나요? 이제 테스트는 충분히 해봤으니 RN(react native) 프로젝트를 배포하기 위해 빌드해 보고 실제로 디바이스 올려서 기동시켜 봅시다.&lt;/p&gt; &lt;p&gt;여기에서는 RN(react native) 프로젝트 빌드와 빌드된 파일을 테스트 디바이스에서 확인하는 방법에 대해 알아보겠습니다. 실제 마켓에 업로드하는 과정은 포함되어 있지 않습니다.&lt;/p&gt; &lt;h2 id=&quot;ios--mac&quot;&gt;iOS / Mac&lt;/h2&gt; &lt;p&gt;개발자 생성 및 디바이스와의 연결은 이전 블로그를 참고해주세요.(&lt;a href=&quot;https://dev-yakuza.github.io/react-native/ios-test-on-device/&quot; target=&quot;_blank&quot;&gt;디바이스 테스트&lt;/a&gt;) 여기서는 RN(react native) 프로젝트를 배포하기 위해 빌드하는 방법과 빌드된 파일을 디바이스에 올려 테스트하는 내용만 다루겠습니다.&lt;/p&gt; &lt;h3 id=&quot;배포-빌드-준비&quot;&gt;배포 빌드 준비&lt;/h3&gt; &lt;p&gt;공식 사이트(&lt;a href=&quot;https://facebook.github.io/react-native/docs/ios-running-on-device#building-your-app-for-production&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native&lt;/a&gt;)에 모든 설명이 친절하게 나와있습니다. 하나하나 따라해봅시다.&lt;/p&gt; &lt;h4 id=&quot;https-통신-설정&quot;&gt;HTTPS 통신 설정&lt;/h4&gt; &lt;p&gt;애플에서 어플이 외부와 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 통신을 할때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPS&lt;/code&gt;로 통신을 하지 않으면 통신이 불가하도록 설정하는 기능을 넣었다고 합니다. 하지만 RN(react native)를 개발할때는 로컬에 개발 서버를 띄우고 개발 서버와 통신하여 어플을 기동하므로 RN(react native)는 이 기능을 기본적으로 사용하지 않도록 설정해놨습니다. 하지만 실제 빌드하여 제공할 때는 개발 서버를 이용하지 않으므로 이 부분을 제거할 필요가 있습니다. RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/ios/프로젝트명/info.plist&lt;/code&gt; 파일을 열어 아래에 부분을 찾아 제거합니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSExceptionDomains&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;localhost&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSExceptionAllowsInsecureHTTPLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;주의: 다시 개발을 할 경우에는 이부분을 복원해야합니다. 위에서 설명했지만 개발시 개발 서버(localhost)와 통신은 HTTP로 하기 때문입니다.&lt;/p&gt; &lt;p&gt;어플이 HTTPS 프로토콜이 아닌 HTTP 프로토콜로 통신을 해야 하시는 분은 아래와 localhost 부분만 제거합니다.&lt;/p&gt; &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;빌드-스키마-변경&quot;&gt;빌드 스키마 변경&lt;/h4&gt; &lt;p&gt;RN(react native) 프로젝트를 빌드하기 위해서는 빌드 스키마(build scheme)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;로 변경해야 합니다. RN(react native) 프로젝트 폴더에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명.xcodeproj&lt;/code&gt;을 실행시킵니다.&lt;/p&gt; &lt;p&gt;xcode가 실행되면 상단 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; 메뉴에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; 항목에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/change-scheme.png&quot; alt=&quot;change build scheme&quot; /&gt;&lt;/p&gt; &lt;p&gt;하단과 같은 화면이 나오면 왼쪽에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt;을 선택하고 오른쪽에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Configuration&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;로 변경하고 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Close&lt;/code&gt;를 창을 닫습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/change-debug-to-release.png&quot; alt=&quot;change build scheme to Release from Debug&quot; /&gt;&lt;/p&gt; &lt;p&gt;주의: 역시 다시 개발을 할 때에는 이 부분을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;로 돌려줄 필요가 있습니다.&lt;/p&gt; &lt;h4 id=&quot;bundle-파일-지정&quot;&gt;bundle 파일 지정&lt;/h4&gt; &lt;p&gt;마지막으로 bundle 파일을 지정합니다. RN(react native)은 개발을 하는 동안은 개발 서버(localhost)에서 js(javascript) 파일을 제공하여 동작하지만 배포시에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;처럼 빌드하여 하나의 bundle 파일을 생성하고 그 파일을 이용합니다. 따라서 배포 파일 빌드에서는 js(javascript)가 빌드된 하나의 bundle파일을 활용하도록 지정해 줄 필요가 있습니다. RN(react native) 프로젝트 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명/AppDelegate.m&lt;/code&gt;를 열어 아래와 같이 수정합니다.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#ifdef DEBUG jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil]; #else jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;]; #endif &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;디바이스에서-기동&quot;&gt;디바이스에서 기동&lt;/h4&gt; &lt;p&gt;모든 설정은 끝났습니다. RN(react native)를 빌드하기 전에 디바이스에서 확인해 봅시다. 디바이스에서 테스트하는 것과 마찬가지로 USB로 Mac과 아이폰을 연결한 후 빌드 타겟을 디바이스로 한 후 화살표 모양을 눌러 실행 시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-running-on-device/device-test.png&quot; alt=&quot;device test&quot; /&gt;&lt;/p&gt; &lt;p&gt;디바이스에서 테스트와 달리 js(javascript)가 빌드된 bundle 파일을 사용하기 때문에 Mac과 아이폰이 같은 Wifi/Network상에 존재할 필요가 없으며 인스톨후에 Mac과 디바이스가 연결되어 있을 필요가 없습니다. 하지만 정식 인스톨이 아니기 때문에 일정 기간이 지나면 해당 어플을 사용할 수 없습니다.&lt;/p&gt; &lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://facebook.github.io/react-native/docs/ios-running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 지난 시간에 RN(react native)로 개발한 프로젝트를 디바이스에서 테스트를 해봤습니다.(디바이스 테스트) 다들 별 문제 없으셨나요? 이제 테스트는 충분히 해봤으니 RN(react native) 프로젝트를 배포하기 위해 빌드해 보고 실제로 디바이스 올려서 기동시켜 봅시다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-running-on-device.jpg"/></entry><entry xml:lang="ko"><title type="html">iOS 디바이스 테스트</title><link href="https://dev-yakuza.github.io/ko/react-native/ios-test-on-device/" rel="alternate" type="text/html" title="iOS 디바이스 테스트"/><published>2018-11-08T00:00:00+09:00</published><updated>2018-11-14T14:07:42+09:00</updated><id>https://dev-yakuza.github.io/react-native/ios-test-on-device-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/ios-test-on-device/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;RN(react native)로 개발한 프로젝트를 시뮬레이터로만 테스트하기 힘드시죠? 지금까지 개발한 RN(react native) 프로젝트를 시뮬레이터가 아닌 디바이스에서 테스트해 봅시다.&lt;/p&gt; &lt;h2 id=&quot;ios--mac&quot;&gt;iOS / Mac&lt;/h2&gt; &lt;p&gt;아이폰에서 테스트하려면 Mac이 있어야겠죠. Mac과 iOS 디바이스 그리고 테스트 하고 싶은 프로젝트를 준비합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/mac-iphone.jpg&quot; alt=&quot;prepare iphone mac&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;개발자-생성&quot;&gt;개발자 생성&lt;/h3&gt; &lt;p&gt;디바이스에서 테스트하기 위해서는 애플 개발자 계정(Apple developer account)이 필요합니다. 개발자 등록이 아닌 계정을 생성하는 것이므로 무료로 사용이 가능합니다. 애플 개발자 계정(Apple developer account)이 있으신 분은 이 항목을 넘어가셔도 괜찮습니다.&lt;/p&gt; &lt;p&gt;아래에 링크를 눌러 애플 개발자 계정(Apple developer account) 생성 사이트로 이동합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;애플 개발자 계정(Apple developer account): &lt;a href=&quot;https://developer.apple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.apple.com/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/apple-developer-site.png&quot; alt=&quot;apple developer site&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt; 메뉴를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/apple-developer-site-login.png&quot; alt=&quot;apple developer site login&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 계정이 있으신 분은 로그인을 하시면 됩니다. 계정이 없으신 분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Apple ID&lt;/code&gt;로 애플 계정을 생성합니다. 애플 개발자 계정이 아닌 애플 계정, 아이폰에서 어플을 다운로드하실 때 사용하시는 계정을 사용하시면 됩니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/agreement.png&quot; alt=&quot;agreement&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 계정으로 사용하기 위한 약관이 표시됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;By checking this box I confirm that I have read and agree to be bound by the Agreement above.&lt;/code&gt;를 눌러 동의하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Submit&lt;/code&gt;을 눌러 다음으로 진행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/completed-create-account.png&quot; alt=&quot;completed to create developer account&quot; /&gt;&lt;/p&gt; &lt;p&gt;애플 개발자 계정(Apple developer account) 생성이 완료되었습니다.&lt;/p&gt; &lt;h3 id=&quot;디바이스-테스트&quot;&gt;디바이스 테스트&lt;/h3&gt; &lt;p&gt;공식 사이트(&lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;)에 친절하게 설명이 잘 나와있습니다. 한번 따라해 봅시다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;USB를 이용하여 테스트하고 싶은 디바이스와 Mac을 연결합니다.&lt;/li&gt; &lt;li&gt;RN(react native) 프로젝트가 있는 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/[프로젝트명].xcodeproj&lt;/code&gt; 파일을 실행 시킵니다.&lt;/li&gt; &lt;li&gt; &lt;p&gt;xcode가 실행되면 왼쪽 위에 프로젝트명을 선택하고 프로젝트명 오른쪽 화면 위에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;General&lt;/code&gt; 탭을 선택합니다. 스크롤을 해서 내려가다보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing&lt;/code&gt; 섹션이 보입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 항목 옆에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add an Account...&lt;/code&gt;를 클릭합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing.png&quot; alt=&quot;signing in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;상단에서 만든 애플 개발자 계정(Apple developer account)의 아이디/패스워드를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 누릅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-login.png&quot; alt=&quot;login signing in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;로그인 후에 나오는 화면에서 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Download Manual Profiles&lt;/code&gt;를 눌러 다운로드한 후 창을 닫습니다.&lt;/p&gt; &lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;옆에 항목이 드롭다운 메뉴로 변경된걸 확인할 수 있습니다. 위에서 추가한 아이디를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-error.png&quot; alt=&quot;signing error in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 에러가 나오시는 분들은 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Identity&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle Identifier&lt;/code&gt;를 변경해 주세요.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-error-solve.png&quot; alt=&quot;signing error solve in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;왼쪽에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; 항목에 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명Tests&lt;/code&gt;를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;옆에 드롭다운 메뉴를 선택하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;signing&lt;/code&gt;(ID 선택)해줍니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/signing-target-test.png&quot; alt=&quot;signing test target in xcode&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;왼쪽위에 프로젝트를 실행시킬 장치를 USB로 연결한 Device로 변경하고 화살표를 눌러 프로젝트를 실행시킵니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/device-test.png&quot; alt=&quot;device test in xcode&quot; /&gt;&lt;/p&gt; &lt;p&gt;주의: 디바이스에 테스트를 위한 빌드입니다. 따라서 시뮬레이터와 동일하게 PC에 개발서버가 활성화되고 그 서버와 디바이스가 통신하여 테스트가 가능하도록 동작합니다. 따라서 같은 Wifi 환경 / 네트워크가 아니면 서버를 찾을 수 없기 때문에 디바이스 테스트가 불가능합니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;성공적으로 프로젝트가 빌드되면 아래와 같은 메세지를 볼수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/ios-test-on-device/security-error.png&quot; alt=&quot;security error&quot; /&gt;&lt;/p&gt; &lt;p&gt;친절하게 설명이 나와있으므로 따라해봅니다. 디바이스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;설정&lt;/code&gt;을 실행합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;일반&lt;/code&gt;을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로파일 및 기기 관리&lt;/code&gt;를 선택합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;개발자 앱&lt;/code&gt; 항목에 자신의 애플 개발자 계정(Apple developer account)을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;신뢰함&lt;/code&gt;을 선택합니다. 그리고 xcode에 왼쪽 위에 실행 버튼을 다시 눌러 프로젝트를 실행하면 잘 동작하는 것을 확인할 수 있습니다.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;공식 사이트: &lt;a href=&quot;https://facebook.github.io/react-native/docs/running-on-device&quot; rel=&quot;nofollow noreferrer&quot;&gt;react native&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 RN(react native)로 개발한 프로젝트를 시뮬레이터로만 테스트하기 힘드시죠? 지금까지 개발한 RN(react native) 프로젝트를 시뮬레이터가 아닌 디바이스에서 테스트해 봅시다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/ios-test-on-device.jpg"/></entry><entry><title type="html">React Native Admob/common/installation</title><link href="https://dev-yakuza.github.io/ko/2018/11/" rel="alternate" type="text/html" title="React Native Admob/common/installation"/><published>2018-11-04T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/2018/react-native-admob/common/installation</id><content type="html" xml:base="https://dev-yakuza.github.io/2018/11/">&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react-native-tts &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">npm install --save react-native-tts</summary></entry><entry xml:lang="ko"><title type="html">구글 애드몹</title><link href="https://dev-yakuza.github.io/ko/react-native/react-native-admob/" rel="alternate" type="text/html" title="구글 애드몹"/><published>2018-11-04T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/react-native/react-native-admob-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/react-native/react-native-admob/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;구글은 광고 플랫폼으로 애드센스(Adsense: &lt;a href=&quot;https://www.google.com/adsense/start/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/adsense/start/&lt;/a&gt;)와 애드몹(Admob: &lt;a href=&quot;https://www.google.com/admob/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/admob/&lt;/a&gt;)을 가지고 있습니다. 여기에서는 어플리케이션에 구글 애드몹(google admob)을 이용하여 광고를 노출시키는 방법에 대해서 알아보겠습니다.&lt;/p&gt; &lt;p&gt;구글의 애드센스(google adsense)와 애드몹(google admob)의 차이점은 애드센스는 웹사이트용 플랫폼이고 애드몹은 스마트폰 어플리케이션용이라는 점입니다. 우리는 블로그용 광고로 이미 애드센스(google adsense)를 사용하고 있으며 웹사이트에 애드센스(Adsense)를 사용하는 방법에 대해서는 &lt;a href=&quot;https://dev-yakuza.github.io/jekyll/google-service/&quot;&gt;google service&lt;/a&gt;에서 확인하시기 바랍니다.&lt;/p&gt; &lt;h2 id=&quot;라이브러리-설치&quot;&gt;라이브러리 설치&lt;/h2&gt; &lt;p&gt;구글 애드몹(google admob)을 RN(react native)에서 사용하기 위해 &lt;a href=&quot;https://github.com/sbugert/react-native-admob&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native-admob&lt;/a&gt; 라이브러리를 설치합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install react-native-admob@next &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;설치가 완료되면 아래에 명령어로 react-native-admob 라이브러리와 RN(react native) 프로젝트를 연결합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native link react-native-admob &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;ios-sdk-설치&quot;&gt;iOS SDK 설치&lt;/h3&gt; &lt;p&gt;구글 애드몹(Google admob)을 iOS에서 사용하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;을 설치해야합니다. 아래에 링크를 클릭하여 설치 방법을 확인합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Google Mobile Ads SDK: &lt;a href=&quot;https://developers.google.com/admob/ios/quick-start#import_the_mobile_ads_sdk&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developers.google.com/admob/ios/quick-start&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;여기서는 파일 다운로드 방식으로 설명하겠습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;다운로드 링크: &lt;a href=&quot;https://developers.google.com/admob/ios/download&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developers.google.com/admob/ios/download&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;위에 링크를 눌러 다운로드 사이트로 이동하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt;를 다운로드합니다. 다운로드가 완료되면 압축을 풀어줍니다.&lt;/p&gt; &lt;p&gt;RN(react native) 프로젝트 폴더에서 ios 폴더로 이동하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명.xcodeproj&lt;/code&gt;파일을 실행합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/add_sdk.png&quot; alt=&quot;add Google Mobile Ads SDK to ios &quot; /&gt;&lt;/p&gt; &lt;p&gt;xcode가 실행되면 왼쪽위에 프로젝트명을 우클릭하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Files to [프로젝트명]&lt;/code&gt;을 선택합니다. 위에서 다운로드하고 압축을 푼 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt; 폴더로 이동하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMobileAds.framework&lt;/code&gt;파일을 선택합니다. 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Copy items if needed&lt;/code&gt;를 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; 버튼을 눌러 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt; 라이브러리를 추가합니다.&lt;/p&gt; &lt;h2 id=&quot;구글-애드몹-가입&quot;&gt;구글 애드몹 가입&lt;/h2&gt; &lt;p&gt;구글 애드몹(Google admob) 사이트로 이동하여 회원가입을 합니다. 일반적인 회원가입/로그인 절차임으로 설명을 생략합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;구글 애드몹(Google admob) 사이트: &lt;a href=&quot;https://www.google.com/admob/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.google.com/admob/&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;구글-애드몹-설정&quot;&gt;구글 애드몹 설정&lt;/h2&gt; &lt;p&gt;구글 애드몹(Google admob) 사용법에 대해서 알아봅니다. 구글 애드몹(Google admob)을 사용하기 위해 구글 애드몹(Google admob) 사이트에 회원가입을 하고 로그인을 하면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/signin_google_admob.png&quot; alt=&quot;signin google admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;하단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GET STARTED&lt;/code&gt; 버튼을 눌러 구글 애드몹(Google admob)에 사용을 시작합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/configure_admob.png&quot; alt=&quot;configure admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;이미 앱이 마켓에 등록되어있는지 여부를 선택합니다. 우리는 아직 앱을 등록하지 않은 상태이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;를 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/configure_app_name.png&quot; alt=&quot;configure app name on admob&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 애드몹(Google admob)을 사용하기 위해 앱 이름을 작성하고 사용할 플랫폼을 선택합니다. 우리는 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;를 선택하여 진행하겠습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/completed_configure.png&quot; alt=&quot;completed to configure&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 애드몹(Google admob) 등록이 완료되었습니다. 친절하게 하단에 다음 단계에 대한 설명이 잘 나와있습니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;react-native-admob을 설정할때 필요한 &lt;code class=&quot;highlighter-rouge&quot;&gt;App ID&lt;/code&gt;를 복사해둡니다.&lt;/li&gt; &lt;li&gt;광고 타입(ad unit)을 구글 애드몹(Google admob)에서 설정합니다.&lt;/li&gt; &lt;li&gt;앱을 앱스토어에 등록하면 구글 애드몹(Google admob)에서 연결해줘야합니다.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;하단에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;NEXT: CREATE AD UNIT&lt;/code&gt;을 눌러 광고 타입 설정화면으로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/select_ad_uni.png&quot; alt=&quot;select advertisement type&quot; /&gt;&lt;/p&gt; &lt;p&gt;우리는 일단 배너 광고 사용해 보겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Banner&lt;/code&gt;의 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;버튼을 선택합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/set_banner_name.png&quot; alt=&quot;input banner name&quot; /&gt;&lt;/p&gt; &lt;p&gt;해당 배너의 이름을 설정합니다. 구글 애드몹(Google admob) 서비스에서 해당 배너를 쉽게 찾기 위한 이름이므로 자신이 쉽게 인식할 수 있는 이름을 설정합니다. 입력을 완료했으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE AD UNIT&lt;/code&gt; 버튼을 눌러 설정을 끝냅니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/react-native/react-native-admob/finished_configuration.png&quot; alt=&quot;finished configuration&quot; /&gt;&lt;/p&gt; &lt;p&gt;구글 애드몹(Google admob)의 배너 설정을 완료했습니다. 다시 나온 app ID와 배너의 ad unit ID를 잘 복사해 둡니다.&lt;/p&gt; &lt;h2 id=&quot;react-native-admob&quot;&gt;react-native-admob&lt;/h2&gt; &lt;p&gt;구글 애드몹(Google admob)에서 설정한 배너를 RN(react-native)에서 사용하기 위해 react-native-admob의 사용법을 알아봅시다.&lt;/p&gt; &lt;h3 id=&quot;ios-설정&quot;&gt;iOS 설정&lt;/h3&gt; &lt;p&gt;구글 애드몹(Google admob)을 iOS에서 사용하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/프로젝트명/AppDelegate.m&lt;/code&gt;를 수정해야합니다.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;React/RCTRootView.h&amp;gt; @import GoogleMobileAds; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위에서 다운로드하여 xcode에 추가한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Mobile Ads SDK&lt;/code&gt; 라이브러리를 임포트합니다.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.window.rootViewController = rootViewController; [GADMobileAds configureWithApplicationID:@&quot;ca-app-pub-7987914246691031~8295071692&quot;]; [self.window makeKeyAndVisible]; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 애드몹(Google admob)을 생성할 때 복사한 app ID를 넣은 &lt;code class=&quot;highlighter-rouge&quot;&gt;[GADMobileAds configureWithApplicationID:@&quot;구글 애드몹 앱 ID&quot;];&lt;/code&gt; 코드를 위와 같은 위치에 넣습니다.&lt;/p&gt; &lt;p&gt;이로써 iOS에서 구글 애드몹(Google admob)을 사용할 준비가 되었습니다.&lt;/p&gt; &lt;h3 id=&quot;react-native-admob-사용&quot;&gt;react-native-admob 사용&lt;/h3&gt; &lt;p&gt;구글 애드몹(Google admob)에 설정한 배너를 사용하기위해 배너를 표시하고자하는 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-admob&lt;/code&gt; 라이브러리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AdMobBanner&lt;/code&gt;를 임포트합니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-admob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;구글 애드몹(Google admob) 배너를 표시하고 싶은 위치에 아래에 코드를 붙여 넣습니다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fullBanner&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adUnitID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;자신의 ad unit ID&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testDevices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdMobBanner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulatorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onAdFailedToLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;adSize: 광고의 사이즈를 결정합니다. 사이즈에 관해서는 공식 사이트를 참고하시기 바랍니다.(&lt;a href=&quot;https://github.com/sbugert/react-native-admob#admobbanner&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native-admob banner size&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;adUnitID: 구글 애드몹(Google admob)에서 생성한 배너 유닛의 아이디(ad unit ID)를 복사해서 넣습니다.&lt;/li&gt; &lt;li&gt;testDevices: 테스트용 단말기의 아이디를 넣습니다. 여기서는 시뮬레이터의 아이디를 설정했습니다.&lt;/li&gt; &lt;li&gt;onAdFailedToLoad: 광고의 로딩이 실패한 경우에 처리 부분입니다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;설정이 완료되었습니다. 프로젝트를 실행하여 광고가 잘 표시되는지 확인합니다.&lt;/p&gt; &lt;h2 id=&quot;안드로이드android&quot;&gt;안드로이드(Android)&lt;/h2&gt; &lt;p&gt;안드로이드(Android) 부분은 실제로 개발하여 추가되면 블로그에 추가할 예정입니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 구글은 광고 플랫폼으로 애드센스(Adsense: https://www.google.com/adsense/start/)와 애드몹(Admob: https://www.google.com/admob/)을 가지고 있습니다. 여기에서는 어플리케이션에 구글 애드몹(google admob)을 이용하여 광고를 노출시키는 방법에 대해서 알아보겠습니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/react-native/react-native-admob.jpg"/></entry><entry xml:lang="ko"><title type="html">버전(변경이력) 생성</title><link href="https://dev-yakuza.github.io/ko/git/create-stage/" rel="alternate" type="text/html" title="버전(변경이력) 생성"/><published>2018-10-31T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/git/create-stage-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/git/create-stage/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;이전 블로그(&lt;a href=&quot;https://dev-yakuza.github.io/git/create-stage/&quot; target=&quot;_blank&quot;&gt;저장소(Repository) 생성&lt;/a&gt;)에서 git의 저장소(Repository)를 생성하는 방법에 대해서 살펴보았습니다. 이번에는 생성된 git 저장소(Repository)에 버전 관리를 위해 버전(변경 이력)을 생성하는 방법에 대해서 알아봅시다.&lt;/p&gt; &lt;h2 id=&quot;파일-추가&quot;&gt;파일 추가&lt;/h2&gt; &lt;p&gt;git 저장소(Repository)가 존재하는 폴더(&lt;code class=&quot;highlighter-rouge&quot;&gt;temp_test_git&lt;/code&gt;)에 버전 관리를 하고 싶은 파일을 복사하거나 새롭게 만듭니다.&lt;/p&gt; &lt;p&gt;우리는 테스트를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;temp_test_git&lt;/code&gt; 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;test text&lt;/code&gt;라고 기록한 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일을 생성하였습니다.&lt;/p&gt; &lt;h2 id=&quot;git-status&quot;&gt;git status&lt;/h2&gt; &lt;p&gt;git 저장소(Repository)의 현재 상태를 확인하기 위해 아래에 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령어를 실행시킵니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령어를 실행하면 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status.png&quot; alt=&quot;git status&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;On branch master: 현재 해당하는 브랜치(branch)는 마스터(master)입니다. git 브랜치(branch)에 관해서는 이후에 다른 블로그 포스트에서 설명합니다.&lt;/li&gt; &lt;li&gt;No commits yet: 아직 커밋(commit)을 하지 않은 상태입니다. 커밋(commit)은 버전(변경 이력)을 의미합니다. 아직 버전(변경 이력)을 만들지 않은 상태를 의미합니다.&lt;/li&gt; &lt;li&gt;Untracked files: git가 버전(변경 이력) 관리를 하고 있지 않는 파일 리스트입니다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;우리는 아직 git에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일을 버전(변경 이력)으로 관리하라고 알려주지 않았습니다. 그렇기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Untracked files&lt;/code&gt;에 우리가 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일이 존재하는 것을 확인할 수 있습니다.&lt;/p&gt; &lt;h2 id=&quot;git-add&quot;&gt;git add&lt;/h2&gt; &lt;p&gt;우리는 새로 만든 파일(&lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt;)을 git에게 버전(변경 이력) 관리 대상임을 알려줘야 합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 명령어로 git에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일은 버전(변경 이력) 관리 대상임을 알려 줍니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# add single file&lt;/span&gt; git add test.txt &lt;span class=&quot;c&quot;&gt;# add multiple files&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# git add test.txt test2.txt test3.txt&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add all files&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# git add .&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령어로 git이 새롭게 추가된 파일을 잘 인식하는지 확인합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령어를 실행하면 아까와는 다른 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-after-add.png&quot; alt=&quot;git status after executing git add command&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Changes to be committed: git이 다음에 버전(변경 이력) 관리를 하기 위한 파일 리스트입니다. 우리는 파일을 새롭게 추가했기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;new file&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;text.txt&lt;/code&gt;가 추가된 것을 볼 수 있습니다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;를 통해 파일을 추가하는 과정이 있는 이유는 이번 버전(변경 이력)에 추가하고 싶지 않은 파일들이 실제 프로그램을 작성할 때 존재하기 때문입니다. 예를 들어 빌드된 결과물, DB정보, ID/PW가 저장된 설정 파일이나 임시로 로그를 표시하기 위해 작성한 코드(console.log / print)가 포함되어 있어 버전(변경 이력)과 무관한 내용을 구별하기 위해 사용합니다.&lt;/p&gt; &lt;h2 id=&quot;git-commit&quot;&gt;git commit&lt;/h2&gt; &lt;p&gt;우리는 git에게 버전(변경 이력)에 추가하고 싶은 파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 명령어로 알려줬습니다. 하지만 실제 버전(변경 이력) 관리는 이뤄지지 않았습니다. 단지 git에게 새로운 파일이 있음을 알려준 것입니다. 이제 실제 버전(변경 이력) 관리를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;을 이용하여 버전(변경 이력)을 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;명령어를 실행하면 버전(변경 이력)을 생성할 수 있는 화면이 실행됩니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-commit.png&quot; alt=&quot;git commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;이 화면은 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;이라는 문서 편집 툴이 실행된 화면입니다. 문서를 편집하기 위해 키보드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;(insert)를 입력하고 이 변경 이력에 내용이 무엇인지 작성합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-commit-with-message.png&quot; alt=&quot;git commit with message&quot; /&gt;&lt;/p&gt; &lt;p&gt;작성이 완료되면 키보드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt; 버튼을 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;(write-quit)을 입력하여 변경 이력을 작성합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-complete-commit.png&quot; alt=&quot;git completed commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;변경 이력 작성이 완료되면 위와 같은 메세지를 볼 수 있습니다.&lt;/p&gt; &lt;h2 id=&quot;git-log&quot;&gt;git log&lt;/h2&gt; &lt;p&gt;버전(변경 이력)이 잘 생성되었는지 확인하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;명령어를 실행시킵니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 실행하면 현재 작성한 버전(변경 이력)을 확인할 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-log.png&quot; alt=&quot;git log&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Author: 버전(변경 이력) 작성자 및 작성자 이메일(git config로 등록한 사용자명과 이메일)&lt;/li&gt; &lt;li&gt;Date: 버전(변경 이력)의 생성일자&lt;/li&gt; &lt;li&gt;Date 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;을 사용하여 작성한 메세지를 확인할 수 있습니다.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;파일-수정인-경우&quot;&gt;파일 수정인 경우&lt;/h2&gt; &lt;p&gt;파일을 수정한 경우도 위와 동일한 방식을 취합니다. 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 명령어로 현재 상태를 확인합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;아직 아무 변경도 하지 않았기 때문에 변경 사항이 없다고 git이 알려줍니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-no-change.png&quot; alt=&quot;git status no change&quot; /&gt;&lt;/p&gt; &lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일의 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;test text&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;test string&lt;/code&gt;으로 수정한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;를 실행 시킵니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이번에는 수정 사항이 있기 때문에 아래와 같은 화면을 볼 수 있습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-with-modification.png&quot; alt=&quot;git status with modification&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;modified: 수정된 파일을 나타냅니다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;를 통해 git에게 변경된 이력이 있음 알려줍니다. 다른 말로 버전(변경 이력)에 기록할 파일을 추가합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add test.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 상태를 확인합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-status-after-commit.png&quot; alt=&quot;git status after commit&quot; /&gt;&lt;/p&gt; &lt;p&gt;아까와는 다르게 글자도 녹색으로 변경 되었으며 &lt;code class=&quot;highlighter-rouge&quot;&gt;no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)&lt;/code&gt; 메세지도 없는 것을 확인 할 수 있습니다. git이 버전(변경 이력)에 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; 파일을 잘 추가하였음을 알 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;을 이용하여 버전(변경 이력)을 생성합니다. 버전 메세지(변경 이력 메세지)에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;edit 'text' to 'string'&lt;/code&gt;을 입력했습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 사용하여 버전(변경 이력)이 잘 생성되었는지 확인합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-stage/git-log-with-new-version.png&quot; alt=&quot;git log with new version&quot; /&gt;&lt;/p&gt; &lt;p&gt;위와 같이 버전(변경 이력)이 잘 생성 된 것을 확인할 수 있습니다.&lt;/p&gt; &lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt; &lt;p&gt;버전(변경 이력)을 생성하는 방법에 대해서 알아봤습니다. 전체적으로 요약하면 아래와 같습니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;파일 추가 또는 수정&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 추가 또는 변경된 파일 확인&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;로 버전(변경 이력)에 추가하고 싶은 파일 등록&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 버전(변경 이력)에 추가한 파일이 등록되었는지 확인&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;으로 버전(변경 이력)에 메세지를 추가하여 생성&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;로 생성된 버전(변경 이력) 확인&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;위와 같은 방법으로 새로운 버전(변경 이력)을 생성하면 됩니다.&lt;/p&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 이전 블로그(저장소(Repository) 생성)에서 git의 저장소(Repository)를 생성하는 방법에 대해서 살펴보았습니다. 이번에는 생성된 git 저장소(Repository)에 버전 관리를 위해 버전(변경 이력)을 생성하는 방법에 대해서 알아봅시다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/git/create-stage.jpg"/></entry><entry xml:lang="ko"><title type="html">저장소(Repository) 생성</title><link href="https://dev-yakuza.github.io/ko/git/create-repository/" rel="alternate" type="text/html" title="저장소(Repository) 생성"/><published>2018-10-29T00:00:00+09:00</published><updated>2018-11-08T18:08:09+09:00</updated><id>https://dev-yakuza.github.io/git/create-repository-ko</id><content type="html" xml:base="https://dev-yakuza.github.io/git/create-repository/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt; &lt;p&gt;git을 설치했으니 이제 git을 사용해서 소스 코드의 버전을 관리해야겠죠? 여기에서는 git에서 소스 코드를 관리하기 위한 저장소(Repository)를 생성 방법에 대해서 알아봅니다. git의 저장소(Repository)는 소스 코드 버전에 대한 이력을 저장하기 위한 별도의 저장 장소를 의미합니다.&lt;/p&gt; &lt;h2 id=&quot;프로젝트-폴더-생성&quot;&gt;프로젝트 폴더 생성&lt;/h2&gt; &lt;p&gt;Mac은 &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt;, Windows는 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;를 사용하여 진행합니다. git을 활용하기 위한 폴더를 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir temp_test_git &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;git-저장소repository-생성&quot;&gt;git 저장소(Repository) 생성&lt;/h2&gt; &lt;p&gt;git을 사용하기 위해 생성한 프로젝트 폴더에 git의 저장소(Repository)를 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp_test_git git &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위에 명령어로 git에서 사용 가능한 명령어 리스트를 확인합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-repository/clone_init.png&quot; alt=&quot;git clone init&quot; /&gt;&lt;/p&gt; &lt;p&gt;git 명령어를 확인하면 위와 같이 git의 저장소(Repository)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt;을 할지 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 할지 선택하는 명령어를 확인할 수 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;init: 새로운 git 저장소(Repository)를 생성합니다.&lt;/li&gt; &lt;li&gt;clone: 기존에 git의 저장소(Repository)를 복사하여 생성합니다.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;git-init&quot;&gt;git init&lt;/h3&gt; &lt;p&gt;새로운 프로젝트로 시작하는 경우는, &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 명령어를 사용하여 git의 저장소(Repository)를 생성합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;git-clone&quot;&gt;git clone&lt;/h3&gt; &lt;p&gt;기존에 존재하는 프로젝트(opensource 또는 기존에 git으로 버전 관리를 하고 있는 프로젝트)가 있는 경우 외부 저장소(Remote Repository)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; 명령어를 사용하여 저장소(Repository)를 가져옵니다.&lt;/p&gt; &lt;p&gt;우리의 블로그 git 저장소(Repository)를 clone하는 것을 예로 들어 설명하겠습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;git 저장소(Repository): &lt;a href=&quot;https://github.com/dev-yakuza/dev-yakuza.github.io&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/dev-yakuza/dev-yakuza.github.io&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;위에 링크를 눌러 github에서 저장하고 있는 우리의 git 저장소(Repository)로 이동합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/images/category/git/create-repository/clone.png&quot; alt=&quot;git clone blog&quot; /&gt;&lt;/p&gt; &lt;p&gt;오른쪽에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone or donwload&lt;/code&gt; 버튼을 누르면 git 저장소(Repository)의 URL을 복사할 수 있습니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/dev-yakuza/dev-yakuza.github.io.git &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위에 명령어를 실행하면 우리 블로그의 git 저장소(Repository)가 local PC에 복사됩니다. 참고로 우리 블로그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;을 이용하여 무료로 서비스하고 있습니다. 관심있으신 분은 &lt;a href=&quot;https://dev-yakuza.github.io/jekyll/&quot; target=&quot;_blank&quot;&gt;jekyll blog&lt;/a&gt;를 참고하세요.&lt;/p&gt; &lt;h2 id=&quot;git-저장소repository-생성-확인&quot;&gt;git 저장소(Repository) 생성 확인&lt;/h2&gt; &lt;p&gt;git 저장소(Repository)가 잘 생성됐는지 확인하기 위해 아래에 명령어를 입력합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Mac&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Windows&lt;/span&gt; dir /ah &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;표시되는 리스트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;폴더가 보이면 git 저장소(Repository) 생성에 성공한 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 폴더는 git을 사용하여 소스 코드 버전을 관리하면 그에 해당 되는 정보들이 저장되는 장소입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 폴더를 삭제하면 git 저장소(Repository)에 저장한 내용이 전부 삭제되므로 삭제하지 않도록 주의해 주세요.&lt;/p&gt; &lt;h2 id=&quot;사용자-설정&quot;&gt;사용자 설정&lt;/h2&gt; &lt;p&gt;이제 새롭게 생성된 git 저장소(Repository)에 버전 관리시 사용할 유저를 등록합니다. 이 유저는 실제 버전 관리시 누가 파일을 수정하였는지를 알 수 있게 도와줍니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# git config --global user.name [user name]&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name dev.yakuza &lt;span class=&quot;c&quot;&gt;# git config --global user.email [user email]&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email dev.yakuza@gmail.com &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dev.yakuza@gmail.com</name></author><summary type="html">개요 git을 설치했으니 이제 git을 사용해서 소스 코드의 버전을 관리해야겠죠? 여기에서는 git에서 소스 코드를 관리하기 위한 저장소(Repository)를 생성 방법에 대해서 알아봅니다. git의 저장소(Repository)는 소스 코드 버전에 대한 이력을 저장하기 위한 별도의 저장 장소를 의미합니다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dev-yakuza.github.io/assets/images/category/git/create-repository.jpg"/></entry></feed>